name: Daily Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'  # every day at one am

jobs:

  configure:
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.config.outputs.version}}
      
    steps:
    - uses: actions/checkout@v2
      
    - name: config
      id: config
      run: |
        source ./configuration
        echo "::set-output version=${{ env.VERSION }}"

  create-release:
    runs-on: ubuntu-latest
    needs: configure
    outputs:
      upload_url:  ${{steps.create_release.outputs.upload_url}} 
      release_id: ${{steps.create_release.outputs.id}}  

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{needs.configure.outputs.version}} Daily ${{ github.ref }}
        body: |
          Daily, unstable release of ${{needs.configure.outputs.version}}
        draft: true
        prerelease: true

  make-installer-deb:
    runs-on: ubuntu-latest
    needs: [configure, create-release]

    steps:
    - uses: actions/checkout@v2

    - name: Configure
      run: |
        ./configure-linux.sh

    - name: Prepare Distribution
      run: |
        pushd package/src/
        ./quarto-pack prepare-dist --log-level info
        popd

    - name: Make Installer
      run: |
        pushd package/src/
        ./quarto-pack make-installer-deb --log-level info
        popd
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }} 
        asset_path: ./package/out/quarto_${{needs.configure.outputs.version}}_amd64.deb
        asset_name: quarto_${{needs.configure.outputs.version}}_amd64.deb
        asset_content_type: application/deb


  make-installer-win:
    runs-on: windows-latest
    needs: [configure, create-release]

    steps:
    - uses: actions/checkout@v2

    - name: Configure
      run: |
        .\configure-windows.cmd

    - name: Prepare Distribution
      run: |
        pushd package\src\
        .\quarto-pack.cmd prepare-dist --log-level info
        popd

    - name: Make Installer
      run: |
        pushd package\src\
        .\quarto-pack.cmd make-installer-win --log-level info
        popd        
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }} 
        asset_path: ./package/out/quarto.msi
        asset_name: quarto.msi
        asset_content_type: application/msi

  make-installer-mac:
    runs-on: macos-latest
    needs: [configure, create-release]

    steps:
    - uses: actions/checkout@v2

    - name: Configure
      run: |
        ./configure-macos.sh

    - name: Prepare Distribution
      run: |
        pushd package/src/
        ./quarto-pack prepare-dist --log-level info
        popd

    - name: Make Installer
      run: |
        pushd package/src/
        ./quarto-pack make-installer-mac --log-level info
        popd

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }} 
        asset_path: ./package/out/quarto-${{needs.configure.outputs.version}}-macos.pkg
        asset_name: quarto-${{needs.configure.outputs.version}}-macos.pkg
        asset_content_type: application/pkg

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, make-installer-deb, make-installer-win, make-installer-mac]
    if: ${{ success() }}
    steps:
    - name: Publish
      run: |
        echo "Publishing" ${{needs.create-release.outputs.release_id}}
        
  discard-release:
    runs-on: ubuntu-latest
    needs: [create-release, make-installer-deb, make-installer-win, make-installer-mac]
    if: ${{ failure() }}
    
    steps:
    - name: Cleanup
      uses: author/action-rollback@stable
      with:
        # Using a known release ID
        id: ${{needs.create-release.outputs.release_id}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

