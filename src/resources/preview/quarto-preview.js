(function(){"use strict";try{if(typeof document<"u"){var o=document.createElement("style");o.appendChild(document.createTextNode('.preview-ui{position:fixed;bottom:0;right:0}#quarto-log-error-modal .modal__overlay{z-index:5000}#quarto-log-error-modal-content{border:1px solid #dee2e6;overflow-y:auto}#quarto-log-error-display{min-height:100px;padding:8px;margin-bottom:0;font-family:monospace}#quarto-log-error-display:focus{outline:none}.modal__dialog{font-size:16px}.modal__overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.4);display:flex;justify-content:center;align-items:center}.modal__container{position:fixed;top:80px;background-color:#fff;padding:10px 15px 15px;min-width:500px;max-width:90%;max-height:90vh;border-radius:4px;overflow-y:auto;box-sizing:border-box}.modal__header{display:flex;justify-content:space-between;align-items:center}.modal__title{margin-top:0;margin-bottom:0;font-weight:600;border-bottom:none;padding-bottom:10px;font-size:20px;color:#bf4741;line-height:1.25;box-sizing:border-box}.modal__title .bi{margin-right:7px}.modal__close{background:transparent;border:0;margin-bottom:10px}.modal__header .modal__close:before{content:"\\2715"}.modal__content{margin-top:0;margin-bottom:0}@keyframes mmfadeIn{0%{opacity:0}to{opacity:1}}@keyframes mmfadeOut{0%{opacity:1}to{opacity:0}}@keyframes mmslideIn{0%{transform:translateY(15%)}to{transform:translateY(0)}}@keyframes mmslideOut{0%{transform:translateY(0)}to{transform:translateY(-10%)}}.micromodal-slide{display:none}.micromodal-slide.is-open{display:block}.micromodal-slide[aria-hidden=false] .modal__overlay{animation:mmfadeIn .3s cubic-bezier(0,0,.2,1)}.micromodal-slide[aria-hidden=false] .modal__container{animation:mmslideIn .3s cubic-bezier(0,0,.2,1)}.micromodal-slide[aria-hidden=true] .modal__overlay{animation:mmfadeOut .3s cubic-bezier(0,0,.2,1)}.micromodal-slide[aria-hidden=true] .modal__container{animation:mmslideOut .3s cubic-bezier(0,0,.2,1)}.micromodal-slide .modal__container,.micromodal-slide .modal__overlay{will-change:transform}')),document.head.appendChild(o)}}catch(e){console.error("vite-plugin-css-injected-by-js",e)}})();
(function(Tr,ko){typeof exports=="object"&&typeof module<"u"?ko(exports):typeof define=="function"&&define.amd?define(["exports"],ko):(Tr=typeof globalThis<"u"?globalThis:Tr||self,ko(Tr.QuartoPreview={}))})(this,function(Tr){"use strict";var ko=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Fc(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var g={exports:{}},U={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var wo=Symbol.for("react.element"),Dm=Symbol.for("react.portal"),Nm=Symbol.for("react.fragment"),Bm=Symbol.for("react.strict_mode"),Rm=Symbol.for("react.profiler"),Lm=Symbol.for("react.provider"),Om=Symbol.for("react.context"),Fm=Symbol.for("react.forward_ref"),Am=Symbol.for("react.suspense"),zm=Symbol.for("react.memo"),Hm=Symbol.for("react.lazy"),Ac=Symbol.iterator;function Um(e){return e===null||typeof e!="object"?null:(e=Ac&&e[Ac]||e["@@iterator"],typeof e=="function"?e:null)}var zc={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Hc=Object.assign,Uc={};function Mr(e,t,n){this.props=e,this.context=t,this.refs=Uc,this.updater=n||zc}Mr.prototype.isReactComponent={},Mr.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},Mr.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Wc(){}Wc.prototype=Mr.prototype;function Dl(e,t,n){this.props=e,this.context=t,this.refs=Uc,this.updater=n||zc}var Nl=Dl.prototype=new Wc;Nl.constructor=Dl,Hc(Nl,Mr.prototype),Nl.isPureReactComponent=!0;var Kc=Array.isArray,jc=Object.prototype.hasOwnProperty,Bl={current:null},Vc={key:!0,ref:!0,__self:!0,__source:!0};function $c(e,t,n){var r,o={},i=null,a=null;if(t!=null)for(r in t.ref!==void 0&&(a=t.ref),t.key!==void 0&&(i=""+t.key),t)jc.call(t,r)&&!Vc.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(l===1)o.children=n;else if(1<l){for(var u=Array(l),s=0;s<l;s++)u[s]=arguments[s+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps,l)o[r]===void 0&&(o[r]=l[r]);return{$$typeof:wo,type:e,key:i,ref:a,props:o,_owner:Bl.current}}function Wm(e,t){return{$$typeof:wo,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Rl(e){return typeof e=="object"&&e!==null&&e.$$typeof===wo}function Km(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var Gc=/\/+/g;function Ll(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Km(""+e.key):t.toString(36)}function Oi(e,t,n,r,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var a=!1;if(e===null)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case wo:case Dm:a=!0}}if(a)return a=e,o=o(a),e=r===""?"."+Ll(a,0):r,Kc(o)?(n="",e!=null&&(n=e.replace(Gc,"$&/")+"/"),Oi(o,t,n,"",function(s){return s})):o!=null&&(Rl(o)&&(o=Wm(o,n+(!o.key||a&&a.key===o.key?"":(""+o.key).replace(Gc,"$&/")+"/")+e)),t.push(o)),1;if(a=0,r=r===""?".":r+":",Kc(e))for(var l=0;l<e.length;l++){i=e[l];var u=r+Ll(i,l);a+=Oi(i,t,n,u,o)}else if(u=Um(e),typeof u=="function")for(e=u.call(e),l=0;!(i=e.next()).done;)i=i.value,u=r+Ll(i,l++),a+=Oi(i,t,n,u,o);else if(i==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function Fi(e,t,n){if(e==null)return e;var r=[],o=0;return Oi(e,r,"","",function(i){return t.call(n,i,o++)}),r}function jm(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Oe={current:null},Ai={transition:null},Vm={ReactCurrentDispatcher:Oe,ReactCurrentBatchConfig:Ai,ReactCurrentOwner:Bl};U.Children={map:Fi,forEach:function(e,t,n){Fi(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Fi(e,function(){t++}),t},toArray:function(e){return Fi(e,function(t){return t})||[]},only:function(e){if(!Rl(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},U.Component=Mr,U.Fragment=Nm,U.Profiler=Rm,U.PureComponent=Dl,U.StrictMode=Bm,U.Suspense=Am,U.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vm,U.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Hc({},e.props),o=e.key,i=e.ref,a=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,a=Bl.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)jc.call(t,u)&&!Vc.hasOwnProperty(u)&&(r[u]=t[u]===void 0&&l!==void 0?l[u]:t[u])}var u=arguments.length-2;if(u===1)r.children=n;else if(1<u){l=Array(u);for(var s=0;s<u;s++)l[s]=arguments[s+2];r.children=l}return{$$typeof:wo,type:e.type,key:o,ref:i,props:r,_owner:a}},U.createContext=function(e){return e={$$typeof:Om,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:Lm,_context:e},e.Consumer=e},U.createElement=$c,U.createFactory=function(e){var t=$c.bind(null,e);return t.type=e,t},U.createRef=function(){return{current:null}},U.forwardRef=function(e){return{$$typeof:Fm,render:e}},U.isValidElement=Rl,U.lazy=function(e){return{$$typeof:Hm,_payload:{_status:-1,_result:e},_init:jm}},U.memo=function(e,t){return{$$typeof:zm,type:e,compare:t===void 0?null:t}},U.startTransition=function(e){var t=Ai.transition;Ai.transition={};try{e()}finally{Ai.transition=t}},U.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},U.useCallback=function(e,t){return Oe.current.useCallback(e,t)},U.useContext=function(e){return Oe.current.useContext(e)},U.useDebugValue=function(){},U.useDeferredValue=function(e){return Oe.current.useDeferredValue(e)},U.useEffect=function(e,t){return Oe.current.useEffect(e,t)},U.useId=function(){return Oe.current.useId()},U.useImperativeHandle=function(e,t,n){return Oe.current.useImperativeHandle(e,t,n)},U.useInsertionEffect=function(e,t){return Oe.current.useInsertionEffect(e,t)},U.useLayoutEffect=function(e,t){return Oe.current.useLayoutEffect(e,t)},U.useMemo=function(e,t){return Oe.current.useMemo(e,t)},U.useReducer=function(e,t,n){return Oe.current.useReducer(e,t,n)},U.useRef=function(e){return Oe.current.useRef(e)},U.useState=function(e){return Oe.current.useState(e)},U.useSyncExternalStore=function(e,t,n){return Oe.current.useSyncExternalStore(e,t,n)},U.useTransition=function(){return Oe.current.useTransition()},U.version="18.2.0",function(e){e.exports=U}(g);const $e=Fc(g.exports);var Ol={exports:{}},it={},Qc={exports:{}},Yc={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(D,B){var L=D.length;D.push(B);e:for(;0<L;){var q=L-1>>>1,F=D[q];if(0<o(F,B))D[q]=B,D[L]=F,L=q;else break e}}function n(D){return D.length===0?null:D[0]}function r(D){if(D.length===0)return null;var B=D[0],L=D.pop();if(L!==B){D[0]=L;e:for(var q=0,F=D.length,gt=F>>>1;q<gt;){var rt=2*(q+1)-1,Sr=D[rt],Pt=rt+1,Cn=D[Pt];if(0>o(Sr,L))Pt<F&&0>o(Cn,Sr)?(D[q]=Cn,D[Pt]=L,q=Pt):(D[q]=Sr,D[rt]=L,q=rt);else if(Pt<F&&0>o(Cn,L))D[q]=Cn,D[Pt]=L,q=Pt;else break e}}return B}function o(D,B){var L=D.sortIndex-B.sortIndex;return L!==0?L:D.id-B.id}if(typeof performance=="object"&&typeof performance.now=="function"){var i=performance;e.unstable_now=function(){return i.now()}}else{var a=Date,l=a.now();e.unstable_now=function(){return a.now()-l}}var u=[],s=[],d=1,c=null,f=3,h=!1,y=!1,_=!1,E=typeof setTimeout=="function"?setTimeout:null,v=typeof clearTimeout=="function"?clearTimeout:null,p=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function m(D){for(var B=n(s);B!==null;){if(B.callback===null)r(s);else if(B.startTime<=D)r(s),B.sortIndex=B.expirationTime,t(u,B);else break;B=n(s)}}function C(D){if(_=!1,m(D),!y)if(n(u)!==null)y=!0,nt(w);else{var B=n(s);B!==null&&Me(C,B.startTime-D)}}function w(D,B){y=!1,_&&(_=!1,v(b),b=-1),h=!0;var L=f;try{for(m(B),c=n(u);c!==null&&(!(c.expirationTime>B)||D&&!W());){var q=c.callback;if(typeof q=="function"){c.callback=null,f=c.priorityLevel;var F=q(c.expirationTime<=B);B=e.unstable_now(),typeof F=="function"?c.callback=F:c===n(u)&&r(u),m(B)}else r(u);c=n(u)}if(c!==null)var gt=!0;else{var rt=n(s);rt!==null&&Me(C,rt.startTime-B),gt=!1}return gt}finally{c=null,f=L,h=!1}}var S=!1,x=null,b=-1,T=5,P=-1;function W(){return!(e.unstable_now()-P<T)}function H(){if(x!==null){var D=e.unstable_now();P=D;var B=!0;try{B=x(!0,D)}finally{B?ae():(S=!1,x=null)}}else S=!1}var ae;if(typeof p=="function")ae=function(){p(H)};else if(typeof MessageChannel<"u"){var G=new MessageChannel,te=G.port2;G.port1.onmessage=H,ae=function(){te.postMessage(null)}}else ae=function(){E(H,0)};function nt(D){x=D,S||(S=!0,ae())}function Me(D,B){b=E(function(){D(e.unstable_now())},B)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(D){D.callback=null},e.unstable_continueExecution=function(){y||h||(y=!0,nt(w))},e.unstable_forceFrameRate=function(D){0>D||125<D?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<D?Math.floor(1e3/D):5},e.unstable_getCurrentPriorityLevel=function(){return f},e.unstable_getFirstCallbackNode=function(){return n(u)},e.unstable_next=function(D){switch(f){case 1:case 2:case 3:var B=3;break;default:B=f}var L=f;f=B;try{return D()}finally{f=L}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(D,B){switch(D){case 1:case 2:case 3:case 4:case 5:break;default:D=3}var L=f;f=D;try{return B()}finally{f=L}},e.unstable_scheduleCallback=function(D,B,L){var q=e.unstable_now();switch(typeof L=="object"&&L!==null?(L=L.delay,L=typeof L=="number"&&0<L?q+L:q):L=q,D){case 1:var F=-1;break;case 2:F=250;break;case 5:F=1073741823;break;case 4:F=1e4;break;default:F=5e3}return F=L+F,D={id:d++,callback:B,priorityLevel:D,startTime:L,expirationTime:F,sortIndex:-1},L>q?(D.sortIndex=L,t(s,D),n(u)===null&&D===n(s)&&(_?(v(b),b=-1):_=!0,Me(C,L-q))):(D.sortIndex=F,t(u,D),y||h||(y=!0,nt(w))),D},e.unstable_shouldYield=W,e.unstable_wrapCallback=function(D){var B=f;return function(){var L=f;f=B;try{return D.apply(this,arguments)}finally{f=L}}}})(Yc),function(e){e.exports=Yc}(Qc);/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var qc=g.exports,at=Qc.exports;function I(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Xc=new Set,So={};function er(e,t){Pr(e,t),Pr(e+"Capture",t)}function Pr(e,t){for(So[e]=t,e=0;e<t.length;e++)Xc.add(t[e])}var en=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Fl=Object.prototype.hasOwnProperty,$m=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Zc={},Jc={};function Gm(e){return Fl.call(Jc,e)?!0:Fl.call(Zc,e)?!1:$m.test(e)?Jc[e]=!0:(Zc[e]=!0,!1)}function Qm(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function Ym(e,t,n,r){if(t===null||typeof t>"u"||Qm(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Fe(e,t,n,r,o,i,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var be={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){be[e]=new Fe(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];be[t]=new Fe(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){be[e]=new Fe(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){be[e]=new Fe(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){be[e]=new Fe(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){be[e]=new Fe(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){be[e]=new Fe(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){be[e]=new Fe(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){be[e]=new Fe(e,5,!1,e.toLowerCase(),null,!1,!1)});var Al=/[\-:]([a-z])/g;function zl(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Al,zl);be[t]=new Fe(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Al,zl);be[t]=new Fe(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Al,zl);be[t]=new Fe(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){be[e]=new Fe(e,1,!1,e.toLowerCase(),null,!1,!1)}),be.xlinkHref=new Fe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){be[e]=new Fe(e,1,!1,e.toLowerCase(),null,!0,!0)});function Hl(e,t,n,r){var o=be.hasOwnProperty(t)?be[t]:null;(o!==null?o.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(Ym(t,n,o,r)&&(n=null),r||o===null?Gm(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=n===null?o.type===3?!1:"":n:(t=o.attributeName,r=o.attributeNamespace,n===null?e.removeAttribute(t):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var tn=qc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,zi=Symbol.for("react.element"),Dr=Symbol.for("react.portal"),Nr=Symbol.for("react.fragment"),Ul=Symbol.for("react.strict_mode"),Wl=Symbol.for("react.profiler"),ed=Symbol.for("react.provider"),td=Symbol.for("react.context"),Kl=Symbol.for("react.forward_ref"),jl=Symbol.for("react.suspense"),Vl=Symbol.for("react.suspense_list"),$l=Symbol.for("react.memo"),xn=Symbol.for("react.lazy"),nd=Symbol.for("react.offscreen"),rd=Symbol.iterator;function bo(e){return e===null||typeof e!="object"?null:(e=rd&&e[rd]||e["@@iterator"],typeof e=="function"?e:null)}var le=Object.assign,Gl;function Io(e){if(Gl===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);Gl=t&&t[1]||""}return`
`+Gl+e}var Ql=!1;function Yl(e,t){if(!e||Ql)return"";Ql=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(s){var r=s}Reflect.construct(e,[],t)}else{try{t.call()}catch(s){r=s}e.call(t.prototype)}else{try{throw Error()}catch(s){r=s}e()}}catch(s){if(s&&r&&typeof s.stack=="string"){for(var o=s.stack.split(`
`),i=r.stack.split(`
`),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(a!==1||l!==1)do if(a--,l--,0>l||o[a]!==i[l]){var u=`
`+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}while(1<=a&&0<=l);break}}}finally{Ql=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Io(e):""}function qm(e){switch(e.tag){case 5:return Io(e.type);case 16:return Io("Lazy");case 13:return Io("Suspense");case 19:return Io("SuspenseList");case 0:case 2:case 15:return e=Yl(e.type,!1),e;case 11:return e=Yl(e.type.render,!1),e;case 1:return e=Yl(e.type,!0),e;default:return""}}function ql(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Nr:return"Fragment";case Dr:return"Portal";case Wl:return"Profiler";case Ul:return"StrictMode";case jl:return"Suspense";case Vl:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case td:return(e.displayName||"Context")+".Consumer";case ed:return(e._context.displayName||"Context")+".Provider";case Kl:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case $l:return t=e.displayName||null,t!==null?t:ql(e.type)||"Memo";case xn:t=e._payload,e=e._init;try{return ql(e(t))}catch{}}return null}function Xm(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return ql(t);case 8:return t===Ul?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function kn(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function od(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Zm(e){var t=od(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(a){r=""+a,i.call(this,a)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(a){r=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Hi(e){e._valueTracker||(e._valueTracker=Zm(e))}function id(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=od(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Ui(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Xl(e,t){var n=t.checked;return le({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n!=null?n:e._wrapperState.initialChecked})}function ad(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=kn(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function ld(e,t){t=t.checked,t!=null&&Hl(e,"checked",t,!1)}function Zl(e,t){ld(e,t);var n=kn(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Jl(e,t.type,n):t.hasOwnProperty("defaultValue")&&Jl(e,t.type,kn(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function ud(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function Jl(e,t,n){(t!=="number"||Ui(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var To=Array.isArray;function Br(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+kn(n),t=null,o=0;o<e.length;o++){if(e[o].value===n){e[o].selected=!0,r&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function eu(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(I(91));return le({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function sd(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(I(92));if(To(n)){if(1<n.length)throw Error(I(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:kn(n)}}function cd(e,t){var n=kn(t.value),r=kn(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function dd(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function fd(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tu(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?fd(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Wi,pd=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Wi=Wi||document.createElement("div"),Wi.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Wi.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Mo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Po={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Jm=["Webkit","ms","Moz","O"];Object.keys(Po).forEach(function(e){Jm.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Po[t]=Po[e]})});function vd(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Po.hasOwnProperty(e)&&Po[e]?(""+t).trim():t+"px"}function hd(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=vd(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}var eg=le({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function nu(e,t){if(t){if(eg[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(I(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(I(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(I(61))}if(t.style!=null&&typeof t.style!="object")throw Error(I(62))}}function ru(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ou=null;function iu(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var au=null,Rr=null,Lr=null;function md(e){if(e=Zo(e)){if(typeof au!="function")throw Error(I(280));var t=e.stateNode;t&&(t=da(t),au(e.stateNode,e.type,t))}}function gd(e){Rr?Lr?Lr.push(e):Lr=[e]:Rr=e}function yd(){if(Rr){var e=Rr,t=Lr;if(Lr=Rr=null,md(e),t)for(e=0;e<t.length;e++)md(t[e])}}function _d(e,t){return e(t)}function Cd(){}var lu=!1;function Ed(e,t,n){if(lu)return e(t,n);lu=!0;try{return _d(e,t,n)}finally{lu=!1,(Rr!==null||Lr!==null)&&(Cd(),yd())}}function Do(e,t){var n=e.stateNode;if(n===null)return null;var r=da(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(I(231,t,typeof n));return n}var uu=!1;if(en)try{var No={};Object.defineProperty(No,"passive",{get:function(){uu=!0}}),window.addEventListener("test",No,No),window.removeEventListener("test",No,No)}catch{uu=!1}function tg(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(d){this.onError(d)}}var Bo=!1,Ki=null,ji=!1,su=null,ng={onError:function(e){Bo=!0,Ki=e}};function rg(e,t,n,r,o,i,a,l,u){Bo=!1,Ki=null,tg.apply(ng,arguments)}function og(e,t,n,r,o,i,a,l,u){if(rg.apply(this,arguments),Bo){if(Bo){var s=Ki;Bo=!1,Ki=null}else throw Error(I(198));ji||(ji=!0,su=s)}}function tr(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&4098)!==0&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function xd(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function kd(e){if(tr(e)!==e)throw Error(I(188))}function ig(e){var t=e.alternate;if(!t){if(t=tr(e),t===null)throw Error(I(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(o===null)break;var i=o.alternate;if(i===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return kd(o),e;if(i===r)return kd(o),t;i=i.sibling}throw Error(I(188))}if(n.return!==r.return)n=o,r=i;else{for(var a=!1,l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}if(!a)throw Error(I(189))}}if(n.alternate!==r)throw Error(I(190))}if(n.tag!==3)throw Error(I(188));return n.stateNode.current===n?e:t}function wd(e){return e=ig(e),e!==null?Sd(e):null}function Sd(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Sd(e);if(t!==null)return t;e=e.sibling}return null}var bd=at.unstable_scheduleCallback,Id=at.unstable_cancelCallback,ag=at.unstable_shouldYield,lg=at.unstable_requestPaint,ve=at.unstable_now,ug=at.unstable_getCurrentPriorityLevel,cu=at.unstable_ImmediatePriority,Td=at.unstable_UserBlockingPriority,Vi=at.unstable_NormalPriority,sg=at.unstable_LowPriority,Md=at.unstable_IdlePriority,$i=null,Wt=null;function cg(e){if(Wt&&typeof Wt.onCommitFiberRoot=="function")try{Wt.onCommitFiberRoot($i,e,void 0,(e.current.flags&128)===128)}catch{}}var Dt=Math.clz32?Math.clz32:pg,dg=Math.log,fg=Math.LN2;function pg(e){return e>>>=0,e===0?32:31-(dg(e)/fg|0)|0}var Gi=64,Qi=4194304;function Ro(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Yi(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=n&268435455;if(a!==0){var l=a&~o;l!==0?r=Ro(l):(i&=a,i!==0&&(r=Ro(i)))}else a=n&~o,a!==0?r=Ro(a):i!==0&&(r=Ro(i));if(r===0)return 0;if(t!==0&&t!==r&&(t&o)===0&&(o=r&-r,i=t&-t,o>=i||o===16&&(i&4194240)!==0))return t;if((r&4)!==0&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Dt(t),o=1<<n,r|=e[n],t&=~o;return r}function vg(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function hg(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-Dt(i),l=1<<a,u=o[a];u===-1?((l&n)===0||(l&r)!==0)&&(o[a]=vg(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}function du(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Pd(){var e=Gi;return Gi<<=1,(Gi&4194240)===0&&(Gi=64),e}function fu(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Lo(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Dt(t),e[t]=n}function mg(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-Dt(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}function pu(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Dt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var V=0;function Dd(e){return e&=-e,1<e?4<e?(e&268435455)!==0?16:536870912:4:1}var Nd,vu,Bd,Rd,Ld,hu=!1,qi=[],wn=null,Sn=null,bn=null,Oo=new Map,Fo=new Map,In=[],gg="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Od(e,t){switch(e){case"focusin":case"focusout":wn=null;break;case"dragenter":case"dragleave":Sn=null;break;case"mouseover":case"mouseout":bn=null;break;case"pointerover":case"pointerout":Oo.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Fo.delete(t.pointerId)}}function Ao(e,t,n,r,o,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},t!==null&&(t=Zo(t),t!==null&&vu(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function yg(e,t,n,r,o){switch(t){case"focusin":return wn=Ao(wn,e,t,n,r,o),!0;case"dragenter":return Sn=Ao(Sn,e,t,n,r,o),!0;case"mouseover":return bn=Ao(bn,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Oo.set(i,Ao(Oo.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Fo.set(i,Ao(Fo.get(i)||null,e,t,n,r,o)),!0}return!1}function Fd(e){var t=nr(e.target);if(t!==null){var n=tr(t);if(n!==null){if(t=n.tag,t===13){if(t=xd(n),t!==null){e.blockedOn=t,Ld(e.priority,function(){Bd(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Xi(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=gu(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);ou=r,n.target.dispatchEvent(r),ou=null}else return t=Zo(n),t!==null&&vu(t),e.blockedOn=n,!1;t.shift()}return!0}function Ad(e,t,n){Xi(e)&&n.delete(t)}function _g(){hu=!1,wn!==null&&Xi(wn)&&(wn=null),Sn!==null&&Xi(Sn)&&(Sn=null),bn!==null&&Xi(bn)&&(bn=null),Oo.forEach(Ad),Fo.forEach(Ad)}function zo(e,t){e.blockedOn===t&&(e.blockedOn=null,hu||(hu=!0,at.unstable_scheduleCallback(at.unstable_NormalPriority,_g)))}function Ho(e){function t(o){return zo(o,e)}if(0<qi.length){zo(qi[0],e);for(var n=1;n<qi.length;n++){var r=qi[n];r.blockedOn===e&&(r.blockedOn=null)}}for(wn!==null&&zo(wn,e),Sn!==null&&zo(Sn,e),bn!==null&&zo(bn,e),Oo.forEach(t),Fo.forEach(t),n=0;n<In.length;n++)r=In[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<In.length&&(n=In[0],n.blockedOn===null);)Fd(n),n.blockedOn===null&&In.shift()}var Or=tn.ReactCurrentBatchConfig,Zi=!0;function Cg(e,t,n,r){var o=V,i=Or.transition;Or.transition=null;try{V=1,mu(e,t,n,r)}finally{V=o,Or.transition=i}}function Eg(e,t,n,r){var o=V,i=Or.transition;Or.transition=null;try{V=4,mu(e,t,n,r)}finally{V=o,Or.transition=i}}function mu(e,t,n,r){if(Zi){var o=gu(e,t,n,r);if(o===null)Ru(e,t,r,Ji,n),Od(e,r);else if(yg(o,e,t,n,r))r.stopPropagation();else if(Od(e,r),t&4&&-1<gg.indexOf(e)){for(;o!==null;){var i=Zo(o);if(i!==null&&Nd(i),i=gu(e,t,n,r),i===null&&Ru(e,t,r,Ji,n),i===o)break;o=i}o!==null&&r.stopPropagation()}else Ru(e,t,r,null,n)}}var Ji=null;function gu(e,t,n,r){if(Ji=null,e=iu(r),e=nr(e),e!==null)if(t=tr(e),t===null)e=null;else if(n=t.tag,n===13){if(e=xd(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ji=e,null}function zd(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(ug()){case cu:return 1;case Td:return 4;case Vi:case sg:return 16;case Md:return 536870912;default:return 16}default:return 16}}var Tn=null,yu=null,ea=null;function Hd(){if(ea)return ea;var e,t=yu,n=t.length,r,o="value"in Tn?Tn.value:Tn.textContent,i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===o[i-r];r++);return ea=o.slice(e,1<r?1-r:void 0)}function ta(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function na(){return!0}function Ud(){return!1}function lt(e){function t(n,r,o,i,a){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=i,this.target=a,this.currentTarget=null;for(var l in e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(i):i[l]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?na:Ud,this.isPropagationStopped=Ud,this}return le(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=na)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=na)},persist:function(){},isPersistent:na}),t}var Fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},_u=lt(Fr),Uo=le({},Fr,{view:0,detail:0}),xg=lt(Uo),Cu,Eu,Wo,ra=le({},Uo,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:ku,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Wo&&(Wo&&e.type==="mousemove"?(Cu=e.screenX-Wo.screenX,Eu=e.screenY-Wo.screenY):Eu=Cu=0,Wo=e),Cu)},movementY:function(e){return"movementY"in e?e.movementY:Eu}}),Wd=lt(ra),kg=le({},ra,{dataTransfer:0}),wg=lt(kg),Sg=le({},Uo,{relatedTarget:0}),xu=lt(Sg),bg=le({},Fr,{animationName:0,elapsedTime:0,pseudoElement:0}),Ig=lt(bg),Tg=le({},Fr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Mg=lt(Tg),Pg=le({},Fr,{data:0}),Kd=lt(Pg),Dg={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ng={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Bg={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Rg(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Bg[e])?!!t[e]:!1}function ku(){return Rg}var Lg=le({},Uo,{key:function(e){if(e.key){var t=Dg[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=ta(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Ng[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:ku,charCode:function(e){return e.type==="keypress"?ta(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?ta(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Og=lt(Lg),Fg=le({},ra,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),jd=lt(Fg),Ag=le({},Uo,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:ku}),zg=lt(Ag),Hg=le({},Fr,{propertyName:0,elapsedTime:0,pseudoElement:0}),Ug=lt(Hg),Wg=le({},ra,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Kg=lt(Wg),jg=[9,13,27,32],wu=en&&"CompositionEvent"in window,Ko=null;en&&"documentMode"in document&&(Ko=document.documentMode);var Vg=en&&"TextEvent"in window&&!Ko,Vd=en&&(!wu||Ko&&8<Ko&&11>=Ko),$d=String.fromCharCode(32),Gd=!1;function Qd(e,t){switch(e){case"keyup":return jg.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Yd(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Ar=!1;function $g(e,t){switch(e){case"compositionend":return Yd(t);case"keypress":return t.which!==32?null:(Gd=!0,$d);case"textInput":return e=t.data,e===$d&&Gd?null:e;default:return null}}function Gg(e,t){if(Ar)return e==="compositionend"||!wu&&Qd(e,t)?(e=Hd(),ea=yu=Tn=null,Ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Vd&&t.locale!=="ko"?null:t.data;default:return null}}var Qg={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qd(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!Qg[e.type]:t==="textarea"}function Xd(e,t,n,r){gd(r),t=ua(t,"onChange"),0<t.length&&(n=new _u("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var jo=null,Vo=null;function Yg(e){mf(e,0)}function oa(e){var t=Kr(e);if(id(t))return e}function qg(e,t){if(e==="change")return t}var Zd=!1;if(en){var Su;if(en){var bu="oninput"in document;if(!bu){var Jd=document.createElement("div");Jd.setAttribute("oninput","return;"),bu=typeof Jd.oninput=="function"}Su=bu}else Su=!1;Zd=Su&&(!document.documentMode||9<document.documentMode)}function ef(){jo&&(jo.detachEvent("onpropertychange",tf),Vo=jo=null)}function tf(e){if(e.propertyName==="value"&&oa(Vo)){var t=[];Xd(t,Vo,e,iu(e)),Ed(Yg,t)}}function Xg(e,t,n){e==="focusin"?(ef(),jo=t,Vo=n,jo.attachEvent("onpropertychange",tf)):e==="focusout"&&ef()}function Zg(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return oa(Vo)}function Jg(e,t){if(e==="click")return oa(t)}function ey(e,t){if(e==="input"||e==="change")return oa(t)}function ty(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Nt=typeof Object.is=="function"?Object.is:ty;function $o(e,t){if(Nt(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!Fl.call(t,o)||!Nt(e[o],t[o]))return!1}return!0}function nf(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function rf(e,t){var n=nf(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=nf(n)}}function of(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?of(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function af(){for(var e=window,t=Ui();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Ui(e.document)}return t}function Iu(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function ny(e){var t=af(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&of(n.ownerDocument.documentElement,n)){if(r!==null&&Iu(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=r.end===void 0?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=rf(n,i);var a=rf(n,r);o&&a&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ry=en&&"documentMode"in document&&11>=document.documentMode,zr=null,Tu=null,Go=null,Mu=!1;function lf(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Mu||zr==null||zr!==Ui(r)||(r=zr,"selectionStart"in r&&Iu(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),Go&&$o(Go,r)||(Go=r,r=ua(Tu,"onSelect"),0<r.length&&(t=new _u("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=zr)))}function ia(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Hr={animationend:ia("Animation","AnimationEnd"),animationiteration:ia("Animation","AnimationIteration"),animationstart:ia("Animation","AnimationStart"),transitionend:ia("Transition","TransitionEnd")},Pu={},uf={};en&&(uf=document.createElement("div").style,"AnimationEvent"in window||(delete Hr.animationend.animation,delete Hr.animationiteration.animation,delete Hr.animationstart.animation),"TransitionEvent"in window||delete Hr.transitionend.transition);function aa(e){if(Pu[e])return Pu[e];if(!Hr[e])return e;var t=Hr[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in uf)return Pu[e]=t[n];return e}var sf=aa("animationend"),cf=aa("animationiteration"),df=aa("animationstart"),ff=aa("transitionend"),pf=new Map,vf="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Mn(e,t){pf.set(e,t),er(t,[e])}for(var Du=0;Du<vf.length;Du++){var Nu=vf[Du],oy=Nu.toLowerCase(),iy=Nu[0].toUpperCase()+Nu.slice(1);Mn(oy,"on"+iy)}Mn(sf,"onAnimationEnd"),Mn(cf,"onAnimationIteration"),Mn(df,"onAnimationStart"),Mn("dblclick","onDoubleClick"),Mn("focusin","onFocus"),Mn("focusout","onBlur"),Mn(ff,"onTransitionEnd"),Pr("onMouseEnter",["mouseout","mouseover"]),Pr("onMouseLeave",["mouseout","mouseover"]),Pr("onPointerEnter",["pointerout","pointerover"]),Pr("onPointerLeave",["pointerout","pointerover"]),er("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),er("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),er("onBeforeInput",["compositionend","keypress","textInput","paste"]),er("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),er("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),er("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Qo="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ay=new Set("cancel close invalid load scroll toggle".split(" ").concat(Qo));function hf(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,og(r,t,void 0,e),e.currentTarget=null}function mf(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;hf(o,l,s),i=u}else for(a=0;a<r.length;a++){if(l=r[a],u=l.instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;hf(o,l,s),i=u}}}if(ji)throw e=su,ji=!1,su=null,e}function ne(e,t){var n=t[Hu];n===void 0&&(n=t[Hu]=new Set);var r=e+"__bubble";n.has(r)||(gf(t,e,2,!1),n.add(r))}function Bu(e,t,n){var r=0;t&&(r|=4),gf(n,e,r,t)}var la="_reactListening"+Math.random().toString(36).slice(2);function Yo(e){if(!e[la]){e[la]=!0,Xc.forEach(function(n){n!=="selectionchange"&&(ay.has(n)||Bu(n,!1,e),Bu(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[la]||(t[la]=!0,Bu("selectionchange",!1,t))}}function gf(e,t,n,r){switch(zd(t)){case 1:var o=Cg;break;case 4:o=Eg;break;default:o=mu}n=o.bind(null,t,n,e),o=void 0,!uu||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),r?o!==void 0?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):o!==void 0?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ru(e,t,n,r,o){var i=r;if((t&1)===0&&(t&2)===0&&r!==null)e:for(;;){if(r===null)return;var a=r.tag;if(a===3||a===4){var l=r.stateNode.containerInfo;if(l===o||l.nodeType===8&&l.parentNode===o)break;if(a===4)for(a=r.return;a!==null;){var u=a.tag;if((u===3||u===4)&&(u=a.stateNode.containerInfo,u===o||u.nodeType===8&&u.parentNode===o))return;a=a.return}for(;l!==null;){if(a=nr(l),a===null)return;if(u=a.tag,u===5||u===6){r=i=a;continue e}l=l.parentNode}}r=r.return}Ed(function(){var s=i,d=iu(n),c=[];e:{var f=pf.get(e);if(f!==void 0){var h=_u,y=e;switch(e){case"keypress":if(ta(n)===0)break e;case"keydown":case"keyup":h=Og;break;case"focusin":y="focus",h=xu;break;case"focusout":y="blur",h=xu;break;case"beforeblur":case"afterblur":h=xu;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":h=Wd;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":h=wg;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":h=zg;break;case sf:case cf:case df:h=Ig;break;case ff:h=Ug;break;case"scroll":h=xg;break;case"wheel":h=Kg;break;case"copy":case"cut":case"paste":h=Mg;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":h=jd}var _=(t&4)!==0,E=!_&&e==="scroll",v=_?f!==null?f+"Capture":null:f;_=[];for(var p=s,m;p!==null;){m=p;var C=m.stateNode;if(m.tag===5&&C!==null&&(m=C,v!==null&&(C=Do(p,v),C!=null&&_.push(qo(p,C,m)))),E)break;p=p.return}0<_.length&&(f=new h(f,y,null,n,d),c.push({event:f,listeners:_}))}}if((t&7)===0){e:{if(f=e==="mouseover"||e==="pointerover",h=e==="mouseout"||e==="pointerout",f&&n!==ou&&(y=n.relatedTarget||n.fromElement)&&(nr(y)||y[nn]))break e;if((h||f)&&(f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window,h?(y=n.relatedTarget||n.toElement,h=s,y=y?nr(y):null,y!==null&&(E=tr(y),y!==E||y.tag!==5&&y.tag!==6)&&(y=null)):(h=null,y=s),h!==y)){if(_=Wd,C="onMouseLeave",v="onMouseEnter",p="mouse",(e==="pointerout"||e==="pointerover")&&(_=jd,C="onPointerLeave",v="onPointerEnter",p="pointer"),E=h==null?f:Kr(h),m=y==null?f:Kr(y),f=new _(C,p+"leave",h,n,d),f.target=E,f.relatedTarget=m,C=null,nr(d)===s&&(_=new _(v,p+"enter",y,n,d),_.target=m,_.relatedTarget=E,C=_),E=C,h&&y)t:{for(_=h,v=y,p=0,m=_;m;m=Ur(m))p++;for(m=0,C=v;C;C=Ur(C))m++;for(;0<p-m;)_=Ur(_),p--;for(;0<m-p;)v=Ur(v),m--;for(;p--;){if(_===v||v!==null&&_===v.alternate)break t;_=Ur(_),v=Ur(v)}_=null}else _=null;h!==null&&yf(c,f,h,_,!1),y!==null&&E!==null&&yf(c,E,y,_,!0)}}e:{if(f=s?Kr(s):window,h=f.nodeName&&f.nodeName.toLowerCase(),h==="select"||h==="input"&&f.type==="file")var w=qg;else if(qd(f))if(Zd)w=ey;else{w=Zg;var S=Xg}else(h=f.nodeName)&&h.toLowerCase()==="input"&&(f.type==="checkbox"||f.type==="radio")&&(w=Jg);if(w&&(w=w(e,s))){Xd(c,w,n,d);break e}S&&S(e,f,s),e==="focusout"&&(S=f._wrapperState)&&S.controlled&&f.type==="number"&&Jl(f,"number",f.value)}switch(S=s?Kr(s):window,e){case"focusin":(qd(S)||S.contentEditable==="true")&&(zr=S,Tu=s,Go=null);break;case"focusout":Go=Tu=zr=null;break;case"mousedown":Mu=!0;break;case"contextmenu":case"mouseup":case"dragend":Mu=!1,lf(c,n,d);break;case"selectionchange":if(ry)break;case"keydown":case"keyup":lf(c,n,d)}var x;if(wu)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Ar?Qd(e,n)&&(b="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(b="onCompositionStart");b&&(Vd&&n.locale!=="ko"&&(Ar||b!=="onCompositionStart"?b==="onCompositionEnd"&&Ar&&(x=Hd()):(Tn=d,yu="value"in Tn?Tn.value:Tn.textContent,Ar=!0)),S=ua(s,b),0<S.length&&(b=new Kd(b,e,null,n,d),c.push({event:b,listeners:S}),x?b.data=x:(x=Yd(n),x!==null&&(b.data=x)))),(x=Vg?$g(e,n):Gg(e,n))&&(s=ua(s,"onBeforeInput"),0<s.length&&(d=new Kd("onBeforeInput","beforeinput",null,n,d),c.push({event:d,listeners:s}),d.data=x))}mf(c,t)})}function qo(e,t,n){return{instance:e,listener:t,currentTarget:n}}function ua(e,t){for(var n=t+"Capture",r=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=Do(e,n),i!=null&&r.unshift(qo(e,i,o)),i=Do(e,t),i!=null&&r.push(qo(e,i,o))),e=e.return}return r}function Ur(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function yf(e,t,n,r,o){for(var i=t._reactName,a=[];n!==null&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(u!==null&&u===r)break;l.tag===5&&s!==null&&(l=s,o?(u=Do(n,i),u!=null&&a.unshift(qo(n,u,l))):o||(u=Do(n,i),u!=null&&a.push(qo(n,u,l)))),n=n.return}a.length!==0&&e.push({event:t,listeners:a})}var ly=/\r\n?/g,uy=/\u0000|\uFFFD/g;function _f(e){return(typeof e=="string"?e:""+e).replace(ly,`
`).replace(uy,"")}function sa(e,t,n){if(t=_f(t),_f(e)!==t&&n)throw Error(I(425))}function ca(){}var Lu=null,Ou=null;function Fu(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Au=typeof setTimeout=="function"?setTimeout:void 0,sy=typeof clearTimeout=="function"?clearTimeout:void 0,Cf=typeof Promise=="function"?Promise:void 0,cy=typeof queueMicrotask=="function"?queueMicrotask:typeof Cf<"u"?function(e){return Cf.resolve(null).then(e).catch(dy)}:Au;function dy(e){setTimeout(function(){throw e})}function zu(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){e.removeChild(o),Ho(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);Ho(t)}function Pn(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function Ef(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Wr=Math.random().toString(36).slice(2),Kt="__reactFiber$"+Wr,Xo="__reactProps$"+Wr,nn="__reactContainer$"+Wr,Hu="__reactEvents$"+Wr,fy="__reactListeners$"+Wr,py="__reactHandles$"+Wr;function nr(e){var t=e[Kt];if(t)return t;for(var n=e.parentNode;n;){if(t=n[nn]||n[Kt]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=Ef(e);e!==null;){if(n=e[Kt])return n;e=Ef(e)}return t}e=n,n=e.parentNode}return null}function Zo(e){return e=e[Kt]||e[nn],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Kr(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(I(33))}function da(e){return e[Xo]||null}var Uu=[],jr=-1;function Dn(e){return{current:e}}function re(e){0>jr||(e.current=Uu[jr],Uu[jr]=null,jr--)}function J(e,t){jr++,Uu[jr]=e.current,e.current=t}var Nn={},Pe=Dn(Nn),Ge=Dn(!1),rr=Nn;function Vr(e,t){var n=e.type.contextTypes;if(!n)return Nn;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in n)o[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Qe(e){return e=e.childContextTypes,e!=null}function fa(){re(Ge),re(Pe)}function xf(e,t,n){if(Pe.current!==Nn)throw Error(I(168));J(Pe,t),J(Ge,n)}function kf(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in t))throw Error(I(108,Xm(e)||"Unknown",o));return le({},n,r)}function pa(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Nn,rr=Pe.current,J(Pe,e),J(Ge,Ge.current),!0}function wf(e,t,n){var r=e.stateNode;if(!r)throw Error(I(169));n?(e=kf(e,t,rr),r.__reactInternalMemoizedMergedChildContext=e,re(Ge),re(Pe),J(Pe,e)):re(Ge),J(Ge,n)}var rn=null,va=!1,Wu=!1;function Sf(e){rn===null?rn=[e]:rn.push(e)}function vy(e){va=!0,Sf(e)}function Bn(){if(!Wu&&rn!==null){Wu=!0;var e=0,t=V;try{var n=rn;for(V=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}rn=null,va=!1}catch(o){throw rn!==null&&(rn=rn.slice(e+1)),bd(cu,Bn),o}finally{V=t,Wu=!1}}return null}var $r=[],Gr=0,ha=null,ma=0,Ct=[],Et=0,or=null,on=1,an="";function ir(e,t){$r[Gr++]=ma,$r[Gr++]=ha,ha=e,ma=t}function bf(e,t,n){Ct[Et++]=on,Ct[Et++]=an,Ct[Et++]=or,or=e;var r=on;e=an;var o=32-Dt(r)-1;r&=~(1<<o),n+=1;var i=32-Dt(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,on=1<<32-Dt(t)+o|n<<o|r,an=i+e}else on=1<<i|n<<o|r,an=e}function Ku(e){e.return!==null&&(ir(e,1),bf(e,1,0))}function ju(e){for(;e===ha;)ha=$r[--Gr],$r[Gr]=null,ma=$r[--Gr],$r[Gr]=null;for(;e===or;)or=Ct[--Et],Ct[Et]=null,an=Ct[--Et],Ct[Et]=null,on=Ct[--Et],Ct[Et]=null}var ut=null,st=null,oe=!1,Bt=null;function If(e,t){var n=St(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Tf(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,ut=e,st=Pn(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,ut=e,st=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=or!==null?{id:on,overflow:an}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=St(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,ut=e,st=null,!0):!1;default:return!1}}function Vu(e){return(e.mode&1)!==0&&(e.flags&128)===0}function $u(e){if(oe){var t=st;if(t){var n=t;if(!Tf(e,t)){if(Vu(e))throw Error(I(418));t=Pn(n.nextSibling);var r=ut;t&&Tf(e,t)?If(r,n):(e.flags=e.flags&-4097|2,oe=!1,ut=e)}}else{if(Vu(e))throw Error(I(418));e.flags=e.flags&-4097|2,oe=!1,ut=e}}}function Mf(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;ut=e}function ga(e){if(e!==ut)return!1;if(!oe)return Mf(e),oe=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!Fu(e.type,e.memoizedProps)),t&&(t=st)){if(Vu(e))throw Pf(),Error(I(418));for(;t;)If(e,t),t=Pn(t.nextSibling)}if(Mf(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(I(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){st=Pn(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}st=null}}else st=ut?Pn(e.stateNode.nextSibling):null;return!0}function Pf(){for(var e=st;e;)e=Pn(e.nextSibling)}function Qr(){st=ut=null,oe=!1}function Gu(e){Bt===null?Bt=[e]:Bt.push(e)}var hy=tn.ReactCurrentBatchConfig;function Rt(e,t){if(e&&e.defaultProps){t=le({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var ya=Dn(null),_a=null,Yr=null,Qu=null;function Yu(){Qu=Yr=_a=null}function qu(e){var t=ya.current;re(ya),e._currentValue=t}function Xu(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function qr(e,t){_a=e,Qu=Yr=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!==0&&(Ye=!0),e.firstContext=null)}function xt(e){var t=e._currentValue;if(Qu!==e)if(e={context:e,memoizedValue:t,next:null},Yr===null){if(_a===null)throw Error(I(308));Yr=e,_a.dependencies={lanes:0,firstContext:e}}else Yr=Yr.next=e;return t}var ar=null;function Zu(e){ar===null?ar=[e]:ar.push(e)}function Df(e,t,n,r){var o=t.interleaved;return o===null?(n.next=n,Zu(t)):(n.next=o.next,o.next=n),t.interleaved=n,ln(e,r)}function ln(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Rn=!1;function Ju(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Nf(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function un(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ln(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,(j&2)!==0){var o=r.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),r.pending=t,ln(e,n)}return o=r.interleaved,o===null?(t.next=t,Zu(r)):(t.next=o.next,o.next=t),r.interleaved=t,ln(e,n)}function Ca(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,pu(e,n)}}function Bf(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?o=i=a:i=i.next=a,n=n.next}while(n!==null);i===null?o=i=t:i=i.next=t}else o=i=t;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ea(e,t,n,r){var o=e.updateQueue;Rn=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(l!==null){o.shared.pending=null;var u=l,s=u.next;u.next=null,a===null?i=s:a.next=s,a=u;var d=e.alternate;d!==null&&(d=d.updateQueue,l=d.lastBaseUpdate,l!==a&&(l===null?d.firstBaseUpdate=s:l.next=s,d.lastBaseUpdate=u))}if(i!==null){var c=o.baseState;a=0,d=s=u=null,l=i;do{var f=l.lane,h=l.eventTime;if((r&f)===f){d!==null&&(d=d.next={eventTime:h,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var y=e,_=l;switch(f=t,h=n,_.tag){case 1:if(y=_.payload,typeof y=="function"){c=y.call(h,c,f);break e}c=y;break e;case 3:y.flags=y.flags&-65537|128;case 0:if(y=_.payload,f=typeof y=="function"?y.call(h,c,f):y,f==null)break e;c=le({},c,f);break e;case 2:Rn=!0}}l.callback!==null&&l.lane!==0&&(e.flags|=64,f=o.effects,f===null?o.effects=[l]:f.push(l))}else h={eventTime:h,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},d===null?(s=d=h,u=c):d=d.next=h,a|=f;if(l=l.next,l===null){if(l=o.shared.pending,l===null)break;f=l,l=f.next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}while(1);if(d===null&&(u=c),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=d,t=o.shared.interleaved,t!==null){o=t;do a|=o.lane,o=o.next;while(o!==t)}else i===null&&(o.shared.lanes=0);sr|=a,e.lanes=a,e.memoizedState=c}}function Rf(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(I(191,o));o.call(r)}}}var Lf=new qc.Component().refs;function es(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:le({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var xa={isMounted:function(e){return(e=e._reactInternals)?tr(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ze(),o=zn(e),i=un(r,o);i.payload=t,n!=null&&(i.callback=n),t=Ln(e,i,o),t!==null&&(Ft(t,e,o,r),Ca(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ze(),o=zn(e),i=un(r,o);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=Ln(e,i,o),t!==null&&(Ft(t,e,o,r),Ca(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ze(),r=zn(e),o=un(n,r);o.tag=2,t!=null&&(o.callback=t),t=Ln(e,o,r),t!==null&&(Ft(t,e,r,n),Ca(t,e,r))}};function Of(e,t,n,r,o,i,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,i,a):t.prototype&&t.prototype.isPureReactComponent?!$o(n,r)||!$o(o,i):!0}function Ff(e,t,n){var r=!1,o=Nn,i=t.contextType;return typeof i=="object"&&i!==null?i=xt(i):(o=Qe(t)?rr:Pe.current,r=t.contextTypes,i=(r=r!=null)?Vr(e,o):Nn),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=xa,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Af(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&xa.enqueueReplaceState(t,t.state,null)}function ts(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Lf,Ju(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=xt(i):(i=Qe(t)?rr:Pe.current,o.context=Vr(e,i)),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(es(e,t,i,n),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&xa.enqueueReplaceState(o,o.state,null),Ea(e,n,o,r),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function Jo(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(I(309));var r=n.stateNode}if(!r)throw Error(I(147,e));var o=r,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(a){var l=o.refs;l===Lf&&(l=o.refs={}),a===null?delete l[i]:l[i]=a},t._stringRef=i,t)}if(typeof e!="string")throw Error(I(284));if(!n._owner)throw Error(I(290,e))}return e}function ka(e,t){throw e=Object.prototype.toString.call(t),Error(I(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function zf(e){var t=e._init;return t(e._payload)}function Hf(e){function t(v,p){if(e){var m=v.deletions;m===null?(v.deletions=[p],v.flags|=16):m.push(p)}}function n(v,p){if(!e)return null;for(;p!==null;)t(v,p),p=p.sibling;return null}function r(v,p){for(v=new Map;p!==null;)p.key!==null?v.set(p.key,p):v.set(p.index,p),p=p.sibling;return v}function o(v,p){return v=Un(v,p),v.index=0,v.sibling=null,v}function i(v,p,m){return v.index=m,e?(m=v.alternate,m!==null?(m=m.index,m<p?(v.flags|=2,p):m):(v.flags|=2,p)):(v.flags|=1048576,p)}function a(v){return e&&v.alternate===null&&(v.flags|=2),v}function l(v,p,m,C){return p===null||p.tag!==6?(p=As(m,v.mode,C),p.return=v,p):(p=o(p,m),p.return=v,p)}function u(v,p,m,C){var w=m.type;return w===Nr?d(v,p,m.props.children,C,m.key):p!==null&&(p.elementType===w||typeof w=="object"&&w!==null&&w.$$typeof===xn&&zf(w)===p.type)?(C=o(p,m.props),C.ref=Jo(v,p,m),C.return=v,C):(C=Wa(m.type,m.key,m.props,null,v.mode,C),C.ref=Jo(v,p,m),C.return=v,C)}function s(v,p,m,C){return p===null||p.tag!==4||p.stateNode.containerInfo!==m.containerInfo||p.stateNode.implementation!==m.implementation?(p=zs(m,v.mode,C),p.return=v,p):(p=o(p,m.children||[]),p.return=v,p)}function d(v,p,m,C,w){return p===null||p.tag!==7?(p=pr(m,v.mode,C,w),p.return=v,p):(p=o(p,m),p.return=v,p)}function c(v,p,m){if(typeof p=="string"&&p!==""||typeof p=="number")return p=As(""+p,v.mode,m),p.return=v,p;if(typeof p=="object"&&p!==null){switch(p.$$typeof){case zi:return m=Wa(p.type,p.key,p.props,null,v.mode,m),m.ref=Jo(v,null,p),m.return=v,m;case Dr:return p=zs(p,v.mode,m),p.return=v,p;case xn:var C=p._init;return c(v,C(p._payload),m)}if(To(p)||bo(p))return p=pr(p,v.mode,m,null),p.return=v,p;ka(v,p)}return null}function f(v,p,m,C){var w=p!==null?p.key:null;if(typeof m=="string"&&m!==""||typeof m=="number")return w!==null?null:l(v,p,""+m,C);if(typeof m=="object"&&m!==null){switch(m.$$typeof){case zi:return m.key===w?u(v,p,m,C):null;case Dr:return m.key===w?s(v,p,m,C):null;case xn:return w=m._init,f(v,p,w(m._payload),C)}if(To(m)||bo(m))return w!==null?null:d(v,p,m,C,null);ka(v,m)}return null}function h(v,p,m,C,w){if(typeof C=="string"&&C!==""||typeof C=="number")return v=v.get(m)||null,l(p,v,""+C,w);if(typeof C=="object"&&C!==null){switch(C.$$typeof){case zi:return v=v.get(C.key===null?m:C.key)||null,u(p,v,C,w);case Dr:return v=v.get(C.key===null?m:C.key)||null,s(p,v,C,w);case xn:var S=C._init;return h(v,p,m,S(C._payload),w)}if(To(C)||bo(C))return v=v.get(m)||null,d(p,v,C,w,null);ka(p,C)}return null}function y(v,p,m,C){for(var w=null,S=null,x=p,b=p=0,T=null;x!==null&&b<m.length;b++){x.index>b?(T=x,x=null):T=x.sibling;var P=f(v,x,m[b],C);if(P===null){x===null&&(x=T);break}e&&x&&P.alternate===null&&t(v,x),p=i(P,p,b),S===null?w=P:S.sibling=P,S=P,x=T}if(b===m.length)return n(v,x),oe&&ir(v,b),w;if(x===null){for(;b<m.length;b++)x=c(v,m[b],C),x!==null&&(p=i(x,p,b),S===null?w=x:S.sibling=x,S=x);return oe&&ir(v,b),w}for(x=r(v,x);b<m.length;b++)T=h(x,v,b,m[b],C),T!==null&&(e&&T.alternate!==null&&x.delete(T.key===null?b:T.key),p=i(T,p,b),S===null?w=T:S.sibling=T,S=T);return e&&x.forEach(function(W){return t(v,W)}),oe&&ir(v,b),w}function _(v,p,m,C){var w=bo(m);if(typeof w!="function")throw Error(I(150));if(m=w.call(m),m==null)throw Error(I(151));for(var S=w=null,x=p,b=p=0,T=null,P=m.next();x!==null&&!P.done;b++,P=m.next()){x.index>b?(T=x,x=null):T=x.sibling;var W=f(v,x,P.value,C);if(W===null){x===null&&(x=T);break}e&&x&&W.alternate===null&&t(v,x),p=i(W,p,b),S===null?w=W:S.sibling=W,S=W,x=T}if(P.done)return n(v,x),oe&&ir(v,b),w;if(x===null){for(;!P.done;b++,P=m.next())P=c(v,P.value,C),P!==null&&(p=i(P,p,b),S===null?w=P:S.sibling=P,S=P);return oe&&ir(v,b),w}for(x=r(v,x);!P.done;b++,P=m.next())P=h(x,v,b,P.value,C),P!==null&&(e&&P.alternate!==null&&x.delete(P.key===null?b:P.key),p=i(P,p,b),S===null?w=P:S.sibling=P,S=P);return e&&x.forEach(function(H){return t(v,H)}),oe&&ir(v,b),w}function E(v,p,m,C){if(typeof m=="object"&&m!==null&&m.type===Nr&&m.key===null&&(m=m.props.children),typeof m=="object"&&m!==null){switch(m.$$typeof){case zi:e:{for(var w=m.key,S=p;S!==null;){if(S.key===w){if(w=m.type,w===Nr){if(S.tag===7){n(v,S.sibling),p=o(S,m.props.children),p.return=v,v=p;break e}}else if(S.elementType===w||typeof w=="object"&&w!==null&&w.$$typeof===xn&&zf(w)===S.type){n(v,S.sibling),p=o(S,m.props),p.ref=Jo(v,S,m),p.return=v,v=p;break e}n(v,S);break}else t(v,S);S=S.sibling}m.type===Nr?(p=pr(m.props.children,v.mode,C,m.key),p.return=v,v=p):(C=Wa(m.type,m.key,m.props,null,v.mode,C),C.ref=Jo(v,p,m),C.return=v,v=C)}return a(v);case Dr:e:{for(S=m.key;p!==null;){if(p.key===S)if(p.tag===4&&p.stateNode.containerInfo===m.containerInfo&&p.stateNode.implementation===m.implementation){n(v,p.sibling),p=o(p,m.children||[]),p.return=v,v=p;break e}else{n(v,p);break}else t(v,p);p=p.sibling}p=zs(m,v.mode,C),p.return=v,v=p}return a(v);case xn:return S=m._init,E(v,p,S(m._payload),C)}if(To(m))return y(v,p,m,C);if(bo(m))return _(v,p,m,C);ka(v,m)}return typeof m=="string"&&m!==""||typeof m=="number"?(m=""+m,p!==null&&p.tag===6?(n(v,p.sibling),p=o(p,m),p.return=v,v=p):(n(v,p),p=As(m,v.mode,C),p.return=v,v=p),a(v)):n(v,p)}return E}var Xr=Hf(!0),Uf=Hf(!1),ei={},jt=Dn(ei),ti=Dn(ei),ni=Dn(ei);function lr(e){if(e===ei)throw Error(I(174));return e}function ns(e,t){switch(J(ni,t),J(ti,e),J(jt,ei),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tu(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=tu(t,e)}re(jt),J(jt,t)}function Zr(){re(jt),re(ti),re(ni)}function Wf(e){lr(ni.current);var t=lr(jt.current),n=tu(t,e.type);t!==n&&(J(ti,e),J(jt,n))}function rs(e){ti.current===e&&(re(jt),re(ti))}var ue=Dn(0);function wa(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var os=[];function is(){for(var e=0;e<os.length;e++)os[e]._workInProgressVersionPrimary=null;os.length=0}var Sa=tn.ReactCurrentDispatcher,as=tn.ReactCurrentBatchConfig,ur=0,se=null,_e=null,Ee=null,ba=!1,ri=!1,oi=0,my=0;function De(){throw Error(I(321))}function ls(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Nt(e[n],t[n]))return!1;return!0}function us(e,t,n,r,o,i){if(ur=i,se=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Sa.current=e===null||e.memoizedState===null?Cy:Ey,e=n(r,o),ri){i=0;do{if(ri=!1,oi=0,25<=i)throw Error(I(301));i+=1,Ee=_e=null,t.updateQueue=null,Sa.current=xy,e=n(r,o)}while(ri)}if(Sa.current=Ma,t=_e!==null&&_e.next!==null,ur=0,Ee=_e=se=null,ba=!1,t)throw Error(I(300));return e}function ss(){var e=oi!==0;return oi=0,e}function Vt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Ee===null?se.memoizedState=Ee=e:Ee=Ee.next=e,Ee}function kt(){if(_e===null){var e=se.alternate;e=e!==null?e.memoizedState:null}else e=_e.next;var t=Ee===null?se.memoizedState:Ee.next;if(t!==null)Ee=t,_e=e;else{if(e===null)throw Error(I(310));_e=e,e={memoizedState:_e.memoizedState,baseState:_e.baseState,baseQueue:_e.baseQueue,queue:_e.queue,next:null},Ee===null?se.memoizedState=Ee=e:Ee=Ee.next=e}return Ee}function ii(e,t){return typeof t=="function"?t(e):t}function cs(e){var t=kt(),n=t.queue;if(n===null)throw Error(I(311));n.lastRenderedReducer=e;var r=_e,o=r.baseQueue,i=n.pending;if(i!==null){if(o!==null){var a=o.next;o.next=i.next,i.next=a}r.baseQueue=o=i,n.pending=null}if(o!==null){i=o.next,r=r.baseState;var l=a=null,u=null,s=i;do{var d=s.lane;if((ur&d)===d)u!==null&&(u=u.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var c={lane:d,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};u===null?(l=u=c,a=r):u=u.next=c,se.lanes|=d,sr|=d}s=s.next}while(s!==null&&s!==i);u===null?a=r:u.next=l,Nt(r,t.memoizedState)||(Ye=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}if(e=n.interleaved,e!==null){o=e;do i=o.lane,se.lanes|=i,sr|=i,o=o.next;while(o!==e)}else o===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ds(e){var t=kt(),n=t.queue;if(n===null)throw Error(I(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(o!==null){n.pending=null;var a=o=o.next;do i=e(i,a.action),a=a.next;while(a!==o);Nt(i,t.memoizedState)||(Ye=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Kf(){}function jf(e,t){var n=se,r=kt(),o=t(),i=!Nt(r.memoizedState,o);if(i&&(r.memoizedState=o,Ye=!0),r=r.queue,fs(Gf.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||Ee!==null&&Ee.memoizedState.tag&1){if(n.flags|=2048,ai(9,$f.bind(null,n,r,o,t),void 0,null),xe===null)throw Error(I(349));(ur&30)!==0||Vf(n,t,o)}return o}function Vf(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=se.updateQueue,t===null?(t={lastEffect:null,stores:null},se.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function $f(e,t,n,r){t.value=n,t.getSnapshot=r,Qf(t)&&Yf(e)}function Gf(e,t,n){return n(function(){Qf(t)&&Yf(e)})}function Qf(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Nt(e,n)}catch{return!0}}function Yf(e){var t=ln(e,1);t!==null&&Ft(t,e,1,-1)}function qf(e){var t=Vt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e},t.queue=e,e=e.dispatch=_y.bind(null,se,e),[t.memoizedState,e]}function ai(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=se.updateQueue,t===null?(t={lastEffect:null,stores:null},se.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Xf(){return kt().memoizedState}function Ia(e,t,n,r){var o=Vt();se.flags|=e,o.memoizedState=ai(1|t,n,void 0,r===void 0?null:r)}function Ta(e,t,n,r){var o=kt();r=r===void 0?null:r;var i=void 0;if(_e!==null){var a=_e.memoizedState;if(i=a.destroy,r!==null&&ls(r,a.deps)){o.memoizedState=ai(t,n,i,r);return}}se.flags|=e,o.memoizedState=ai(1|t,n,i,r)}function Zf(e,t){return Ia(8390656,8,e,t)}function fs(e,t){return Ta(2048,8,e,t)}function Jf(e,t){return Ta(4,2,e,t)}function ep(e,t){return Ta(4,4,e,t)}function tp(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function np(e,t,n){return n=n!=null?n.concat([e]):null,Ta(4,4,tp.bind(null,t,e),n)}function ps(){}function rp(e,t){var n=kt();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&ls(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function op(e,t){var n=kt();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&ls(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ip(e,t,n){return(ur&21)===0?(e.baseState&&(e.baseState=!1,Ye=!0),e.memoizedState=n):(Nt(n,t)||(n=Pd(),se.lanes|=n,sr|=n,e.baseState=!0),t)}function gy(e,t){var n=V;V=n!==0&&4>n?n:4,e(!0);var r=as.transition;as.transition={};try{e(!1),t()}finally{V=n,as.transition=r}}function ap(){return kt().memoizedState}function yy(e,t,n){var r=zn(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},lp(e))up(t,n);else if(n=Df(e,t,n,r),n!==null){var o=ze();Ft(n,e,r,o),sp(n,t,r)}}function _y(e,t,n){var r=zn(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(lp(e))up(t,o);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,Nt(l,a)){var u=t.interleaved;u===null?(o.next=o,Zu(t)):(o.next=u.next,u.next=o),t.interleaved=o;return}}catch{}finally{}n=Df(e,t,o,r),n!==null&&(o=ze(),Ft(n,e,r,o),sp(n,t,r))}}function lp(e){var t=e.alternate;return e===se||t!==null&&t===se}function up(e,t){ri=ba=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function sp(e,t,n){if((n&4194240)!==0){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,pu(e,n)}}var Ma={readContext:xt,useCallback:De,useContext:De,useEffect:De,useImperativeHandle:De,useInsertionEffect:De,useLayoutEffect:De,useMemo:De,useReducer:De,useRef:De,useState:De,useDebugValue:De,useDeferredValue:De,useTransition:De,useMutableSource:De,useSyncExternalStore:De,useId:De,unstable_isNewReconciler:!1},Cy={readContext:xt,useCallback:function(e,t){return Vt().memoizedState=[e,t===void 0?null:t],e},useContext:xt,useEffect:Zf,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Ia(4194308,4,tp.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ia(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ia(4,2,e,t)},useMemo:function(e,t){var n=Vt();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Vt();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=yy.bind(null,se,e),[r.memoizedState,e]},useRef:function(e){var t=Vt();return e={current:e},t.memoizedState=e},useState:qf,useDebugValue:ps,useDeferredValue:function(e){return Vt().memoizedState=e},useTransition:function(){var e=qf(!1),t=e[0];return e=gy.bind(null,e[1]),Vt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=se,o=Vt();if(oe){if(n===void 0)throw Error(I(407));n=n()}else{if(n=t(),xe===null)throw Error(I(349));(ur&30)!==0||Vf(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Zf(Gf.bind(null,r,i,e),[e]),r.flags|=2048,ai(9,$f.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Vt(),t=xe.identifierPrefix;if(oe){var n=an,r=on;n=(r&~(1<<32-Dt(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=oi++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=my++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Ey={readContext:xt,useCallback:rp,useContext:xt,useEffect:fs,useImperativeHandle:np,useInsertionEffect:Jf,useLayoutEffect:ep,useMemo:op,useReducer:cs,useRef:Xf,useState:function(){return cs(ii)},useDebugValue:ps,useDeferredValue:function(e){var t=kt();return ip(t,_e.memoizedState,e)},useTransition:function(){var e=cs(ii)[0],t=kt().memoizedState;return[e,t]},useMutableSource:Kf,useSyncExternalStore:jf,useId:ap,unstable_isNewReconciler:!1},xy={readContext:xt,useCallback:rp,useContext:xt,useEffect:fs,useImperativeHandle:np,useInsertionEffect:Jf,useLayoutEffect:ep,useMemo:op,useReducer:ds,useRef:Xf,useState:function(){return ds(ii)},useDebugValue:ps,useDeferredValue:function(e){var t=kt();return _e===null?t.memoizedState=e:ip(t,_e.memoizedState,e)},useTransition:function(){var e=ds(ii)[0],t=kt().memoizedState;return[e,t]},useMutableSource:Kf,useSyncExternalStore:jf,useId:ap,unstable_isNewReconciler:!1};function Jr(e,t){try{var n="",r=t;do n+=qm(r),r=r.return;while(r);var o=n}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o,digest:null}}function vs(e,t,n){return{value:e,source:null,stack:n!=null?n:null,digest:t!=null?t:null}}function hs(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var ky=typeof WeakMap=="function"?WeakMap:Map;function cp(e,t,n){n=un(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Oa||(Oa=!0,Ps=r),hs(e,t)},n}function dp(e,t,n){n=un(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){hs(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){hs(e,t),typeof r!="function"&&(Fn===null?Fn=new Set([this]):Fn.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),n}function fp(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new ky;var o=new Set;r.set(t,o)}else o=r.get(t),o===void 0&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Fy.bind(null,e,t,n),t.then(e,e))}function pp(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function vp(e,t,n,r,o){return(e.mode&1)===0?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=un(-1,1),t.tag=2,Ln(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var wy=tn.ReactCurrentOwner,Ye=!1;function Ae(e,t,n,r){t.child=e===null?Uf(t,null,n,r):Xr(t,e.child,n,r)}function hp(e,t,n,r,o){n=n.render;var i=t.ref;return qr(t,o),r=us(e,t,n,r,i,o),n=ss(),e!==null&&!Ye?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,sn(e,t,o)):(oe&&n&&Ku(t),t.flags|=1,Ae(e,t,r,o),t.child)}function mp(e,t,n,r,o){if(e===null){var i=n.type;return typeof i=="function"&&!Fs(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,gp(e,t,i,r,o)):(e=Wa(n.type,null,r,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,(e.lanes&o)===0){var a=i.memoizedProps;if(n=n.compare,n=n!==null?n:$o,n(a,r)&&e.ref===t.ref)return sn(e,t,o)}return t.flags|=1,e=Un(i,r),e.ref=t.ref,e.return=t,t.child=e}function gp(e,t,n,r,o){if(e!==null){var i=e.memoizedProps;if($o(i,r)&&e.ref===t.ref)if(Ye=!1,t.pendingProps=r=i,(e.lanes&o)!==0)(e.flags&131072)!==0&&(Ye=!0);else return t.lanes=e.lanes,sn(e,t,o)}return ms(e,t,n,r,o)}function yp(e,t,n){var r=t.pendingProps,o=r.children,i=e!==null?e.memoizedState:null;if(r.mode==="hidden")if((t.mode&1)===0)t.memoizedState={baseLanes:0,cachePool:null,transitions:null},J(to,ct),ct|=n;else{if((n&1073741824)===0)return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,J(to,ct),ct|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,J(to,ct),ct|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,J(to,ct),ct|=r;return Ae(e,t,o,n),t.child}function _p(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ms(e,t,n,r,o){var i=Qe(n)?rr:Pe.current;return i=Vr(t,i),qr(t,o),n=us(e,t,n,r,i,o),r=ss(),e!==null&&!Ye?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,sn(e,t,o)):(oe&&r&&Ku(t),t.flags|=1,Ae(e,t,n,o),t.child)}function Cp(e,t,n,r,o){if(Qe(n)){var i=!0;pa(t)}else i=!1;if(qr(t,o),t.stateNode===null)Da(e,t),Ff(t,n,r),ts(t,n,r,o),r=!0;else if(e===null){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;typeof s=="object"&&s!==null?s=xt(s):(s=Qe(n)?rr:Pe.current,s=Vr(t,s));var d=n.getDerivedStateFromProps,c=typeof d=="function"||typeof a.getSnapshotBeforeUpdate=="function";c||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(l!==r||u!==s)&&Af(t,a,r,s),Rn=!1;var f=t.memoizedState;a.state=f,Ea(t,r,a,o),u=t.memoizedState,l!==r||f!==u||Ge.current||Rn?(typeof d=="function"&&(es(t,n,d,r),u=t.memoizedState),(l=Rn||Of(t,n,l,r,f,u,s))?(c||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Nf(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Rt(t.type,l),a.props=s,c=t.pendingProps,f=a.context,u=n.contextType,typeof u=="object"&&u!==null?u=xt(u):(u=Qe(n)?rr:Pe.current,u=Vr(t,u));var h=n.getDerivedStateFromProps;(d=typeof h=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(l!==c||f!==u)&&Af(t,a,r,u),Rn=!1,f=t.memoizedState,a.state=f,Ea(t,r,a,o);var y=t.memoizedState;l!==c||f!==y||Ge.current||Rn?(typeof h=="function"&&(es(t,n,h,r),y=t.memoizedState),(s=Rn||Of(t,n,s,r,f,y,u)||!1)?(d||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(r,y,u),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(r,y,u)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=y),a.props=r,a.state=y,a.context=u,r=s):(typeof a.componentDidUpdate!="function"||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return gs(e,t,n,r,i,o)}function gs(e,t,n,r,o,i){_p(e,t);var a=(t.flags&128)!==0;if(!r&&!a)return o&&wf(t,n,!1),sn(e,t,i);r=t.stateNode,wy.current=t;var l=a&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&a?(t.child=Xr(t,e.child,null,i),t.child=Xr(t,null,l,i)):Ae(e,t,l,i),t.memoizedState=r.state,o&&wf(t,n,!0),t.child}function Ep(e){var t=e.stateNode;t.pendingContext?xf(e,t.pendingContext,t.pendingContext!==t.context):t.context&&xf(e,t.context,!1),ns(e,t.containerInfo)}function xp(e,t,n,r,o){return Qr(),Gu(o),t.flags|=256,Ae(e,t,n,r),t.child}var ys={dehydrated:null,treeContext:null,retryLane:0};function _s(e){return{baseLanes:e,cachePool:null,transitions:null}}function kp(e,t,n){var r=t.pendingProps,o=ue.current,i=!1,a=(t.flags&128)!==0,l;if((l=a)||(l=e!==null&&e.memoizedState===null?!1:(o&2)!==0),l?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),J(ue,o&1),e===null)return $u(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?((t.mode&1)===0?t.lanes=1:e.data==="$!"?t.lanes=8:t.lanes=1073741824,null):(a=r.children,e=r.fallback,i?(r=t.mode,i=t.child,a={mode:"hidden",children:a},(r&1)===0&&i!==null?(i.childLanes=0,i.pendingProps=a):i=Ka(a,r,0,null),e=pr(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=_s(n),t.memoizedState=ys,e):Cs(t,a));if(o=e.memoizedState,o!==null&&(l=o.dehydrated,l!==null))return Sy(e,t,a,r,l,o,n);if(i){i=r.fallback,a=t.mode,o=e.child,l=o.sibling;var u={mode:"hidden",children:r.children};return(a&1)===0&&t.child!==o?(r=t.child,r.childLanes=0,r.pendingProps=u,t.deletions=null):(r=Un(o,u),r.subtreeFlags=o.subtreeFlags&14680064),l!==null?i=Un(l,i):(i=pr(i,a,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,a=e.child.memoizedState,a=a===null?_s(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},i.memoizedState=a,i.childLanes=e.childLanes&~n,t.memoizedState=ys,r}return i=e.child,e=i.sibling,r=Un(i,{mode:"visible",children:r.children}),(t.mode&1)===0&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Cs(e,t){return t=Ka({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Pa(e,t,n,r){return r!==null&&Gu(r),Xr(t,e.child,null,n),e=Cs(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Sy(e,t,n,r,o,i,a){if(n)return t.flags&256?(t.flags&=-257,r=vs(Error(I(422))),Pa(e,t,a,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Ka({mode:"visible",children:r.children},o,0,null),i=pr(i,o,a,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,(t.mode&1)!==0&&Xr(t,e.child,null,a),t.child.memoizedState=_s(a),t.memoizedState=ys,i);if((t.mode&1)===0)return Pa(e,t,a,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var l=r.dgst;return r=l,i=Error(I(419)),r=vs(i,r,void 0),Pa(e,t,a,r)}if(l=(a&e.childLanes)!==0,Ye||l){if(r=xe,r!==null){switch(a&-a){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=(o&(r.suspendedLanes|a))!==0?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,ln(e,o),Ft(r,e,o,-1))}return Os(),r=vs(Error(I(421))),Pa(e,t,a,r)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=Ay.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,st=Pn(o.nextSibling),ut=t,oe=!0,Bt=null,e!==null&&(Ct[Et++]=on,Ct[Et++]=an,Ct[Et++]=or,on=e.id,an=e.overflow,or=t),t=Cs(t,r.children),t.flags|=4096,t)}function wp(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),Xu(e.return,t,n)}function Es(e,t,n,r,o){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Sp(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ae(e,t,r.children,n),r=ue.current,(r&2)!==0)r=r&1|2,t.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&wp(e,n,t);else if(e.tag===19)wp(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(J(ue,r),(t.mode&1)===0)t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;n!==null;)e=n.alternate,e!==null&&wa(e)===null&&(o=n),n=n.sibling;n=o,n===null?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Es(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&wa(e)===null){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Es(t,!0,n,null,i);break;case"together":Es(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Da(e,t){(t.mode&1)===0&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function sn(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),sr|=t.lanes,(n&t.childLanes)===0)return null;if(e!==null&&t.child!==e.child)throw Error(I(153));if(t.child!==null){for(e=t.child,n=Un(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Un(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function by(e,t,n){switch(t.tag){case 3:Ep(t),Qr();break;case 5:Wf(t);break;case 1:Qe(t.type)&&pa(t);break;case 4:ns(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;J(ya,r._currentValue),r._currentValue=o;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(J(ue,ue.current&1),t.flags|=128,null):(n&t.child.childLanes)!==0?kp(e,t,n):(J(ue,ue.current&1),e=sn(e,t,n),e!==null?e.sibling:null);J(ue,ue.current&1);break;case 19:if(r=(n&t.childLanes)!==0,(e.flags&128)!==0){if(r)return Sp(e,t,n);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),J(ue,ue.current),r)break;return null;case 22:case 23:return t.lanes=0,yp(e,t,n)}return sn(e,t,n)}var bp,xs,Ip,Tp;bp=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},xs=function(){},Ip=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,lr(jt.current);var i=null;switch(n){case"input":o=Xl(e,o),r=Xl(e,r),i=[];break;case"select":o=le({},o,{value:void 0}),r=le({},r,{value:void 0}),i=[];break;case"textarea":o=eu(e,o),r=eu(e,r),i=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=ca)}nu(n,r);var a;n=null;for(s in o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&o[s]!=null)if(s==="style"){var l=o[s];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else s!=="dangerouslySetInnerHTML"&&s!=="children"&&s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(So.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var u=r[s];if(l=o!=null?o[s]:void 0,r.hasOwnProperty(s)&&u!==l&&(u!=null||l!=null))if(s==="style")if(l){for(a in l)!l.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&l[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(s,n)),n=u;else s==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,l=l?l.__html:void 0,u!=null&&l!==u&&(i=i||[]).push(s,u)):s==="children"?typeof u!="string"&&typeof u!="number"||(i=i||[]).push(s,""+u):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&(So.hasOwnProperty(s)?(u!=null&&s==="onScroll"&&ne("scroll",e),i||l===u||(i=[])):(i=i||[]).push(s,u))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Tp=function(e,t,n,r){n!==r&&(t.flags|=4)};function li(e,t){if(!oe)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ne(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Iy(e,t,n){var r=t.pendingProps;switch(ju(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ne(t),null;case 1:return Qe(t.type)&&fa(),Ne(t),null;case 3:return r=t.stateNode,Zr(),re(Ge),re(Pe),is(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(ga(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,Bt!==null&&(Bs(Bt),Bt=null))),xs(e,t),Ne(t),null;case 5:rs(t);var o=lr(ni.current);if(n=t.type,e!==null&&t.stateNode!=null)Ip(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(I(166));return Ne(t),null}if(e=lr(jt.current),ga(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[Kt]=t,r[Xo]=i,e=(t.mode&1)!==0,n){case"dialog":ne("cancel",r),ne("close",r);break;case"iframe":case"object":case"embed":ne("load",r);break;case"video":case"audio":for(o=0;o<Qo.length;o++)ne(Qo[o],r);break;case"source":ne("error",r);break;case"img":case"image":case"link":ne("error",r),ne("load",r);break;case"details":ne("toggle",r);break;case"input":ad(r,i),ne("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},ne("invalid",r);break;case"textarea":sd(r,i),ne("invalid",r)}nu(n,i),o=null;for(var a in i)if(i.hasOwnProperty(a)){var l=i[a];a==="children"?typeof l=="string"?r.textContent!==l&&(i.suppressHydrationWarning!==!0&&sa(r.textContent,l,e),o=["children",l]):typeof l=="number"&&r.textContent!==""+l&&(i.suppressHydrationWarning!==!0&&sa(r.textContent,l,e),o=["children",""+l]):So.hasOwnProperty(a)&&l!=null&&a==="onScroll"&&ne("scroll",r)}switch(n){case"input":Hi(r),ud(r,i,!0);break;case"textarea":Hi(r),dd(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=ca)}r=o,t.updateQueue=r,r!==null&&(t.flags|=4)}else{a=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=fd(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=a.createElement(n,{is:r.is}):(e=a.createElement(n),n==="select"&&(a=e,r.multiple?a.multiple=!0:r.size&&(a.size=r.size))):e=a.createElementNS(e,n),e[Kt]=t,e[Xo]=r,bp(e,t,!1,!1),t.stateNode=e;e:{switch(a=ru(n,r),n){case"dialog":ne("cancel",e),ne("close",e),o=r;break;case"iframe":case"object":case"embed":ne("load",e),o=r;break;case"video":case"audio":for(o=0;o<Qo.length;o++)ne(Qo[o],e);o=r;break;case"source":ne("error",e),o=r;break;case"img":case"image":case"link":ne("error",e),ne("load",e),o=r;break;case"details":ne("toggle",e),o=r;break;case"input":ad(e,r),o=Xl(e,r),ne("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=le({},r,{value:void 0}),ne("invalid",e);break;case"textarea":sd(e,r),o=eu(e,r),ne("invalid",e);break;default:o=r}nu(n,o),l=o;for(i in l)if(l.hasOwnProperty(i)){var u=l[i];i==="style"?hd(e,u):i==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,u!=null&&pd(e,u)):i==="children"?typeof u=="string"?(n!=="textarea"||u!=="")&&Mo(e,u):typeof u=="number"&&Mo(e,""+u):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(So.hasOwnProperty(i)?u!=null&&i==="onScroll"&&ne("scroll",e):u!=null&&Hl(e,i,u,a))}switch(n){case"input":Hi(e),ud(e,r,!1);break;case"textarea":Hi(e),dd(e);break;case"option":r.value!=null&&e.setAttribute("value",""+kn(r.value));break;case"select":e.multiple=!!r.multiple,i=r.value,i!=null?Br(e,!!r.multiple,i,!1):r.defaultValue!=null&&Br(e,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=ca)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Ne(t),null;case 6:if(e&&t.stateNode!=null)Tp(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(I(166));if(n=lr(ni.current),lr(jt.current),ga(t)){if(r=t.stateNode,n=t.memoizedProps,r[Kt]=t,(i=r.nodeValue!==n)&&(e=ut,e!==null))switch(e.tag){case 3:sa(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&sa(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[Kt]=t,t.stateNode=r}return Ne(t),null;case 13:if(re(ue),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(oe&&st!==null&&(t.mode&1)!==0&&(t.flags&128)===0)Pf(),Qr(),t.flags|=98560,i=!1;else if(i=ga(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(I(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(I(317));i[Kt]=t}else Qr(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;Ne(t),i=!1}else Bt!==null&&(Bs(Bt),Bt=null),i=!0;if(!i)return t.flags&65536?t:null}return(t.flags&128)!==0?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,(t.mode&1)!==0&&(e===null||(ue.current&1)!==0?Ce===0&&(Ce=3):Os())),t.updateQueue!==null&&(t.flags|=4),Ne(t),null);case 4:return Zr(),xs(e,t),e===null&&Yo(t.stateNode.containerInfo),Ne(t),null;case 10:return qu(t.type._context),Ne(t),null;case 17:return Qe(t.type)&&fa(),Ne(t),null;case 19:if(re(ue),i=t.memoizedState,i===null)return Ne(t),null;if(r=(t.flags&128)!==0,a=i.rendering,a===null)if(r)li(i,!1);else{if(Ce!==0||e!==null&&(e.flags&128)!==0)for(e=t.child;e!==null;){if(a=wa(e),a!==null){for(t.flags|=128,li(i,!1),r=a.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,a=i.alternate,a===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,e=a.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return J(ue,ue.current&1|2),t.child}e=e.sibling}i.tail!==null&&ve()>no&&(t.flags|=128,r=!0,li(i,!1),t.lanes=4194304)}else{if(!r)if(e=wa(a),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),li(i,!0),i.tail===null&&i.tailMode==="hidden"&&!a.alternate&&!oe)return Ne(t),null}else 2*ve()-i.renderingStartTime>no&&n!==1073741824&&(t.flags|=128,r=!0,li(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(n=i.last,n!==null?n.sibling=a:t.child=a,i.last=a)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ve(),t.sibling=null,n=ue.current,J(ue,r?n&1|2:n&1),t):(Ne(t),null);case 22:case 23:return Ls(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&(t.mode&1)!==0?(ct&1073741824)!==0&&(Ne(t),t.subtreeFlags&6&&(t.flags|=8192)):Ne(t),null;case 24:return null;case 25:return null}throw Error(I(156,t.tag))}function Ty(e,t){switch(ju(t),t.tag){case 1:return Qe(t.type)&&fa(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Zr(),re(Ge),re(Pe),is(),e=t.flags,(e&65536)!==0&&(e&128)===0?(t.flags=e&-65537|128,t):null;case 5:return rs(t),null;case 13:if(re(ue),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(I(340));Qr()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return re(ue),null;case 4:return Zr(),null;case 10:return qu(t.type._context),null;case 22:case 23:return Ls(),null;case 24:return null;default:return null}}var Na=!1,Be=!1,My=typeof WeakSet=="function"?WeakSet:Set,N=null;function eo(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){fe(e,t,r)}else n.current=null}function ks(e,t,n){try{n()}catch(r){fe(e,t,r)}}var Mp=!1;function Py(e,t){if(Lu=Zi,e=af(),Iu(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var a=0,l=-1,u=-1,s=0,d=0,c=e,f=null;t:for(;;){for(var h;c!==n||o!==0&&c.nodeType!==3||(l=a+o),c!==i||r!==0&&c.nodeType!==3||(u=a+r),c.nodeType===3&&(a+=c.nodeValue.length),(h=c.firstChild)!==null;)f=c,c=h;for(;;){if(c===e)break t;if(f===n&&++s===o&&(l=a),f===i&&++d===r&&(u=a),(h=c.nextSibling)!==null)break;c=f,f=c.parentNode}c=h}n=l===-1||u===-1?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(Ou={focusedElem:e,selectionRange:n},Zi=!1,N=t;N!==null;)if(t=N,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,N=e;else for(;N!==null;){t=N;try{var y=t.alternate;if((t.flags&1024)!==0)switch(t.tag){case 0:case 11:case 15:break;case 1:if(y!==null){var _=y.memoizedProps,E=y.memoizedState,v=t.stateNode,p=v.getSnapshotBeforeUpdate(t.elementType===t.type?_:Rt(t.type,_),E);v.__reactInternalSnapshotBeforeUpdate=p}break;case 3:var m=t.stateNode.containerInfo;m.nodeType===1?m.textContent="":m.nodeType===9&&m.documentElement&&m.removeChild(m.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(I(163))}}catch(C){fe(t,t.return,C)}if(e=t.sibling,e!==null){e.return=t.return,N=e;break}N=t.return}return y=Mp,Mp=!1,y}function ui(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,i!==void 0&&ks(t,n,i)}o=o.next}while(o!==r)}}function Ba(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ws(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function Pp(e){var t=e.alternate;t!==null&&(e.alternate=null,Pp(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Kt],delete t[Xo],delete t[Hu],delete t[fy],delete t[py])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Dp(e){return e.tag===5||e.tag===3||e.tag===4}function Np(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Dp(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Ss(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=ca));else if(r!==4&&(e=e.child,e!==null))for(Ss(e,t,n),e=e.sibling;e!==null;)Ss(e,t,n),e=e.sibling}function bs(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(bs(e,t,n),e=e.sibling;e!==null;)bs(e,t,n),e=e.sibling}var Ie=null,Lt=!1;function On(e,t,n){for(n=n.child;n!==null;)Bp(e,t,n),n=n.sibling}function Bp(e,t,n){if(Wt&&typeof Wt.onCommitFiberUnmount=="function")try{Wt.onCommitFiberUnmount($i,n)}catch{}switch(n.tag){case 5:Be||eo(n,t);case 6:var r=Ie,o=Lt;Ie=null,On(e,t,n),Ie=r,Lt=o,Ie!==null&&(Lt?(e=Ie,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):Ie.removeChild(n.stateNode));break;case 18:Ie!==null&&(Lt?(e=Ie,n=n.stateNode,e.nodeType===8?zu(e.parentNode,n):e.nodeType===1&&zu(e,n),Ho(e)):zu(Ie,n.stateNode));break;case 4:r=Ie,o=Lt,Ie=n.stateNode.containerInfo,Lt=!0,On(e,t,n),Ie=r,Lt=o;break;case 0:case 11:case 14:case 15:if(!Be&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,a!==void 0&&((i&2)!==0||(i&4)!==0)&&ks(n,t,a),o=o.next}while(o!==r)}On(e,t,n);break;case 1:if(!Be&&(eo(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){fe(n,t,l)}On(e,t,n);break;case 21:On(e,t,n);break;case 22:n.mode&1?(Be=(r=Be)||n.memoizedState!==null,On(e,t,n),Be=r):On(e,t,n);break;default:On(e,t,n)}}function Rp(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new My),t.forEach(function(r){var o=zy.bind(null,e,r);n.has(r)||(n.add(r),r.then(o,o))})}}function Ot(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,a=t,l=a;e:for(;l!==null;){switch(l.tag){case 5:Ie=l.stateNode,Lt=!1;break e;case 3:Ie=l.stateNode.containerInfo,Lt=!0;break e;case 4:Ie=l.stateNode.containerInfo,Lt=!0;break e}l=l.return}if(Ie===null)throw Error(I(160));Bp(i,a,o),Ie=null,Lt=!1;var u=o.alternate;u!==null&&(u.return=null),o.return=null}catch(s){fe(o,t,s)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Lp(t,e),t=t.sibling}function Lp(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Ot(t,e),$t(e),r&4){try{ui(3,e,e.return),Ba(3,e)}catch(_){fe(e,e.return,_)}try{ui(5,e,e.return)}catch(_){fe(e,e.return,_)}}break;case 1:Ot(t,e),$t(e),r&512&&n!==null&&eo(n,n.return);break;case 5:if(Ot(t,e),$t(e),r&512&&n!==null&&eo(n,n.return),e.flags&32){var o=e.stateNode;try{Mo(o,"")}catch(_){fe(e,e.return,_)}}if(r&4&&(o=e.stateNode,o!=null)){var i=e.memoizedProps,a=n!==null?n.memoizedProps:i,l=e.type,u=e.updateQueue;if(e.updateQueue=null,u!==null)try{l==="input"&&i.type==="radio"&&i.name!=null&&ld(o,i),ru(l,a);var s=ru(l,i);for(a=0;a<u.length;a+=2){var d=u[a],c=u[a+1];d==="style"?hd(o,c):d==="dangerouslySetInnerHTML"?pd(o,c):d==="children"?Mo(o,c):Hl(o,d,c,s)}switch(l){case"input":Zl(o,i);break;case"textarea":cd(o,i);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;h!=null?Br(o,!!i.multiple,h,!1):f!==!!i.multiple&&(i.defaultValue!=null?Br(o,!!i.multiple,i.defaultValue,!0):Br(o,!!i.multiple,i.multiple?[]:"",!1))}o[Xo]=i}catch(_){fe(e,e.return,_)}}break;case 6:if(Ot(t,e),$t(e),r&4){if(e.stateNode===null)throw Error(I(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(_){fe(e,e.return,_)}}break;case 3:if(Ot(t,e),$t(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Ho(t.containerInfo)}catch(_){fe(e,e.return,_)}break;case 4:Ot(t,e),$t(e);break;case 13:Ot(t,e),$t(e),o=e.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(Ms=ve())),r&4&&Rp(e);break;case 22:if(d=n!==null&&n.memoizedState!==null,e.mode&1?(Be=(s=Be)||d,Ot(t,e),Be=s):Ot(t,e),$t(e),r&8192){if(s=e.memoizedState!==null,(e.stateNode.isHidden=s)&&!d&&(e.mode&1)!==0)for(N=e,d=e.child;d!==null;){for(c=N=d;N!==null;){switch(f=N,h=f.child,f.tag){case 0:case 11:case 14:case 15:ui(4,f,f.return);break;case 1:eo(f,f.return);var y=f.stateNode;if(typeof y.componentWillUnmount=="function"){r=f,n=f.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(_){fe(r,n,_)}}break;case 5:eo(f,f.return);break;case 22:if(f.memoizedState!==null){Ap(c);continue}}h!==null?(h.return=f,N=h):Ap(c)}d=d.sibling}e:for(d=null,c=e;;){if(c.tag===5){if(d===null){d=c;try{o=c.stateNode,s?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(l=c.stateNode,u=c.memoizedProps.style,a=u!=null&&u.hasOwnProperty("display")?u.display:null,l.style.display=vd("display",a))}catch(_){fe(e,e.return,_)}}}else if(c.tag===6){if(d===null)try{c.stateNode.nodeValue=s?"":c.memoizedProps}catch(_){fe(e,e.return,_)}}else if((c.tag!==22&&c.tag!==23||c.memoizedState===null||c===e)&&c.child!==null){c.child.return=c,c=c.child;continue}if(c===e)break e;for(;c.sibling===null;){if(c.return===null||c.return===e)break e;d===c&&(d=null),c=c.return}d===c&&(d=null),c.sibling.return=c.return,c=c.sibling}}break;case 19:Ot(t,e),$t(e),r&4&&Rp(e);break;case 21:break;default:Ot(t,e),$t(e)}}function $t(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Dp(n)){var r=n;break e}n=n.return}throw Error(I(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(Mo(o,""),r.flags&=-33);var i=Np(e);bs(e,i,o);break;case 3:case 4:var a=r.stateNode.containerInfo,l=Np(e);Ss(e,l,a);break;default:throw Error(I(161))}}catch(u){fe(e,e.return,u)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Dy(e,t,n){N=e,Op(e)}function Op(e,t,n){for(var r=(e.mode&1)!==0;N!==null;){var o=N,i=o.child;if(o.tag===22&&r){var a=o.memoizedState!==null||Na;if(!a){var l=o.alternate,u=l!==null&&l.memoizedState!==null||Be;l=Na;var s=Be;if(Na=a,(Be=u)&&!s)for(N=o;N!==null;)a=N,u=a.child,a.tag===22&&a.memoizedState!==null?zp(o):u!==null?(u.return=a,N=u):zp(o);for(;i!==null;)N=i,Op(i),i=i.sibling;N=o,Na=l,Be=s}Fp(e)}else(o.subtreeFlags&8772)!==0&&i!==null?(i.return=o,N=i):Fp(e)}}function Fp(e){for(;N!==null;){var t=N;if((t.flags&8772)!==0){var n=t.alternate;try{if((t.flags&8772)!==0)switch(t.tag){case 0:case 11:case 15:Be||Ba(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!Be)if(n===null)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Rt(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&Rf(t,i,r);break;case 3:var a=t.updateQueue;if(a!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Rf(t,a,n)}break;case 5:var l=t.stateNode;if(n===null&&t.flags&4){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var s=t.alternate;if(s!==null){var d=s.memoizedState;if(d!==null){var c=d.dehydrated;c!==null&&Ho(c)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(I(163))}Be||t.flags&512&&ws(t)}catch(f){fe(t,t.return,f)}}if(t===e){N=null;break}if(n=t.sibling,n!==null){n.return=t.return,N=n;break}N=t.return}}function Ap(e){for(;N!==null;){var t=N;if(t===e){N=null;break}var n=t.sibling;if(n!==null){n.return=t.return,N=n;break}N=t.return}}function zp(e){for(;N!==null;){var t=N;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Ba(4,t)}catch(u){fe(t,n,u)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var o=t.return;try{r.componentDidMount()}catch(u){fe(t,o,u)}}var i=t.return;try{ws(t)}catch(u){fe(t,i,u)}break;case 5:var a=t.return;try{ws(t)}catch(u){fe(t,a,u)}}}catch(u){fe(t,t.return,u)}if(t===e){N=null;break}var l=t.sibling;if(l!==null){l.return=t.return,N=l;break}N=t.return}}var Ny=Math.ceil,Ra=tn.ReactCurrentDispatcher,Is=tn.ReactCurrentOwner,wt=tn.ReactCurrentBatchConfig,j=0,xe=null,he=null,Te=0,ct=0,to=Dn(0),Ce=0,si=null,sr=0,La=0,Ts=0,ci=null,qe=null,Ms=0,no=1/0,cn=null,Oa=!1,Ps=null,Fn=null,Fa=!1,An=null,Aa=0,di=0,Ds=null,za=-1,Ha=0;function ze(){return(j&6)!==0?ve():za!==-1?za:za=ve()}function zn(e){return(e.mode&1)===0?1:(j&2)!==0&&Te!==0?Te&-Te:hy.transition!==null?(Ha===0&&(Ha=Pd()),Ha):(e=V,e!==0||(e=window.event,e=e===void 0?16:zd(e.type)),e)}function Ft(e,t,n,r){if(50<di)throw di=0,Ds=null,Error(I(185));Lo(e,n,r),((j&2)===0||e!==xe)&&(e===xe&&((j&2)===0&&(La|=n),Ce===4&&Hn(e,Te)),Xe(e,r),n===1&&j===0&&(t.mode&1)===0&&(no=ve()+500,va&&Bn()))}function Xe(e,t){var n=e.callbackNode;hg(e,t);var r=Yi(e,e===xe?Te:0);if(r===0)n!==null&&Id(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&Id(n),t===1)e.tag===0?vy(Up.bind(null,e)):Sf(Up.bind(null,e)),cy(function(){(j&6)===0&&Bn()}),n=null;else{switch(Dd(r)){case 1:n=cu;break;case 4:n=Td;break;case 16:n=Vi;break;case 536870912:n=Md;break;default:n=Vi}n=Yp(n,Hp.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Hp(e,t){if(za=-1,Ha=0,(j&6)!==0)throw Error(I(327));var n=e.callbackNode;if(ro()&&e.callbackNode!==n)return null;var r=Yi(e,e===xe?Te:0);if(r===0)return null;if((r&30)!==0||(r&e.expiredLanes)!==0||t)t=Ua(e,r);else{t=r;var o=j;j|=2;var i=Kp();(xe!==e||Te!==t)&&(cn=null,no=ve()+500,dr(e,t));do try{Ly();break}catch(l){Wp(e,l)}while(1);Yu(),Ra.current=i,j=o,he!==null?t=0:(xe=null,Te=0,t=Ce)}if(t!==0){if(t===2&&(o=du(e),o!==0&&(r=o,t=Ns(e,o))),t===1)throw n=si,dr(e,0),Hn(e,r),Xe(e,ve()),n;if(t===6)Hn(e,r);else{if(o=e.current.alternate,(r&30)===0&&!By(o)&&(t=Ua(e,r),t===2&&(i=du(e),i!==0&&(r=i,t=Ns(e,i))),t===1))throw n=si,dr(e,0),Hn(e,r),Xe(e,ve()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(I(345));case 2:fr(e,qe,cn);break;case 3:if(Hn(e,r),(r&130023424)===r&&(t=Ms+500-ve(),10<t)){if(Yi(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){ze(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Au(fr.bind(null,e,qe,cn),t);break}fr(e,qe,cn);break;case 4:if(Hn(e,r),(r&4194240)===r)break;for(t=e.eventTimes,o=-1;0<r;){var a=31-Dt(r);i=1<<a,a=t[a],a>o&&(o=a),r&=~i}if(r=o,r=ve()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ny(r/1960))-r,10<r){e.timeoutHandle=Au(fr.bind(null,e,qe,cn),r);break}fr(e,qe,cn);break;case 5:fr(e,qe,cn);break;default:throw Error(I(329))}}}return Xe(e,ve()),e.callbackNode===n?Hp.bind(null,e):null}function Ns(e,t){var n=ci;return e.current.memoizedState.isDehydrated&&(dr(e,t).flags|=256),e=Ua(e,t),e!==2&&(t=qe,qe=n,t!==null&&Bs(t)),e}function Bs(e){qe===null?qe=e:qe.push.apply(qe,e)}function By(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!Nt(i(),o))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Hn(e,t){for(t&=~Ts,t&=~La,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Dt(t),r=1<<n;e[n]=-1,t&=~r}}function Up(e){if((j&6)!==0)throw Error(I(327));ro();var t=Yi(e,0);if((t&1)===0)return Xe(e,ve()),null;var n=Ua(e,t);if(e.tag!==0&&n===2){var r=du(e);r!==0&&(t=r,n=Ns(e,r))}if(n===1)throw n=si,dr(e,0),Hn(e,t),Xe(e,ve()),n;if(n===6)throw Error(I(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,fr(e,qe,cn),Xe(e,ve()),null}function Rs(e,t){var n=j;j|=1;try{return e(t)}finally{j=n,j===0&&(no=ve()+500,va&&Bn())}}function cr(e){An!==null&&An.tag===0&&(j&6)===0&&ro();var t=j;j|=1;var n=wt.transition,r=V;try{if(wt.transition=null,V=1,e)return e()}finally{V=r,wt.transition=n,j=t,(j&6)===0&&Bn()}}function Ls(){ct=to.current,re(to)}function dr(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,sy(n)),he!==null)for(n=he.return;n!==null;){var r=n;switch(ju(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&fa();break;case 3:Zr(),re(Ge),re(Pe),is();break;case 5:rs(r);break;case 4:Zr();break;case 13:re(ue);break;case 19:re(ue);break;case 10:qu(r.type._context);break;case 22:case 23:Ls()}n=n.return}if(xe=e,he=e=Un(e.current,null),Te=ct=t,Ce=0,si=null,Ts=La=sr=0,qe=ci=null,ar!==null){for(t=0;t<ar.length;t++)if(n=ar[t],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,i=n.pending;if(i!==null){var a=i.next;i.next=o,r.next=a}n.pending=r}ar=null}return e}function Wp(e,t){do{var n=he;try{if(Yu(),Sa.current=Ma,ba){for(var r=se.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}ba=!1}if(ur=0,Ee=_e=se=null,ri=!1,oi=0,Is.current=null,n===null||n.return===null){Ce=1,si=t,he=null;break}e:{var i=e,a=n.return,l=n,u=t;if(t=Te,l.flags|=32768,u!==null&&typeof u=="object"&&typeof u.then=="function"){var s=u,d=l,c=d.tag;if((d.mode&1)===0&&(c===0||c===11||c===15)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=pp(a);if(h!==null){h.flags&=-257,vp(h,a,l,i,t),h.mode&1&&fp(i,s,t),t=h,u=s;var y=t.updateQueue;if(y===null){var _=new Set;_.add(u),t.updateQueue=_}else y.add(u);break e}else{if((t&1)===0){fp(i,s,t),Os();break e}u=Error(I(426))}}else if(oe&&l.mode&1){var E=pp(a);if(E!==null){(E.flags&65536)===0&&(E.flags|=256),vp(E,a,l,i,t),Gu(Jr(u,l));break e}}i=u=Jr(u,l),Ce!==4&&(Ce=2),ci===null?ci=[i]:ci.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var v=cp(i,u,t);Bf(i,v);break e;case 1:l=u;var p=i.type,m=i.stateNode;if((i.flags&128)===0&&(typeof p.getDerivedStateFromError=="function"||m!==null&&typeof m.componentDidCatch=="function"&&(Fn===null||!Fn.has(m)))){i.flags|=65536,t&=-t,i.lanes|=t;var C=dp(i,l,t);Bf(i,C);break e}}i=i.return}while(i!==null)}Vp(n)}catch(w){t=w,he===n&&n!==null&&(he=n=n.return);continue}break}while(1)}function Kp(){var e=Ra.current;return Ra.current=Ma,e===null?Ma:e}function Os(){(Ce===0||Ce===3||Ce===2)&&(Ce=4),xe===null||(sr&268435455)===0&&(La&268435455)===0||Hn(xe,Te)}function Ua(e,t){var n=j;j|=2;var r=Kp();(xe!==e||Te!==t)&&(cn=null,dr(e,t));do try{Ry();break}catch(o){Wp(e,o)}while(1);if(Yu(),j=n,Ra.current=r,he!==null)throw Error(I(261));return xe=null,Te=0,Ce}function Ry(){for(;he!==null;)jp(he)}function Ly(){for(;he!==null&&!ag();)jp(he)}function jp(e){var t=Qp(e.alternate,e,ct);e.memoizedProps=e.pendingProps,t===null?Vp(e):he=t,Is.current=null}function Vp(e){var t=e;do{var n=t.alternate;if(e=t.return,(t.flags&32768)===0){if(n=Iy(n,t,ct),n!==null){he=n;return}}else{if(n=Ty(n,t),n!==null){n.flags&=32767,he=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Ce=6,he=null;return}}if(t=t.sibling,t!==null){he=t;return}he=t=e}while(t!==null);Ce===0&&(Ce=5)}function fr(e,t,n){var r=V,o=wt.transition;try{wt.transition=null,V=1,Oy(e,t,n,r)}finally{wt.transition=o,V=r}return null}function Oy(e,t,n,r){do ro();while(An!==null);if((j&6)!==0)throw Error(I(327));n=e.finishedWork;var o=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(I(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(mg(e,i),e===xe&&(he=xe=null,Te=0),(n.subtreeFlags&2064)===0&&(n.flags&2064)===0||Fa||(Fa=!0,Yp(Vi,function(){return ro(),null})),i=(n.flags&15990)!==0,(n.subtreeFlags&15990)!==0||i){i=wt.transition,wt.transition=null;var a=V;V=1;var l=j;j|=4,Is.current=null,Py(e,n),Lp(n,e),ny(Ou),Zi=!!Lu,Ou=Lu=null,e.current=n,Dy(n),lg(),j=l,V=a,wt.transition=i}else e.current=n;if(Fa&&(Fa=!1,An=e,Aa=o),i=e.pendingLanes,i===0&&(Fn=null),cg(n.stateNode),Xe(e,ve()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(Oa)throw Oa=!1,e=Ps,Ps=null,e;return(Aa&1)!==0&&e.tag!==0&&ro(),i=e.pendingLanes,(i&1)!==0?e===Ds?di++:(di=0,Ds=e):di=0,Bn(),null}function ro(){if(An!==null){var e=Dd(Aa),t=wt.transition,n=V;try{if(wt.transition=null,V=16>e?16:e,An===null)var r=!1;else{if(e=An,An=null,Aa=0,(j&6)!==0)throw Error(I(331));var o=j;for(j|=4,N=e.current;N!==null;){var i=N,a=i.child;if((N.flags&16)!==0){var l=i.deletions;if(l!==null){for(var u=0;u<l.length;u++){var s=l[u];for(N=s;N!==null;){var d=N;switch(d.tag){case 0:case 11:case 15:ui(8,d,i)}var c=d.child;if(c!==null)c.return=d,N=c;else for(;N!==null;){d=N;var f=d.sibling,h=d.return;if(Pp(d),d===s){N=null;break}if(f!==null){f.return=h,N=f;break}N=h}}}var y=i.alternate;if(y!==null){var _=y.child;if(_!==null){y.child=null;do{var E=_.sibling;_.sibling=null,_=E}while(_!==null)}}N=i}}if((i.subtreeFlags&2064)!==0&&a!==null)a.return=i,N=a;else e:for(;N!==null;){if(i=N,(i.flags&2048)!==0)switch(i.tag){case 0:case 11:case 15:ui(9,i,i.return)}var v=i.sibling;if(v!==null){v.return=i.return,N=v;break e}N=i.return}}var p=e.current;for(N=p;N!==null;){a=N;var m=a.child;if((a.subtreeFlags&2064)!==0&&m!==null)m.return=a,N=m;else e:for(a=p;N!==null;){if(l=N,(l.flags&2048)!==0)try{switch(l.tag){case 0:case 11:case 15:Ba(9,l)}}catch(w){fe(l,l.return,w)}if(l===a){N=null;break e}var C=l.sibling;if(C!==null){C.return=l.return,N=C;break e}N=l.return}}if(j=o,Bn(),Wt&&typeof Wt.onPostCommitFiberRoot=="function")try{Wt.onPostCommitFiberRoot($i,e)}catch{}r=!0}return r}finally{V=n,wt.transition=t}}return!1}function $p(e,t,n){t=Jr(n,t),t=cp(e,t,1),e=Ln(e,t,1),t=ze(),e!==null&&(Lo(e,1,t),Xe(e,t))}function fe(e,t,n){if(e.tag===3)$p(e,e,n);else for(;t!==null;){if(t.tag===3){$p(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Fn===null||!Fn.has(r))){e=Jr(n,e),e=dp(t,e,1),t=Ln(t,e,1),e=ze(),t!==null&&(Lo(t,1,e),Xe(t,e));break}}t=t.return}}function Fy(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ze(),e.pingedLanes|=e.suspendedLanes&n,xe===e&&(Te&n)===n&&(Ce===4||Ce===3&&(Te&130023424)===Te&&500>ve()-Ms?dr(e,0):Ts|=n),Xe(e,t)}function Gp(e,t){t===0&&((e.mode&1)===0?t=1:(t=Qi,Qi<<=1,(Qi&130023424)===0&&(Qi=4194304)));var n=ze();e=ln(e,t),e!==null&&(Lo(e,t,n),Xe(e,n))}function Ay(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Gp(e,n)}function zy(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(I(314))}r!==null&&r.delete(t),Gp(e,n)}var Qp;Qp=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||Ge.current)Ye=!0;else{if((e.lanes&n)===0&&(t.flags&128)===0)return Ye=!1,by(e,t,n);Ye=(e.flags&131072)!==0}else Ye=!1,oe&&(t.flags&1048576)!==0&&bf(t,ma,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Da(e,t),e=t.pendingProps;var o=Vr(t,Pe.current);qr(t,n),o=us(null,t,r,e,o,n);var i=ss();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Qe(r)?(i=!0,pa(t)):i=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,Ju(t),o.updater=xa,t.stateNode=o,o._reactInternals=t,ts(t,r,e,n),t=gs(null,t,r,!0,i,n)):(t.tag=0,oe&&i&&Ku(t),Ae(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Da(e,t),e=t.pendingProps,o=r._init,r=o(r._payload),t.type=r,o=t.tag=Uy(r),e=Rt(r,e),o){case 0:t=ms(null,t,r,e,n);break e;case 1:t=Cp(null,t,r,e,n);break e;case 11:t=hp(null,t,r,e,n);break e;case 14:t=mp(null,t,r,Rt(r.type,e),n);break e}throw Error(I(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Rt(r,o),ms(e,t,r,o,n);case 1:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Rt(r,o),Cp(e,t,r,o,n);case 3:e:{if(Ep(t),e===null)throw Error(I(387));r=t.pendingProps,i=t.memoizedState,o=i.element,Nf(e,t),Ea(t,r,null,n);var a=t.memoizedState;if(r=a.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){o=Jr(Error(I(423)),t),t=xp(e,t,r,n,o);break e}else if(r!==o){o=Jr(Error(I(424)),t),t=xp(e,t,r,n,o);break e}else for(st=Pn(t.stateNode.containerInfo.firstChild),ut=t,oe=!0,Bt=null,n=Uf(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Qr(),r===o){t=sn(e,t,n);break e}Ae(e,t,r,n)}t=t.child}return t;case 5:return Wf(t),e===null&&$u(t),r=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,a=o.children,Fu(r,o)?a=null:i!==null&&Fu(r,i)&&(t.flags|=32),_p(e,t),Ae(e,t,a,n),t.child;case 6:return e===null&&$u(t),null;case 13:return kp(e,t,n);case 4:return ns(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Xr(t,null,r,n):Ae(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Rt(r,o),hp(e,t,r,o,n);case 7:return Ae(e,t,t.pendingProps,n),t.child;case 8:return Ae(e,t,t.pendingProps.children,n),t.child;case 12:return Ae(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=o.value,J(ya,r._currentValue),r._currentValue=a,i!==null)if(Nt(i.value,a)){if(i.children===o.children&&!Ge.current){t=sn(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var l=i.dependencies;if(l!==null){a=i.child;for(var u=l.firstContext;u!==null;){if(u.context===r){if(i.tag===1){u=un(-1,n&-n),u.tag=2;var s=i.updateQueue;if(s!==null){s=s.shared;var d=s.pending;d===null?u.next=u:(u.next=d.next,d.next=u),s.pending=u}}i.lanes|=n,u=i.alternate,u!==null&&(u.lanes|=n),Xu(i.return,n,t),l.lanes|=n;break}u=u.next}}else if(i.tag===10)a=i.type===t.type?null:i.child;else if(i.tag===18){if(a=i.return,a===null)throw Error(I(341));a.lanes|=n,l=a.alternate,l!==null&&(l.lanes|=n),Xu(a,n,t),a=i.sibling}else a=i.child;if(a!==null)a.return=i;else for(a=i;a!==null;){if(a===t){a=null;break}if(i=a.sibling,i!==null){i.return=a.return,a=i;break}a=a.return}i=a}Ae(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,qr(t,n),o=xt(o),r=r(o),t.flags|=1,Ae(e,t,r,n),t.child;case 14:return r=t.type,o=Rt(r,t.pendingProps),o=Rt(r.type,o),mp(e,t,r,o,n);case 15:return gp(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Rt(r,o),Da(e,t),t.tag=1,Qe(r)?(e=!0,pa(t)):e=!1,qr(t,n),Ff(t,r,o),ts(t,r,o,n),gs(null,t,r,!0,e,n);case 19:return Sp(e,t,n);case 22:return yp(e,t,n)}throw Error(I(156,t.tag))};function Yp(e,t){return bd(e,t)}function Hy(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function St(e,t,n,r){return new Hy(e,t,n,r)}function Fs(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Uy(e){if(typeof e=="function")return Fs(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Kl)return 11;if(e===$l)return 14}return 2}function Un(e,t){var n=e.alternate;return n===null?(n=St(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wa(e,t,n,r,o,i){var a=2;if(r=e,typeof e=="function")Fs(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case Nr:return pr(n.children,o,i,t);case Ul:a=8,o|=8;break;case Wl:return e=St(12,n,t,o|2),e.elementType=Wl,e.lanes=i,e;case jl:return e=St(13,n,t,o),e.elementType=jl,e.lanes=i,e;case Vl:return e=St(19,n,t,o),e.elementType=Vl,e.lanes=i,e;case nd:return Ka(n,o,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case ed:a=10;break e;case td:a=9;break e;case Kl:a=11;break e;case $l:a=14;break e;case xn:a=16,r=null;break e}throw Error(I(130,e==null?e:typeof e,""))}return t=St(a,n,t,o),t.elementType=e,t.type=r,t.lanes=i,t}function pr(e,t,n,r){return e=St(7,e,r,t),e.lanes=n,e}function Ka(e,t,n,r){return e=St(22,e,r,t),e.elementType=nd,e.lanes=n,e.stateNode={isHidden:!1},e}function As(e,t,n){return e=St(6,e,null,t),e.lanes=n,e}function zs(e,t,n){return t=St(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Wy(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=fu(0),this.expirationTimes=fu(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=fu(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Hs(e,t,n,r,o,i,a,l,u){return e=new Wy(e,t,n,l,u),t===1?(t=1,i===!0&&(t|=8)):t=0,i=St(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ju(i),e}function Ky(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Dr,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function qp(e){if(!e)return Nn;e=e._reactInternals;e:{if(tr(e)!==e||e.tag!==1)throw Error(I(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Qe(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(I(171))}if(e.tag===1){var n=e.type;if(Qe(n))return kf(e,n,t)}return t}function Xp(e,t,n,r,o,i,a,l,u){return e=Hs(n,r,!0,e,o,i,a,l,u),e.context=qp(null),n=e.current,r=ze(),o=zn(n),i=un(r,o),i.callback=t!=null?t:null,Ln(n,i,o),e.current.lanes=o,Lo(e,o,r),Xe(e,r),e}function ja(e,t,n,r){var o=t.current,i=ze(),a=zn(o);return n=qp(n),t.context===null?t.context=n:t.pendingContext=n,t=un(i,a),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=Ln(o,t,a),e!==null&&(Ft(e,o,a,i),Ca(e,o,a)),a}function Va(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Zp(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Us(e,t){Zp(e,t),(e=e.alternate)&&Zp(e,t)}function jy(){return null}var Jp=typeof reportError=="function"?reportError:function(e){console.error(e)};function Ws(e){this._internalRoot=e}$a.prototype.render=Ws.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(I(409));ja(e,t,null,null)},$a.prototype.unmount=Ws.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;cr(function(){ja(null,e,null,null)}),t[nn]=null}};function $a(e){this._internalRoot=e}$a.prototype.unstable_scheduleHydration=function(e){if(e){var t=Rd();e={blockedOn:null,target:e,priority:t};for(var n=0;n<In.length&&t!==0&&t<In[n].priority;n++);In.splice(n,0,e),n===0&&Fd(e)}};function Ks(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Ga(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function ev(){}function Vy(e,t,n,r,o){if(o){if(typeof r=="function"){var i=r;r=function(){var s=Va(a);i.call(s)}}var a=Xp(t,r,e,0,null,!1,!1,"",ev);return e._reactRootContainer=a,e[nn]=a.current,Yo(e.nodeType===8?e.parentNode:e),cr(),a}for(;o=e.lastChild;)e.removeChild(o);if(typeof r=="function"){var l=r;r=function(){var s=Va(u);l.call(s)}}var u=Hs(e,0,!1,null,null,!1,!1,"",ev);return e._reactRootContainer=u,e[nn]=u.current,Yo(e.nodeType===8?e.parentNode:e),cr(function(){ja(t,u,n,r)}),u}function Qa(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if(typeof o=="function"){var l=o;o=function(){var u=Va(a);l.call(u)}}ja(t,a,e,o)}else a=Vy(n,t,e,o,r);return Va(a)}Nd=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Ro(t.pendingLanes);n!==0&&(pu(t,n|1),Xe(t,ve()),(j&6)===0&&(no=ve()+500,Bn()))}break;case 13:cr(function(){var r=ln(e,1);if(r!==null){var o=ze();Ft(r,e,1,o)}}),Us(e,1)}},vu=function(e){if(e.tag===13){var t=ln(e,134217728);if(t!==null){var n=ze();Ft(t,e,134217728,n)}Us(e,134217728)}},Bd=function(e){if(e.tag===13){var t=zn(e),n=ln(e,t);if(n!==null){var r=ze();Ft(n,e,t,r)}Us(e,t)}},Rd=function(){return V},Ld=function(e,t){var n=V;try{return V=e,t()}finally{V=n}},au=function(e,t,n){switch(t){case"input":if(Zl(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=da(r);if(!o)throw Error(I(90));id(r),Zl(r,o)}}}break;case"textarea":cd(e,n);break;case"select":t=n.value,t!=null&&Br(e,!!n.multiple,t,!1)}},_d=Rs,Cd=cr;var $y={usingClientEntryPoint:!1,Events:[Zo,Kr,da,gd,yd,Rs]},fi={findFiberByHostInstance:nr,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},Gy={bundleType:fi.bundleType,version:fi.version,rendererPackageName:fi.rendererPackageName,rendererConfig:fi.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:tn.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=wd(e),e===null?null:e.stateNode},findFiberByHostInstance:fi.findFiberByHostInstance||jy,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Ya=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ya.isDisabled&&Ya.supportsFiber)try{$i=Ya.inject(Gy),Wt=Ya}catch{}}it.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$y,it.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Ks(t))throw Error(I(200));return Ky(e,t,null,n)},it.createRoot=function(e,t){if(!Ks(e))throw Error(I(299));var n=!1,r="",o=Jp;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=Hs(e,1,!1,null,null,n,!1,r,o),e[nn]=t.current,Yo(e.nodeType===8?e.parentNode:e),new Ws(t)},it.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(I(188)):(e=Object.keys(e).join(","),Error(I(268,e)));return e=wd(t),e=e===null?null:e.stateNode,e},it.flushSync=function(e){return cr(e)},it.hydrate=function(e,t,n){if(!Ga(t))throw Error(I(200));return Qa(null,e,t,!0,n)},it.hydrateRoot=function(e,t,n){if(!Ks(e))throw Error(I(405));var r=n!=null&&n.hydratedSources||null,o=!1,i="",a=Jp;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),t=Xp(t,null,e,1,n!=null?n:null,o,!1,i,a),e[nn]=t.current,Yo(e),r)for(e=0;e<r.length;e++)n=r[e],o=n._getVersion,o=o(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new $a(t)},it.render=function(e,t,n){if(!Ga(t))throw Error(I(200));return Qa(null,e,t,!1,n)},it.unmountComponentAtNode=function(e){if(!Ga(e))throw Error(I(40));return e._reactRootContainer?(cr(function(){Qa(null,null,e,!1,function(){e._reactRootContainer=null,e[nn]=null})}),!0):!1},it.unstable_batchedUpdates=Rs,it.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ga(n))throw Error(I(200));if(e==null||e._reactInternals===void 0)throw Error(I(38));return Qa(e,t,n,!1,r)},it.version="18.2.0-next-9e3b772b8-20220608",function(e){function t(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(n){console.error(n)}}t(),e.exports=it}(Ol);var js,tv=Ol.exports;js=tv.createRoot,tv.hydrateRoot;var nv={},qa=void 0;try{qa=window}catch{}function rv(e,t){if(typeof qa<"u"){var n=qa.__packages__=qa.__packages__||{};if(!n[e]||!nv[e]){nv[e]=t;var r=n[e]=n[e]||[];r.push(t)}}}rv("@fluentui/set-version","6.0.0");var Vs=function(e,t){return Vs=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(n[o]=r[o])},Vs(e,t)};function dt(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");Vs(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}var k=function(){return k=Object.assign||function(t){for(var n,r=1,o=arguments.length;r<o;r++){n=arguments[r];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},k.apply(this,arguments)};function oo(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]]);return n}function ov(e,t,n,r){var o=arguments.length,i=o<3?t:r===null?r=Object.getOwnPropertyDescriptor(t,n):r,a;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")i=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(i=(o<3?a(i):o>3?a(t,n,i):a(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function dn(e,t,n){if(n||arguments.length===2)for(var r=0,o=t.length,i;r<o;r++)(i||!(r in t))&&(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}var pi={none:0,insertNode:1,appendChild:2},iv="__stylesheet__",Qy=typeof navigator<"u"&&/rv:11.0/.test(navigator.userAgent),io={};try{io=window||{}}catch{}var ao,bt=function(){function e(t,n){var r,o,i,a,l,u;this._rules=[],this._preservedRules=[],this._counter=0,this._keyToClassName={},this._onInsertRuleCallbacks=[],this._onResetCallbacks=[],this._classNameToArgs={},this._config=k({injectionMode:typeof document>"u"?pi.none:pi.insertNode,defaultPrefix:"css",namespace:void 0,cspSettings:void 0},t),this._classNameToArgs=(r=n==null?void 0:n.classNameToArgs)!==null&&r!==void 0?r:this._classNameToArgs,this._counter=(o=n==null?void 0:n.counter)!==null&&o!==void 0?o:this._counter,this._keyToClassName=(a=(i=this._config.classNameCache)!==null&&i!==void 0?i:n==null?void 0:n.keyToClassName)!==null&&a!==void 0?a:this._keyToClassName,this._preservedRules=(l=n==null?void 0:n.preservedRules)!==null&&l!==void 0?l:this._preservedRules,this._rules=(u=n==null?void 0:n.rules)!==null&&u!==void 0?u:this._rules}return e.getInstance=function(){if(ao=io[iv],!ao||ao._lastStyleElement&&ao._lastStyleElement.ownerDocument!==document){var t=(io==null?void 0:io.FabricConfig)||{},n=new e(t.mergeStyles,t.serializedStylesheet);ao=n,io[iv]=n}return ao},e.prototype.serialize=function(){return JSON.stringify({classNameToArgs:this._classNameToArgs,counter:this._counter,keyToClassName:this._keyToClassName,preservedRules:this._preservedRules,rules:this._rules})},e.prototype.setConfig=function(t){this._config=k(k({},this._config),t)},e.prototype.onReset=function(t){var n=this;return this._onResetCallbacks.push(t),function(){n._onResetCallbacks=n._onResetCallbacks.filter(function(r){return r!==t})}},e.prototype.onInsertRule=function(t){var n=this;return this._onInsertRuleCallbacks.push(t),function(){n._onInsertRuleCallbacks=n._onInsertRuleCallbacks.filter(function(r){return r!==t})}},e.prototype.getClassName=function(t){var n=this._config.namespace,r=t||this._config.defaultPrefix;return(n?n+"-":"")+r+"-"+this._counter++},e.prototype.cacheClassName=function(t,n,r,o){this._keyToClassName[n]=t,this._classNameToArgs[t]={args:r,rules:o}},e.prototype.classNameFromKey=function(t){return this._keyToClassName[t]},e.prototype.getClassNameCache=function(){return this._keyToClassName},e.prototype.argsFromClassName=function(t){var n=this._classNameToArgs[t];return n&&n.args},e.prototype.insertedRulesFromClassName=function(t){var n=this._classNameToArgs[t];return n&&n.rules},e.prototype.insertRule=function(t,n){var r=this._config.injectionMode,o=r!==pi.none?this._getStyleElement():void 0;if(n&&this._preservedRules.push(t),o)switch(r){case pi.insertNode:var i=o.sheet;try{i.insertRule(t,i.cssRules.length)}catch{}break;case pi.appendChild:o.appendChild(document.createTextNode(t));break}else this._rules.push(t);this._config.onInsertRule&&this._config.onInsertRule(t),this._onInsertRuleCallbacks.forEach(function(a){return a()})},e.prototype.getRules=function(t){return(t?this._preservedRules.join(""):"")+this._rules.join("")},e.prototype.reset=function(){this._rules=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach(function(t){return t()})},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var t=this;return!this._styleElement&&typeof document<"u"&&(this._styleElement=this._createStyleElement(),Qy||window.requestAnimationFrame(function(){t._styleElement=void 0})),this._styleElement},e.prototype._createStyleElement=function(){var t=document.head,n=document.createElement("style"),r=null;n.setAttribute("data-merge-styles","true");var o=this._config.cspSettings;if(o&&o.nonce&&n.setAttribute("nonce",o.nonce),this._lastStyleElement)r=this._lastStyleElement.nextElementSibling;else{var i=this._findPlaceholderStyleTag();i?r=i.nextElementSibling:r=t.childNodes[0]}return t.insertBefore(n,t.contains(r)?r:null),this._lastStyleElement=n,n},e.prototype._findPlaceholderStyleTag=function(){var t=document.head;return t?t.querySelector("style[data-merge-styles]"):null},e}();function av(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],r=[],o=bt.getInstance();function i(a){for(var l=0,u=a;l<u.length;l++){var s=u[l];if(s)if(typeof s=="string")if(s.indexOf(" ")>=0)i(s.split(" "));else{var d=o.argsFromClassName(s);d?i(d):n.indexOf(s)===-1&&n.push(s)}else Array.isArray(s)?i(s):typeof s=="object"&&r.push(s)}}return i(e),{classes:n,objects:r}}function lv(e){lo!==e&&(lo=e)}function uv(){return lo===void 0&&(lo=typeof document<"u"&&!!document.documentElement&&document.documentElement.getAttribute("dir")==="rtl"),lo}var lo;lo=uv();function Xa(){return{rtl:uv()}}var sv={};function Yy(e,t){var n=e[t];n.charAt(0)!=="-"&&(e[t]=sv[n]=sv[n]||n.replace(/([A-Z])/g,"-$1").toLowerCase())}var Za;function qy(){var e;if(!Za){var t=typeof document<"u"?document:void 0,n=typeof navigator<"u"?navigator:void 0,r=(e=n==null?void 0:n.userAgent)===null||e===void 0?void 0:e.toLowerCase();t?Za={isWebkit:!!(t&&"WebkitAppearance"in t.documentElement.style),isMoz:!!(r&&r.indexOf("firefox")>-1),isOpera:!!(r&&r.indexOf("opera")>-1),isMs:!!(n&&(/rv:11.0/i.test(n.userAgent)||/Edge\/\d./i.test(navigator.userAgent)))}:Za={isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return Za}var cv={"user-select":1};function Xy(e,t){var n=qy(),r=e[t];if(cv[r]){var o=e[t+1];cv[r]&&(n.isWebkit&&e.push("-webkit-"+r,o),n.isMoz&&e.push("-moz-"+r,o),n.isMs&&e.push("-ms-"+r,o),n.isOpera&&e.push("-o-"+r,o))}}var Zy=["column-count","font-weight","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function Jy(e,t){var n=e[t],r=e[t+1];if(typeof r=="number"){var o=Zy.indexOf(n)>-1,i=n.indexOf("--")>-1,a=o||i?"":"px";e[t+1]=""+r+a}}var Ja,Wn="left",Kn="right",e0="@noflip",dv=(Ja={},Ja[Wn]=Kn,Ja[Kn]=Wn,Ja),fv={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"};function t0(e,t,n){if(e.rtl){var r=t[n];if(!r)return;var o=t[n+1];if(typeof o=="string"&&o.indexOf(e0)>=0)t[n+1]=o.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(r.indexOf(Wn)>=0)t[n]=r.replace(Wn,Kn);else if(r.indexOf(Kn)>=0)t[n]=r.replace(Kn,Wn);else if(String(o).indexOf(Wn)>=0)t[n+1]=o.replace(Wn,Kn);else if(String(o).indexOf(Kn)>=0)t[n+1]=o.replace(Kn,Wn);else if(dv[r])t[n]=dv[r];else if(fv[o])t[n+1]=fv[o];else switch(r){case"margin":case"padding":t[n+1]=r0(o);break;case"box-shadow":t[n+1]=n0(o,0);break}}}function n0(e,t){var n=e.split(" "),r=parseInt(n[t],10);return n[0]=n[0].replace(String(r),String(r*-1)),n.join(" ")}function r0(e){if(typeof e=="string"){var t=e.split(" ");if(t.length===4)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}function o0(e){for(var t=[],n=0,r=0,o=0;o<e.length;o++)switch(e[o]){case"(":r++;break;case")":r&&r--;break;case"	":case" ":r||(o>n&&t.push(e.substring(n,o)),n=o+1);break}return n<e.length&&t.push(e.substring(n)),t}var i0="displayName";function a0(e){var t=e&&e["&"];return t?t.displayName:void 0}var pv=/\:global\((.+?)\)/g;function l0(e){if(!pv.test(e))return e;for(var t=[],n=/\:global\((.+?)\)/g,r=null;r=n.exec(e);)r[1].indexOf(",")>-1&&t.push([r.index,r.index+r[0].length,r[1].split(",").map(function(o){return":global("+o.trim()+")"}).join(", ")]);return t.reverse().reduce(function(o,i){var a=i[0],l=i[1],u=i[2],s=o.slice(0,a),d=o.slice(l);return s+u+d},e)}function vv(e,t){return e.indexOf(":global(")>=0?e.replace(pv,"$1"):e.indexOf(":")===0?t+e:e.indexOf("&")<0?t+" "+e:e}function hv(e,t,n,r){t===void 0&&(t={__order:[]}),n.indexOf("@")===0?(n=n+"{"+e,uo([r],t,n)):n.indexOf(",")>-1?l0(n).split(",").map(function(o){return o.trim()}).forEach(function(o){return uo([r],t,vv(o,e))}):uo([r],t,vv(n,e))}function uo(e,t,n){t===void 0&&(t={__order:[]}),n===void 0&&(n="&");var r=bt.getInstance(),o=t[n];o||(o={},t[n]=o,t.__order.push(n));for(var i=0,a=e;i<a.length;i++){var l=a[i];if(typeof l=="string"){var u=r.argsFromClassName(l);u&&uo(u,t,n)}else if(Array.isArray(l))uo(l,t,n);else for(var s in l)if(l.hasOwnProperty(s)){var d=l[s];if(s==="selectors"){var c=l.selectors;for(var f in c)c.hasOwnProperty(f)&&hv(n,t,f,c[f])}else typeof d=="object"?d!==null&&hv(n,t,s,d):d!==void 0&&(s==="margin"||s==="padding"?u0(o,s,d):o[s]=d)}}return t}function u0(e,t,n){var r=typeof n=="string"?o0(n):[n];r.length===0&&r.push(n),r[r.length-1]==="!important"&&(r=r.slice(0,-1).map(function(o){return o+" !important"})),e[t+"Top"]=r[0],e[t+"Right"]=r[1]||r[0],e[t+"Bottom"]=r[2]||r[0],e[t+"Left"]=r[3]||r[1]||r[0]}function s0(e,t){for(var n=[e.rtl?"rtl":"ltr"],r=!1,o=0,i=t.__order;o<i.length;o++){var a=i[o];n.push(a);var l=t[a];for(var u in l)l.hasOwnProperty(u)&&l[u]!==void 0&&(r=!0,n.push(u,l[u]))}return r?n.join(""):void 0}function mv(e,t){return t<=0?"":t===1?e:e+mv(e,t-1)}function $s(e,t){if(!t)return"";var n=[];for(var r in t)t.hasOwnProperty(r)&&r!==i0&&t[r]!==void 0&&n.push(r,t[r]);for(var o=0;o<n.length;o+=2)Yy(n,o),Jy(n,o),t0(e,n,o),Xy(n,o);for(var o=1;o<n.length;o+=4)n.splice(o,1,":",n[o],";");return n.join("")}function gv(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=uo(t),o=s0(e,r);if(o){var i=bt.getInstance(),a={className:i.classNameFromKey(o),key:o,args:t};if(!a.className){a.className=i.getClassName(a0(r));for(var l=[],u=0,s=r.__order;u<s.length;u++){var d=s[u];l.push(d,$s(e,r[d]))}a.rulesToInsert=l}return a}}function yv(e,t){t===void 0&&(t=1);var n=bt.getInstance(),r=e.className,o=e.key,i=e.args,a=e.rulesToInsert;if(a){for(var l=0;l<a.length;l+=2){var u=a[l+1];if(u){var s=a[l];s=s.replace(/&/g,mv("."+e.className,t));var d=s+"{"+u+"}"+(s.indexOf("@")===0?"}":"");n.insertRule(d)}}n.cacheClassName(r,o,i,a)}}function c0(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=gv.apply(void 0,dn([e],t));return r?(yv(r,e.specificityMultiplier),r.className):""}function fn(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return d0(e,Xa())}function d0(e,t){var n=e instanceof Array?e:[e],r=av(n),o=r.classes,i=r.objects;return i.length&&o.push(c0(t||{},i)),o.join(" ")}function vr(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e&&e.length===1&&e[0]&&!e[0].subComponentStyles)return e[0];for(var n={},r={},o=0,i=e;o<i.length;o++){var a=i[o];if(a){for(var l in a)if(a.hasOwnProperty(l)){if(l==="subComponentStyles"&&a.subComponentStyles!==void 0){var u=a.subComponentStyles;for(var s in u)u.hasOwnProperty(s)&&(r.hasOwnProperty(s)?r[s].push(u[s]):r[s]=[u[s]]);continue}var d=n[l],c=a[l];d===void 0?n[l]=c:n[l]=dn(dn([],Array.isArray(d)?d:[d]),Array.isArray(c)?c:[c])}}}if(Object.keys(r).length>0){n.subComponentStyles={};var f=n.subComponentStyles,h=function(y){if(r.hasOwnProperty(y)){var _=r[y];f[y]=function(E){return vr.apply(void 0,_.map(function(v){return typeof v=="function"?v(E):v}))}}};for(var s in r)h(s)}return n}function vi(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return _v(e,Xa())}function _v(e,t){var n={subComponentStyles:{}},r=e[0];if(!r&&e.length<=1)return{subComponentStyles:{}};var o=vr.apply(void 0,e),i=[];for(var a in o)if(o.hasOwnProperty(a)){if(a==="subComponentStyles"){n.subComponentStyles=o.subComponentStyles||{};continue}var l=o[a],u=av(l),s=u.classes,d=u.objects;if(d!=null&&d.length){var c=gv(t||{},{displayName:a},d);c&&(i.push(c),n[a]=s.concat([c.className]).join(" "))}else n[a]=s.join(" ")}for(var f=0,h=i;f<h.length;f++){var c=h[f];c&&yv(c,t==null?void 0:t.specificityMultiplier)}return n}function Cv(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=[],o=0,i=t;o<i.length;o++){var a=i[o];a&&r.push(typeof a=="function"?a(e):a)}return r.length===1?r[0]:r.length?vr.apply(void 0,r):{}}function Ev(e){var t=bt.getInstance(),n=$s(Xa(),e),r=t.classNameFromKey(n);if(!r){var o=t.getClassName();t.insertRule("@font-face{"+n+"}",!0),t.cacheClassName(o,n,[],["font-face",n])}}function It(e){var t=bt.getInstance(),n=[];for(var r in e)e.hasOwnProperty(r)&&n.push(r,"{",$s(Xa(),e[r]),"}");var o=n.join(""),i=t.classNameFromKey(o);if(i)return i;var a=t.getClassName();return t.insertRule("@keyframes "+a+"{"+o+"}",!0),t.cacheClassName(a,o,[],["keyframes",o]),a}function f0(e){var t={},n=function(o){if(e.hasOwnProperty(o)){var i;Object.defineProperty(t,o,{get:function(){return i===void 0&&(i=fn(e[o]).toString()),i},enumerable:!0,configurable:!0})}};for(var r in e)n(r);return t}function Gs(){return typeof window<"u"&&!!(window.document&&window.document.createElement)}var Qs=void 0;try{Qs=window}catch{}function me(e){if(!(!Gs()||typeof Qs>"u")){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:Qs}}var el=function(){function e(t,n){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=t||null,this._onErrorHandler=n,this._noop=function(){}}return e.prototype.dispose=function(){var t;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(t in this._timeoutIds)this._timeoutIds.hasOwnProperty(t)&&this.clearTimeout(parseInt(t,10));this._timeoutIds=null}if(this._immediateIds){for(t in this._immediateIds)this._immediateIds.hasOwnProperty(t)&&this.clearImmediate(parseInt(t,10));this._immediateIds=null}if(this._intervalIds){for(t in this._intervalIds)this._intervalIds.hasOwnProperty(t)&&this.clearInterval(parseInt(t,10));this._intervalIds=null}if(this._animationFrameIds){for(t in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(t)&&this.cancelAnimationFrame(parseInt(t,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(t,n){var r=this,o=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),o=setTimeout(function(){try{r._timeoutIds&&delete r._timeoutIds[o],t.apply(r._parent)}catch(i){r._logError(i)}},n),this._timeoutIds[o]=!0),o},e.prototype.clearTimeout=function(t){this._timeoutIds&&this._timeoutIds[t]&&(clearTimeout(t),delete this._timeoutIds[t])},e.prototype.setImmediate=function(t,n){var r=this,o=0,i=me(n);if(!this._isDisposed){this._immediateIds||(this._immediateIds={});var a=function(){try{r._immediateIds&&delete r._immediateIds[o],t.apply(r._parent)}catch(l){r._logError(l)}};o=i.setTimeout(a,0),this._immediateIds[o]=!0}return o},e.prototype.clearImmediate=function(t,n){var r=me(n);this._immediateIds&&this._immediateIds[t]&&(r.clearTimeout(t),delete this._immediateIds[t])},e.prototype.setInterval=function(t,n){var r=this,o=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),o=setInterval(function(){try{t.apply(r._parent)}catch(i){r._logError(i)}},n),this._intervalIds[o]=!0),o},e.prototype.clearInterval=function(t){this._intervalIds&&this._intervalIds[t]&&(clearInterval(t),delete this._intervalIds[t])},e.prototype.throttle=function(t,n,r){var o=this;if(this._isDisposed)return this._noop;var i=n||0,a=!0,l=!0,u=0,s,d,c=null;r&&typeof r.leading=="boolean"&&(a=r.leading),r&&typeof r.trailing=="boolean"&&(l=r.trailing);var f=function(y){var _=Date.now(),E=_-u,v=a?i-E:i;return E>=i&&(!y||a)?(u=_,c&&(o.clearTimeout(c),c=null),s=t.apply(o._parent,d)):c===null&&l&&(c=o.setTimeout(f,v)),s},h=function(){for(var y=[],_=0;_<arguments.length;_++)y[_]=arguments[_];return d=y,f(!0)};return h},e.prototype.debounce=function(t,n,r){var o=this;if(this._isDisposed){var i=function(){};return i.cancel=function(){},i.flush=function(){return null},i.pending=function(){return!1},i}var a=n||0,l=!1,u=!0,s=null,d=0,c=Date.now(),f,h,y=null;r&&typeof r.leading=="boolean"&&(l=r.leading),r&&typeof r.trailing=="boolean"&&(u=r.trailing),r&&typeof r.maxWait=="number"&&!isNaN(r.maxWait)&&(s=r.maxWait);var _=function(S){y&&(o.clearTimeout(y),y=null),c=S},E=function(S){_(S),f=t.apply(o._parent,h)},v=function(S){var x=Date.now(),b=!1;S&&(l&&x-d>=a&&(b=!0),d=x);var T=x-d,P=a-T,W=x-c,H=!1;return s!==null&&(W>=s&&y?H=!0:P=Math.min(P,s-W)),T>=a||H||b?E(x):(y===null||!S)&&u&&(y=o.setTimeout(v,P)),f},p=function(){return!!y},m=function(){p()&&_(Date.now())},C=function(){return p()&&E(Date.now()),f},w=function(){for(var S=[],x=0;x<arguments.length;x++)S[x]=arguments[x];return h=S,v(!0)};return w.cancel=m,w.flush=C,w.pending=p,w},e.prototype.requestAnimationFrame=function(t,n){var r=this,o=0,i=me(n);if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var a=function(){try{r._animationFrameIds&&delete r._animationFrameIds[o],t.apply(r._parent)}catch(l){r._logError(l)}};o=i.requestAnimationFrame?i.requestAnimationFrame(a):i.setTimeout(a,0),this._animationFrameIds[o]=!0}return o},e.prototype.cancelAnimationFrame=function(t,n){var r=me(n);this._animationFrameIds&&this._animationFrameIds[t]&&(r.cancelAnimationFrame?r.cancelAnimationFrame(t):r.clearTimeout(t),delete this._animationFrameIds[t])},e.prototype._logError=function(t){this._onErrorHandler&&this._onErrorHandler(t)},e}();function Ys(e,t){if(!e||!t)return!e&&!t;for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(var n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}function hr(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return p0.apply(this,[null,e].concat(t))}function p0(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];t=t||{};for(var o=0,i=n;o<i.length;o++){var a=i[o];if(a)for(var l in a)a.hasOwnProperty(l)&&(!e||e(l))&&(t[l]=a[l])}return t}var pn=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,r,o){var i;if(e._isElement(t)){if(typeof document<"u"&&document.createEvent){var a=document.createEvent("HTMLEvents");a.initEvent(n,o||!1,!0),hr(a,r),i=t.dispatchEvent(a)}else if(typeof document<"u"&&document.createEventObject){var l=document.createEventObject(r);t.fireEvent("on"+n,l)}}else for(;t&&i!==!1;){var u=t.__events__,s=u?u[n]:null;if(s){for(var d in s)if(s.hasOwnProperty(d))for(var c=s[d],f=0;i!==!1&&f<c.length;f++){var h=c[f];h.objectCallback&&(i=h.objectCallback.call(h.parent,r))}}t=o?t.parent:null}return i},e.isObserved=function(t,n){var r=t&&t.__events__;return!!r&&!!r[n]},e.isDeclared=function(t,n){var r=t&&t.__declaredEvents;return!!r&&!!r[n]},e.stopPropagation=function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},e._isElement=function(t){return!!t&&(!!t.addEventListener||typeof HTMLElement<"u"&&t instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(t,n,r){for(var o in n)n.hasOwnProperty(o)&&this.on(t,o,n[o],r)},e.prototype.on=function(t,n,r,o){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),l=0;l<a.length;l++)this.on(t,a[l],r,o);else{var u=this._parent,s={target:t,eventName:n,parent:u,callback:r,options:o},a=t.__events__=t.__events__||{};if(a[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(s),a[n].count++,e._isElement(t)){var d=function(){for(var h=[],y=0;y<arguments.length;y++)h[y]=arguments[y];if(!i._isDisposed){var _;try{if(_=r.apply(u,h),_===!1&&h[0]){var E=h[0];E.preventDefault&&E.preventDefault(),E.stopPropagation&&E.stopPropagation(),E.cancelBubble=!0}}catch{}return _}};s.elementCallback=d,t.addEventListener?t.addEventListener(n,d,o):t.attachEvent&&t.attachEvent("on"+n,d)}else{var c=function(){for(var h=[],y=0;y<arguments.length;y++)h[y]=arguments[y];if(!i._isDisposed)return r.apply(u,h)};s.objectCallback=c}this._eventRecords.push(s)}},e.prototype.off=function(t,n,r,o){for(var i=0;i<this._eventRecords.length;i++){var a=this._eventRecords[i];if((!t||t===a.target)&&(!n||n===a.eventName)&&(!r||r===a.callback)&&(typeof o!="boolean"||o===a.options)){var l=a.target.__events__,u=l[a.eventName],s=u?u[this._id]:null;s&&(s.length===1||!r?(u.count-=s.length,delete l[a.eventName][this._id]):(u.count--,s.splice(s.indexOf(a),1)),u.count||delete l[a.eventName]),a.elementCallback&&(a.target.removeEventListener?a.target.removeEventListener(a.eventName,a.elementCallback,a.options):a.target.detachEvent&&a.target.detachEvent("on"+a.eventName,a.elementCallback)),this._eventRecords.splice(i--,1)}}},e.prototype.raise=function(t,n,r){return e.raise(this._parent,t,n,r)},e.prototype.declare=function(t){var n=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if(typeof t=="string")n[t]=!0;else for(var r=0;r<t.length;r++)n[t[r]]=!0},e._uniqueId=0,e}();function ft(e){if(!(!Gs()||typeof document>"u")){var t=e;return t&&t.ownerDocument?t.ownerDocument:document}}var qs;fn({overflow:"hidden !important"});var xv="data-is-scrollable";function v0(){if(qs===void 0){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),qs=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return qs}function h0(e){for(var t=e,n=ft(e);t&&t!==n.body;){if(t.getAttribute(xv)==="true")return t;t=t.parentElement}for(t=e;t&&t!==n.body;){if(t.getAttribute(xv)!=="false"){var r=getComputedStyle(t),o=r?r.getPropertyValue("overflow-y"):"";if(o&&(o==="scroll"||o==="auto"))return t}t=t.parentElement}return(!t||t===n.body)&&(t=me(e)),t}var m0=void 0;function g0(e){console&&console.warn&&console.warn(e)}function kv(e,t,n,r,o){if(o===!0&&!1)for(var i,a;i<a.length;i++)var l}function ok(e,t,n){}function ik(e,t,n){}(function(e){dt(t,e);function t(n,r){var o=e.call(this,n,r)||this;return y0(o,t.prototype,["componentDidMount","shouldComponentUpdate","getSnapshotBeforeUpdate","render","componentDidUpdate","componentWillUnmount"]),o}return t.prototype.componentDidUpdate=function(n,r){this._updateComponentRef(n,this.props)},t.prototype.componentDidMount=function(){this._setComponentRef(this.props.componentRef,this)},t.prototype.componentWillUnmount=function(){if(this._setComponentRef(this.props.componentRef,null),this.__disposables){for(var n=0,r=this._disposables.length;n<r;n++){var o=this.__disposables[n];o.dispose&&o.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var n=/function (.{1,})\(/,r=n.exec(this.constructor.toString());this.__className=r&&r.length>1?r[1]:""}return this.__className},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new el(this),this._disposables.push(this.__async)),this.__async},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new pn(this),this._disposables.push(this.__events)),this.__events},enumerable:!1,configurable:!0}),t.prototype._resolveRef=function(n){var r=this;return this.__resolves||(this.__resolves={}),this.__resolves[n]||(this.__resolves[n]=function(o){return r[n]=o}),this.__resolves[n]},t.prototype._updateComponentRef=function(n,r){r===void 0&&(r={}),n&&r&&n.componentRef!==r.componentRef&&(this._setComponentRef(n.componentRef,null),this._setComponentRef(r.componentRef,this))},t.prototype._warnDeprecations=function(n){this.className,this.props},t.prototype._warnMutuallyExclusive=function(n){this.className,this.props},t.prototype._warnConditionallyRequiredProps=function(n,r,o){kv(this.className,this.props,n,r,o)},t.prototype._setComponentRef=function(n,r){!this._skipComponentRefResolution&&n&&(typeof n=="function"&&n(r),typeof n=="object"&&(n.current=r))},t})(g.exports.Component);function y0(e,t,n){for(var r=0,o=n.length;r<o;r++)_0(e,t,n[r])}function _0(e,t,n){var r=e[n],o=t[n];(r||o)&&(e[n]=function(){for(var i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var l;return o&&(l=o.apply(this,i)),r!==o&&(l=r.apply(this,i)),l})}function Xs(){return null}var Zs="__globalSettings__",Js="__callbacks__",C0=0,wv=function(){function e(){}return e.getValue=function(t,n){var r=ec();return r[t]===void 0&&(r[t]=typeof n=="function"?n():n),r[t]},e.setValue=function(t,n){var r=ec(),o=r[Js],i=r[t];if(n!==i){r[t]=n;var a={oldValue:i,value:n,key:t};for(var l in o)o.hasOwnProperty(l)&&o[l](a)}return n},e.addChangeListener=function(t){var n=t.__id__,r=Sv();n||(n=t.__id__=String(C0++)),r[n]=t},e.removeChangeListener=function(t){var n=Sv();delete n[t.__id__]},e}();function ec(){var e,t=me(),n=t||{};return n[Zs]||(n[Zs]=(e={},e[Js]={},e)),n[Zs]}function Sv(){var e=ec();return e[Js]}var O={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pauseBreak:19,capslock:20,escape:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,del:46,zero:48,one:49,two:50,three:51,four:52,five:53,six:54,seven:55,eight:56,nine:57,colon:58,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftWindow:91,rightWindow:92,select:93,zero_numpad:96,one_numpad:97,two_numpad:98,three_numpad:99,four_numpad:100,five_numpad:101,six_numpad:102,seven_numpad:103,eight_numpad:104,nine_numpad:105,multiply:106,add:107,subtract:109,decimalPoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrollLock:145,semicolon:186,equalSign:187,comma:188,dash:189,period:190,forwardSlash:191,graveAccent:192,openBracket:219,backSlash:220,closeBracket:221,singleQuote:222},Gt=function(){function e(t,n,r,o){t===void 0&&(t=0),n===void 0&&(n=0),r===void 0&&(r=0),o===void 0&&(o=0),this.top=r,this.bottom=o,this.left=t,this.right=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!1,configurable:!0}),e.prototype.equals=function(t){return parseFloat(this.top.toFixed(4))===parseFloat(t.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(t.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(t.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(t.right.toFixed(4))},e}();function E0(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.length<2?t[0]:function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t.forEach(function(i){return i&&i.apply(e,r)})}}function hi(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter(function(r){return r}).join(" ").trim();return n===""?void 0:n}function x0(e,t,n){var r=e.slice();return r.splice(t,0,n),r}function k0(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function bv(e){var t=null;try{var n=me();t=n?n.sessionStorage.getItem(e):null}catch{}return t}function w0(e,t){var n;try{(n=me())===null||n===void 0||n.sessionStorage.setItem(e,t)}catch{}}var Iv="isRTL",vn;function Ze(e){if(e===void 0&&(e={}),e.rtl!==void 0)return e.rtl;if(vn===void 0){var t=bv(Iv);t!==null&&(vn=t==="1",S0(vn));var n=ft();vn===void 0&&n&&(vn=(n.body&&n.body.getAttribute("dir")||n.documentElement.getAttribute("dir"))==="rtl",lv(vn))}return!!vn}function S0(e,t){t===void 0&&(t=!1);var n=ft();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr"),t&&w0(Iv,e?"1":"0"),vn=e,lv(vn)}function b0(e){return e&&!!e._virtual}function I0(e){var t;return e&&b0(e)&&(t=e._virtual.parent),t}function Qt(e,t){return t===void 0&&(t=!0),e&&(t&&I0(e)||e.parentNode&&e.parentNode)}function jn(e,t,n){n===void 0&&(n=!0);var r=!1;if(e&&t)if(n)if(e===t)r=!0;else for(r=!1;t;){var o=Qt(t);if(o===e){r=!0;break}t=o}else e.contains&&(r=e.contains(t));return r}function tc(e,t){return!e||e===document.body?null:t(e)?e:tc(Qt(e),t)}function T0(e,t){var n=tc(e,function(r){return r.hasAttribute(t)});return n&&n.getAttribute(t)}var nc="data-portal-element";function M0(e){e.setAttribute(nc,"true")}function Tv(e,t){var n=tc(e,function(r){return t===r||r.hasAttribute(nc)});return n!==null&&n.hasAttribute(nc)}function P0(e,t){var n=e,r=t;n._virtual||(n._virtual={children:[]});var o=n._virtual.parent;if(o&&o!==t){var i=o._virtual.children.indexOf(n);i>-1&&o._virtual.children.splice(i,1)}n._virtual.parent=r||void 0,r&&(r._virtual||(r._virtual={children:[]}),r._virtual.children.push(n))}var D0="data-is-focusable",N0="data-is-visible",B0="data-focuszone-id",R0="data-is-sub-focuszone";function L0(e,t,n){return vt(e,t,!0,!1,!1,n)}function O0(e,t,n){return pt(e,t,!0,!1,!0,n)}function F0(e,t){var n=vt(e,e,!0,!1,!1,!0,void 0,void 0,t);return n?(z0(n),!0):!1}function pt(e,t,n,r,o,i,a,l){if(!t||!a&&t===e)return null;var u=tl(t);if(o&&u&&(i||!(hn(t)||rc(t)))){var s=pt(e,t.lastElementChild,!0,!0,!0,i,a,l);if(s){if(l&&Yt(s,!0)||!l)return s;var d=pt(e,s.previousElementSibling,!0,!0,!0,i,a,l);if(d)return d;for(var c=s.parentElement;c&&c!==t;){var f=pt(e,c.previousElementSibling,!0,!0,!0,i,a,l);if(f)return f;c=c.parentElement}}}if(n&&u&&Yt(t,l))return t;var h=pt(e,t.previousElementSibling,!0,!0,!0,i,a,l);return h||(r?null:pt(e,t.parentElement,!0,!1,!1,i,a,l))}function vt(e,t,n,r,o,i,a,l,u){if(!t||t===e&&o&&!a)return null;var s=u?Mv:tl,d=s(t);if(n&&d&&Yt(t,l))return t;if(!o&&d&&(i||!(hn(t)||rc(t)))){var c=vt(e,t.firstElementChild,!0,!0,!1,i,a,l,u);if(c)return c}if(t===e)return null;var f=vt(e,t.nextElementSibling,!0,!0,!1,i,a,l,u);return f||(r?null:vt(e,t.parentElement,!1,!1,!0,i,a,l,u))}function tl(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute(N0);return t!=null?t==="true":e.offsetHeight!==0||e.offsetParent!==null||e.isVisible===!0}function Mv(e){return!!e&&tl(e)&&!e.hidden&&window.getComputedStyle(e).visibility!=="hidden"}function Yt(e,t){if(!e||e.disabled)return!1;var n=0,r=null;e&&e.getAttribute&&(r=e.getAttribute("tabIndex"),r&&(n=parseInt(r,10)));var o=e.getAttribute?e.getAttribute(D0):null,i=r!==null&&n>=0,a=!!e&&o!=="false"&&(e.tagName==="A"||e.tagName==="BUTTON"||e.tagName==="INPUT"||e.tagName==="TEXTAREA"||e.tagName==="SELECT"||o==="true"||i);return t?n!==-1&&a:a}function hn(e){return!!(e&&e.getAttribute&&!!e.getAttribute(B0))}function rc(e){return!!(e&&e.getAttribute&&e.getAttribute(R0)==="true")}function A0(e){var t=ft(e),n=t&&t.activeElement;return!!(n&&jn(e,n))}function Pv(e,t){return T0(e,t)!=="true"}var so=void 0;function z0(e){if(e){if(so){so=e;return}so=e;var t=me(e);t&&t.requestAnimationFrame(function(){so&&so.focus(),so=void 0})}}function H0(e,t){for(var n=e,r=0,o=t;r<o.length;r++){var i=o[r],a=n.children[Math.min(i,n.children.length-1)];if(!a)break;n=a}return n=Yt(n)&&tl(n)?n:vt(e,n,!0)||pt(e,n),n}function U0(e,t){for(var n=[];t&&e&&t!==e;){var r=Qt(t,!0);if(r===null)return[];n.unshift(Array.prototype.indexOf.call(r.children,t)),t=r}return n}function co(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}var W0=50,K0=5,nl=0,oc=bt.getInstance();oc&&oc.onReset&&oc.onReset(function(){return nl++});var rl="__retval__";function Vn(e){e===void 0&&(e={});var t=new Map,n=0,r=0,o=nl,i=function(a,l){var u;if(l===void 0&&(l={}),e.useStaticStyles&&typeof a=="function"&&a.__noStyleOverride__)return a(l);r++;var s=t,d=l.theme,c=d&&d.rtl!==void 0?d.rtl:Ze(),f=e.disableCaching;if(o!==nl&&(o=nl,t=new Map,n=0),e.disableCaching||(s=Dv(t,a),s=Dv(s,l)),(f||!s[rl])&&(a===void 0?s[rl]={}:s[rl]=_v([typeof a=="function"?a(l):a],{rtl:!!c,specificityMultiplier:e.useStaticStyles?K0:void 0}),f||n++),n>(e.cacheSize||W0)){var h=me();!((u=h==null?void 0:h.FabricConfig)===null||u===void 0)&&u.enableClassNameCacheFullWarning&&(console.warn("Styles are being recalculated too frequently. Cache miss rate is "+n+"/"+r+"."),console.trace()),t.clear(),n=0,e.disableCaching=!0}return s[rl]};return i}function ic(e,t){return t=j0(t),e.has(t)||e.set(t,new Map),e.get(t)}function Dv(e,t){if(typeof t=="function"){var n=t.__cachedInputs__;if(n)for(var r=0,o=t.__cachedInputs__;r<o.length;r++){var i=o[r];e=ic(e,i)}else e=ic(e,t)}else if(typeof t=="object")for(var a in t)t.hasOwnProperty(a)&&(e=ic(e,t[a]));return e}function j0(e){switch(e){case void 0:return"__undefined__";case null:return"__null__";default:return e}}var Nv=!1,ol=0,V0={empty:!0},ac={},mi=typeof WeakMap>"u"?null:WeakMap;function $0(){ol++}function ke(e,t,n){if(t===void 0&&(t=100),n===void 0&&(n=!1),!mi)return e;if(!Nv){var r=bt.getInstance();r&&r.onReset&&bt.getInstance().onReset($0),Nv=!0}var o,i=0,a=ol;return function(){for(var u=[],s=0;s<arguments.length;s++)u[s]=arguments[s];var d=o;(o===void 0||a!==ol||t>0&&i>t)&&(o=Bv(),i=0,a=ol),d=o;for(var c=0;c<u.length;c++){var f=G0(u[c]);d.map.has(f)||d.map.set(f,Bv()),d=d.map.get(f)}return d.hasOwnProperty("value")||(d.value=e.apply(void 0,u),i++),n&&(d.value===null||d.value===void 0)&&(d.value=e.apply(void 0,u)),d.value}}function fo(e){if(!mi)return e;var t=new mi;function n(r){if(!r||typeof r!="function"&&typeof r!="object")return e(r);if(t.has(r))return t.get(r);var o=e(r);return t.set(r,o),o}return n}function G0(e){if(e){if(typeof e=="object"||typeof e=="function")return e;ac[e]||(ac[e]={val:e})}else return V0;return ac[e]}function Bv(){return{map:mi?new mi:null}}function Q0(e){var t=e,n=fo(function(r){if(e===r)throw new Error("Attempted to compose a component with itself.");var o=r,i=fo(function(l){var u=function(s){return g.exports.createElement(o,k({},s,{defaultRender:l}))};return u}),a=function(l){var u=l.defaultRender;return g.exports.createElement(t,k({},l,{defaultRender:u?i(u):o}))};return a});return n}var Y0=fo(Q0);function q0(e,t){return Y0(e)(t)}function At(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],r=0,o=e;r<o.length;r++){var i=o[r];if(i)if(typeof i=="string")n.push(i);else if(i.hasOwnProperty("toString")&&typeof i.toString=="function")n.push(i.toString());else for(var a in i)i[a]&&n.push(a)}return n.join(" ")}var X0="customizations",Z0={settings:{},scopedSettings:{},inCustomizerContext:!1},$n=wv.getValue(X0,{settings:{},scopedSettings:{},inCustomizerContext:!1}),il=[],zt=function(){function e(){}return e.reset=function(){$n.settings={},$n.scopedSettings={}},e.applySettings=function(t){$n.settings=k(k({},$n.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){$n.scopedSettings[t]=k(k({},$n.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(t,n,r){r===void 0&&(r=Z0);for(var o={},i=n&&r.scopedSettings[n]||{},a=n&&$n.scopedSettings[n]||{},l=0,u=t;l<u.length;l++){var s=u[l];o[s]=i[s]||r.settings[s]||a[s]||$n.settings[s]}return o},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch{}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(t){il.push(t)},e.unobserve=function(t){il=il.filter(function(n){return n!==t})},e._raiseChange=function(){e._suppressUpdates||il.forEach(function(t){return t()})},e}(),al=g.exports.createContext({customizations:{inCustomizerContext:!1,settings:{},scopedSettings:{}}});function J0(e,t){e===void 0&&(e={});var n=Rv(t)?t:t_(t);return n(e)}function e_(e,t){e===void 0&&(e={});var n=Rv(t)?t:n_(t);return n(e)}function Rv(e){return typeof e=="function"}function t_(e){return function(t){return e?k(k({},t),e):t}}function n_(e){return e===void 0&&(e={}),function(t){var n=k({},t);for(var r in e)e.hasOwnProperty(r)&&(n[r]=k(k({},t[r]),e[r]));return n}}function r_(e,t){var n=(t||{}).customizations,r=n===void 0?{settings:{},scopedSettings:{}}:n;return{customizations:{settings:J0(r.settings,e.settings),scopedSettings:e_(r.scopedSettings,e.scopedSettings),inCustomizerContext:!0}}}var o_=function(e){dt(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n._onCustomizationChange=function(){return n.forceUpdate()},n}return t.prototype.componentDidMount=function(){zt.observe(this._onCustomizationChange)},t.prototype.componentWillUnmount=function(){zt.unobserve(this._onCustomizationChange)},t.prototype.render=function(){var n=this,r=this.props.contextTransform;return g.exports.createElement(al.Consumer,null,function(o){var i=r_(n.props,o);return r&&(i=r(i)),g.exports.createElement(al.Provider,{value:i},n.props.children)})},t}(g.exports.Component);function i_(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function Lv(e,t,n){return function(o){var i,a=(i=function(l){dt(u,l);function u(s){var d=l.call(this,s)||this;return d._styleCache={},d._onSettingChanged=d._onSettingChanged.bind(d),d}return u.prototype.componentDidMount=function(){zt.observe(this._onSettingChanged)},u.prototype.componentWillUnmount=function(){zt.unobserve(this._onSettingChanged)},u.prototype.render=function(){var s=this;return g.exports.createElement(al.Consumer,null,function(d){var c=zt.getSettings(t,e,d.customizations),f=s.props;if(c.styles&&typeof c.styles=="function"&&(c.styles=c.styles(k(k({},c),f))),n&&c.styles){if(s._styleCache.default!==c.styles||s._styleCache.component!==f.styles){var h=vr(c.styles,f.styles);s._styleCache.default=c.styles,s._styleCache.component=f.styles,s._styleCache.merged=h}return g.exports.createElement(o,k({},c,f,{styles:s._styleCache.merged}))}return g.exports.createElement(o,k({},c,f))})},u.prototype._onSettingChanged=function(){this.forceUpdate()},u}(g.exports.Component),i.displayName="Customized"+e,i);return i_(o,a)}}function a_(e,t){var n=l_(),r=g.exports.useContext(al).customizations,o=r.inCustomizerContext;return g.exports.useEffect(function(){return o||zt.observe(n),function(){o||zt.unobserve(n)}},[o]),zt.getSettings(e,t,r)}function l_(){var e=g.exports.useState(0),t=e[1];return function(){return t(function(n){return++n})}}function u_(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=E0(e,e[n],t[n]))}var ll="__currentId__",s_="id__",ul=me()||{};ul[ll]===void 0&&(ul[ll]=0);var Ov=!1;function mn(e){if(!Ov){var t=bt.getInstance();t&&t.onReset&&t.onReset(c_),Ov=!0}var n=ul[ll]++;return(e===void 0?s_:e)+n}function c_(e){e===void 0&&(e=0),ul[ll]=e}var pe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},r=0,o=e;r<o.length;r++)for(var i=o[r],a=Array.isArray(i)?i:Object.keys(i),l=0,u=a;l<u.length;l++){var s=u[l];n[s]=1}return n},d_=pe(["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onPointerCancel","onPointerDown","onPointerEnter","onPointerLeave","onPointerMove","onPointerOut","onPointerOver","onPointerUp","onGotPointerCapture","onLostPointerCapture"]),f_=pe(["accessKey","children","className","contentEditable","dir","draggable","hidden","htmlFor","id","lang","ref","role","style","tabIndex","title","translate","spellCheck","name"]),ge=pe(f_,d_);pe(ge,["form"]);var p_=pe(ge,["height","loop","muted","preload","src","width"]);pe(p_,["poster"]),pe(ge,["start"]),pe(ge,["value"]);var Fv=pe(ge,["download","href","hrefLang","media","rel","target","type"]),mr=pe(ge,["autoFocus","disabled","form","formAction","formEncType","formMethod","formNoValidate","formTarget","type","value"]);pe(mr,["accept","alt","autoCapitalize","autoComplete","checked","dirname","form","height","inputMode","list","max","maxLength","min","minLength","multiple","pattern","placeholder","readOnly","required","src","step","size","type","value","width"]),pe(mr,["autoCapitalize","cols","dirname","form","maxLength","minLength","placeholder","readOnly","required","rows","wrap"]),pe(mr,["form","multiple","required"]),pe(ge,["selected","value"]),pe(ge,["cellPadding","cellSpacing"]),pe(ge,["rowSpan","scope"]),pe(ge,["colSpan","headers","rowSpan","scope"]),pe(ge,["span"]),pe(ge,["span"]),pe(ge,["acceptCharset","action","encType","encType","method","noValidate","target"]),pe(ge,["allow","allowFullScreen","allowPaymentRequest","allowTransparency","csp","height","importance","referrerPolicy","sandbox","src","srcDoc","width"]);var v_=pe(ge,["alt","crossOrigin","height","src","srcSet","useMap","width"]),sl=ge;function He(e,t,n){for(var r=Array.isArray(t),o={},i=Object.keys(e),a=0,l=i;a<l.length;a++){var u=l[a],s=!r&&t[u]||r&&t.indexOf(u)>=0||u.indexOf("data-")===0||u.indexOf("aria-")===0;s&&(!n||(n==null?void 0:n.indexOf(u))===-1)&&(o[u]=e[u])}return o}function cl(e){u_(e,{componentDidMount:h_,componentDidUpdate:m_,componentWillUnmount:g_})}function h_(){dl(this.props.componentRef,this)}function m_(e){e.componentRef!==this.props.componentRef&&(dl(e.componentRef,null),dl(this.props.componentRef,this))}function g_(){dl(this.props.componentRef,null)}function dl(e,t){e&&(typeof e=="object"?e.current=t:typeof e=="function"&&e(t))}var Ht,y_=(Ht={},Ht[O.up]=1,Ht[O.down]=1,Ht[O.left]=1,Ht[O.right]=1,Ht[O.home]=1,Ht[O.end]=1,Ht[O.tab]=1,Ht[O.pageUp]=1,Ht[O.pageDown]=1,Ht);function Av(e){return!!y_[e]}var Ue="ms-Fabric--isFocusVisible",zv="ms-Fabric--isFocusHidden";function Hv(e,t){e&&(e.classList.add(t?Ue:zv),e.classList.remove(t?zv:Ue))}function gr(e,t,n){var r;n?n.forEach(function(o){return Hv(o.current,e)}):Hv((r=me(t))===null||r===void 0?void 0:r.document.body,e)}var Uv=new WeakMap,Wv=new WeakMap;function Kv(e,t){var n,r=Uv.get(e);return r?n=r+t:n=1,Uv.set(e,n),n}function __(e){var t=Wv.get(e);if(t)return t;var n=function(a){return Vv(a,e.registeredProviders)},r=function(a){return $v(a,e.registeredProviders)},o=function(a){return Gv(a,e.registeredProviders)},i=function(a){return Qv(a,e.registeredProviders)};return t={onMouseDown:n,onPointerDown:r,onKeyDown:o,onKeyUp:i},Wv.set(e,t),t}var fl=g.exports.createContext(void 0);function C_(e){var t=g.exports.useContext(fl);g.exports.useEffect(function(){var n,r,o=me(e==null?void 0:e.current);if(!(!o||((n=o.FabricConfig)===null||n===void 0?void 0:n.disableFocusRects)===!0)){var i=o,a,l,u,s;if(!((r=t==null?void 0:t.providerRef)===null||r===void 0)&&r.current){i=t.providerRef.current;var d=__(t);a=d.onMouseDown,l=d.onPointerDown,u=d.onKeyDown,s=d.onKeyUp}else a=Vv,l=$v,u=Gv,s=Qv;var c=Kv(i,1);return c<=1&&(i.addEventListener("mousedown",a,!0),i.addEventListener("pointerdown",l,!0),i.addEventListener("keydown",u,!0),i.addEventListener("keyup",s,!0)),function(){var f;!o||((f=o.FabricConfig)===null||f===void 0?void 0:f.disableFocusRects)===!0||(c=Kv(i,-1),c===0&&(i.removeEventListener("mousedown",a,!0),i.removeEventListener("pointerdown",l,!0),i.removeEventListener("keydown",u,!0),i.removeEventListener("keyup",s,!0)))}}},[t,e])}var jv=function(e){return C_(e.rootRef),null};function Vv(e,t){gr(!1,e.target,t)}function $v(e,t){e.pointerType!=="mouse"&&gr(!1,e.target,t)}function Gv(e,t){Av(e.which)&&gr(!0,e.target,t)}function Qv(e,t){Av(e.which)&&gr(!0,e.target,t)}var Yv=function(e){var t=e.providerRef,n=e.layerRoot,r=g.exports.useState([])[0],o=g.exports.useContext(fl),i=o!==void 0&&!n,a=g.exports.useMemo(function(){return i?void 0:{providerRef:t,registeredProviders:r,registerProvider:function(l){r.push(l),o==null||o.registerProvider(l)},unregisterProvider:function(l){o==null||o.unregisterProvider(l);var u=r.indexOf(l);u>=0&&r.splice(u,1)}}},[t,r,o,i]);return g.exports.useEffect(function(){if(a)return a.registerProvider(a.providerRef),function(){return a.unregisterProvider(a.providerRef)}},[a]),a?g.exports.createElement(fl.Provider,{value:a},e.children):g.exports.createElement(g.exports.Fragment,null,e.children)};function E_(e){var t=null;try{var n=me();t=n?n.localStorage.getItem(e):null}catch{}return t}var yr,qv="language";function x_(e){if(e===void 0&&(e="sessionStorage"),yr===void 0){var t=ft(),n=e==="localStorage"?E_(qv):e==="sessionStorage"?bv(qv):void 0;n&&(yr=n),yr===void 0&&t&&(yr=t.documentElement.getAttribute("lang")),yr===void 0&&(yr="en")}return yr}function Xv(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=t;r<o.length;r++){var i=o[r];Zv(e||{},i)}return e}function Zv(e,t,n){n===void 0&&(n=[]),n.push(t);for(var r in t)if(t.hasOwnProperty(r)&&r!=="__proto__"&&r!=="constructor"&&r!=="prototype"){var o=t[r];if(typeof o=="object"&&o!==null&&!Array.isArray(o)){var i=n.indexOf(o)>-1;e[r]=i?o:Zv(e[r]||{},o,n)}else e[r]=o}return n.pop(),e}var Jv=function(){return!window||!window.navigator||!window.navigator.userAgent?!1:/iPad|iPhone|iPod/i.test(window.navigator.userAgent)},k_=["TEMPLATE","STYLE","SCRIPT"];function w_(e){var t=ft(e);if(!t)return function(){};for(var n=[];e!==t.body&&e.parentElement;){for(var r=0,o=e.parentElement.children;r<o.length;r++){var i=o[r],a=i.getAttribute("aria-hidden");i!==e&&(a==null?void 0:a.toLowerCase())!=="true"&&k_.indexOf(i.tagName)===-1&&n.push([i,a])}e=e.parentElement}return n.forEach(function(l){var u=l[0];u.setAttribute("aria-hidden","true")}),function(){S_(n),n=[]}}function S_(e){e.forEach(function(t){var n=t[0],r=t[1];r?n.setAttribute("aria-hidden",r):n.removeAttribute("aria-hidden")})}var lc;function eh(e){var t;if(typeof lc>"u"||e){var n=me(),r=(t=n==null?void 0:n.navigator)===null||t===void 0?void 0:t.userAgent;lc=!!r&&r.indexOf("Macintosh")!==-1}return!!lc}function b_(e){var t=fo(function(n){var r=fo(function(o){return function(i){return n(i,o)}});return function(o,i){return e(o,i?r(i):n)}});return t}var I_=fo(b_);function T_(e,t){return I_(e)(t)}var M_=["theme","styles"];function Gn(e,t,n,r,o){r=r||{scope:"",fields:void 0};var i=r.scope,a=r.fields,l=a===void 0?M_:a,u=g.exports.forwardRef(function(d,c){var f=g.exports.useRef(),h=a_(l,i),y=h.styles;h.dir;var _=oo(h,["styles","dir"]),E=n?n(d):void 0,v=f.current&&f.current.__cachedInputs__||[],p=d.styles;if(!f.current||y!==v[1]||p!==v[2]){var m=function(C){return Cv(C,t,y,p)};m.__cachedInputs__=[t,y,p],m.__noStyleOverride__=!y&&!p,f.current=m}return g.exports.createElement(e,k({ref:c},_,E,d,{styles:f.current}))});u.displayName="Styled"+(e.displayName||e.name);var s=o?g.exports.memo(u):u;return u.displayName&&(s.displayName=u.displayName),s}function uc(e,t){for(var n=k({},t),r=0,o=Object.keys(e);r<o.length;r++){var i=o[r];n[i]===void 0&&(n[i]=e[i])}return n}var P_=function(e){return function(t){for(var n=0,r=e.refs;n<r.length;n++){var o=r[n];typeof o=="function"?o(t):o&&(o.current=t)}}},th=function(e){var t={refs:[]};return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(!t.resolver||!k0(t.refs,n))&&(t.resolver=P_(t)),t.refs=n,t.resolver}},gi=Gs()?g.exports.useLayoutEffect:g.exports.useEffect,D_="icons",_r=wv.getValue(D_,{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}}),sc=bt.getInstance();sc&&sc.onReset&&sc.onReset(function(){for(var e in _r)_r.hasOwnProperty(e)&&!!_r[e].subset&&(_r[e].subset.className=void 0)});var N_=function(e){return e.toLowerCase()};function B_(e){var t=void 0,n=_r.__options;if(e=e?N_(e):"",e=_r.__remapped[e]||e,e)if(t=_r[e],t){var r=t.subset;r&&r.fontFace&&(r.isRegistered||(Ev(r.fontFace),r.isRegistered=!0),r.className||(r.className=fn(r.style,{fontFamily:r.fontFace.fontFamily,fontWeight:r.fontFace.fontWeight||"normal",fontStyle:r.fontFace.fontStyle||"normal"})))}else!n.disableWarnings&&n.warnOnMissingIcons&&g0('The icon "'+e+'" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');return t}function R_(e,t,n,r,o){o===void 0&&(o=!1);var i=k({primaryButtonBorder:"transparent",errorText:r?"#F1707B":"#a4262c",messageText:r?"#F3F2F1":"#323130",messageLink:r?"#6CB8F6":"#005A9E",messageLinkHovered:r?"#82C7FF":"#004578",infoIcon:r?"#C8C6C4":"#605e5c",errorIcon:r?"#F1707B":"#A80000",blockingIcon:r?"#442726":"#FDE7E9",warningIcon:r?"#C8C6C4":"#797775",severeWarningIcon:r?"#FCE100":"#D83B01",successIcon:r?"#92C353":"#107C10",infoBackground:r?"#323130":"#f3f2f1",errorBackground:r?"#442726":"#FDE7E9",blockingBackground:r?"#442726":"#FDE7E9",warningBackground:r?"#433519":"#FFF4CE",severeWarningBackground:r?"#4F2A0F":"#FED9CC",successBackground:r?"#393D1B":"#DFF6DD",warningHighlight:r?"#fff100":"#ffb900",successText:r?"#92c353":"#107C10"},n),a=nh(e,t,i,r);return L_(a,o)}function nh(e,t,n,r,o){var i={},a=e||{},l=a.white,u=a.black,s=a.themePrimary,d=a.themeDark,c=a.themeDarker,f=a.themeDarkAlt,h=a.themeLighter,y=a.neutralLight,_=a.neutralLighter,E=a.neutralDark,v=a.neutralQuaternary,p=a.neutralQuaternaryAlt,m=a.neutralPrimary,C=a.neutralSecondary,w=a.neutralSecondaryAlt,S=a.neutralTertiary,x=a.neutralTertiaryAlt,b=a.neutralLighterAlt,T=a.accent;return l&&(i.bodyBackground=l,i.bodyFrameBackground=l,i.accentButtonText=l,i.buttonBackground=l,i.primaryButtonText=l,i.primaryButtonTextHovered=l,i.primaryButtonTextPressed=l,i.inputBackground=l,i.inputForegroundChecked=l,i.listBackground=l,i.menuBackground=l,i.cardStandoutBackground=l),u&&(i.bodyTextChecked=u,i.buttonTextCheckedHovered=u),s&&(i.link=s,i.primaryButtonBackground=s,i.inputBackgroundChecked=s,i.inputIcon=s,i.inputFocusBorderAlt=s,i.menuIcon=s,i.menuHeader=s,i.accentButtonBackground=s),d&&(i.primaryButtonBackgroundPressed=d,i.inputBackgroundCheckedHovered=d,i.inputIconHovered=d),c&&(i.linkHovered=c),f&&(i.primaryButtonBackgroundHovered=f),h&&(i.inputPlaceholderBackgroundChecked=h),y&&(i.bodyBackgroundChecked=y,i.bodyFrameDivider=y,i.bodyDivider=y,i.variantBorder=y,i.buttonBackgroundCheckedHovered=y,i.buttonBackgroundPressed=y,i.listItemBackgroundChecked=y,i.listHeaderBackgroundPressed=y,i.menuItemBackgroundPressed=y,i.menuItemBackgroundChecked=y),_&&(i.bodyBackgroundHovered=_,i.buttonBackgroundHovered=_,i.buttonBackgroundDisabled=_,i.buttonBorderDisabled=_,i.primaryButtonBackgroundDisabled=_,i.disabledBackground=_,i.listItemBackgroundHovered=_,i.listHeaderBackgroundHovered=_,i.menuItemBackgroundHovered=_),v&&(i.primaryButtonTextDisabled=v,i.disabledSubtext=v),p&&(i.listItemBackgroundCheckedHovered=p),S&&(i.disabledBodyText=S,i.variantBorderHovered=(n==null?void 0:n.variantBorderHovered)||S,i.buttonTextDisabled=S,i.inputIconDisabled=S,i.disabledText=S),m&&(i.bodyText=m,i.actionLink=m,i.buttonText=m,i.inputBorderHovered=m,i.inputText=m,i.listText=m,i.menuItemText=m),b&&(i.bodyStandoutBackground=b,i.defaultStateBackground=b),E&&(i.actionLinkHovered=E,i.buttonTextHovered=E,i.buttonTextChecked=E,i.buttonTextPressed=E,i.inputTextHovered=E,i.menuItemTextHovered=E),C&&(i.bodySubtext=C,i.focusBorder=C,i.inputBorder=C,i.smallInputBorder=C,i.inputPlaceholderText=C),w&&(i.buttonBorder=w),x&&(i.disabledBodySubtext=x,i.disabledBorder=x,i.buttonBackgroundChecked=x,i.menuDivider=x),T&&(i.accentButtonBackground=T),t!=null&&t.elevation4&&(i.cardShadow=t.elevation4),!r&&(t==null?void 0:t.elevation8)?i.cardShadowHovered=t.elevation8:i.variantBorderHovered&&(i.cardShadowHovered="0 0 1px "+i.variantBorderHovered),i=k(k({},i),n),i}function L_(e,t){var n="";return t===!0&&(n=" /* @deprecated */"),e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}function O_(e,t){var n,r,o;t===void 0&&(t={});var i=Xv({},e,t,{semanticColors:nh(t.palette,t.effects,t.semanticColors,t.isInverted===void 0?e.isInverted:t.isInverted)});if(((n=t.palette)===null||n===void 0?void 0:n.themePrimary)&&!(!((r=t.palette)===null||r===void 0)&&r.accent)&&(i.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var a=0,l=Object.keys(i.fonts);a<l.length;a++){var u=l[a];i.fonts[u]=Xv(i.fonts[u],t.defaultFontStyle,(o=t==null?void 0:t.fonts)===null||o===void 0?void 0:o[u])}return i}var rh={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"},po;(function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"})(po||(po={}));var oh={elevation4:po.depth4,elevation8:po.depth8,elevation16:po.depth16,elevation64:po.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"},F_={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"},ee="cubic-bezier(.1,.9,.2,1)",Tt="cubic-bezier(.1,.25,.75,.9)",pl="0.167s",ih="0.267s",Y="0.367s",ah="0.467s",we=It({from:{opacity:0},to:{opacity:1}}),Se=It({from:{opacity:1},to:{opacity:0,visibility:"hidden"}}),A_=Qn(-10),z_=Qn(-20),H_=Qn(-40),U_=Qn(-400),W_=Qn(10),K_=Qn(20),j_=Qn(40),V_=Qn(400),$_=vl(10),G_=vl(20),Q_=vl(-10),Y_=vl(-20),q_=Yn(10),X_=Yn(20),Z_=Yn(40),J_=Yn(400),e1=Yn(-10),t1=Yn(-20),n1=Yn(-40),r1=Yn(-400),o1=hl(-10),i1=hl(-20),a1=hl(10),l1=hl(20),u1=It({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),s1=It({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),c1=It({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),d1=It({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),f1=It({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),p1=It({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}}),v1={slideRightIn10:A(we+","+A_,Y,ee),slideRightIn20:A(we+","+z_,Y,ee),slideRightIn40:A(we+","+H_,Y,ee),slideRightIn400:A(we+","+U_,Y,ee),slideLeftIn10:A(we+","+W_,Y,ee),slideLeftIn20:A(we+","+K_,Y,ee),slideLeftIn40:A(we+","+j_,Y,ee),slideLeftIn400:A(we+","+V_,Y,ee),slideUpIn10:A(we+","+$_,Y,ee),slideUpIn20:A(we+","+G_,Y,ee),slideDownIn10:A(we+","+Q_,Y,ee),slideDownIn20:A(we+","+Y_,Y,ee),slideRightOut10:A(Se+","+q_,Y,ee),slideRightOut20:A(Se+","+X_,Y,ee),slideRightOut40:A(Se+","+Z_,Y,ee),slideRightOut400:A(Se+","+J_,Y,ee),slideLeftOut10:A(Se+","+e1,Y,ee),slideLeftOut20:A(Se+","+t1,Y,ee),slideLeftOut40:A(Se+","+n1,Y,ee),slideLeftOut400:A(Se+","+r1,Y,ee),slideUpOut10:A(Se+","+o1,Y,ee),slideUpOut20:A(Se+","+i1,Y,ee),slideDownOut10:A(Se+","+a1,Y,ee),slideDownOut20:A(Se+","+l1,Y,ee),scaleUpIn100:A(we+","+u1,Y,ee),scaleDownIn100:A(we+","+c1,Y,ee),scaleUpOut103:A(Se+","+d1,pl,Tt),scaleDownOut98:A(Se+","+s1,pl,Tt),fadeIn100:A(we,pl,Tt),fadeIn200:A(we,ih,Tt),fadeIn400:A(we,Y,Tt),fadeIn500:A(we,ah,Tt),fadeOut100:A(Se,pl,Tt),fadeOut200:A(Se,ih,Tt),fadeOut400:A(Se,Y,Tt),fadeOut500:A(Se,ah,Tt),rotate90deg:A(f1,"0.1s",Tt),rotateN90deg:A(p1,"0.1s",Tt)};function A(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function Qn(e){return It({from:{transform:"translate3d("+e+"px,0,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function vl(e){return It({from:{transform:"translate3d(0,"+e+"px,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function Yn(e){return It({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function hl(e){return It({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var ce;(function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"})(ce||(ce={}));var $;(function(e){e.Arabic="'"+ce.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+ce.Cyrillic+"'",e.EastEuropean="'"+ce.EastEuropean+"'",e.Greek="'"+ce.Greek+"'",e.Hebrew="'"+ce.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+ce.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+ce.Vietnamese+"'",e.WestEuropean="'"+ce.WestEuropean+"'",e.Armenian="'"+ce.Armenian+"'",e.Georgian="'"+ce.Georgian+"'"})($||($={}));var We;(function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"})(We||(We={}));var ie;(function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700})(ie||(ie={}));var qn;(function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"})(qn||(qn={}));var h1="'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",m1="'Segoe UI', '"+ce.WestEuropean+"'",cc={ar:$.Arabic,bg:$.Cyrillic,cs:$.EastEuropean,el:$.Greek,et:$.EastEuropean,he:$.Hebrew,hi:$.Hindi,hr:$.EastEuropean,hu:$.EastEuropean,ja:$.Japanese,kk:$.EastEuropean,ko:$.Korean,lt:$.EastEuropean,lv:$.EastEuropean,pl:$.EastEuropean,ru:$.Cyrillic,sk:$.EastEuropean,"sr-latn":$.EastEuropean,th:$.Thai,tr:$.EastEuropean,uk:$.Cyrillic,vi:$.Vietnamese,"zh-hans":$.ChineseSimplified,"zh-hant":$.ChineseTraditional,hy:$.Armenian,ka:$.Georgian};function g1(e){return e+", "+h1}function y1(e){for(var t in cc)if(cc.hasOwnProperty(t)&&e&&t.indexOf(e)===0)return cc[t];return m1}function ht(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}function _1(e){var t=y1(e),n=g1(t),r={tiny:ht(We.mini,ie.regular,n),xSmall:ht(We.xSmall,ie.regular,n),small:ht(We.small,ie.regular,n),smallPlus:ht(We.smallPlus,ie.regular,n),medium:ht(We.medium,ie.regular,n),mediumPlus:ht(We.mediumPlus,ie.regular,n),large:ht(We.large,ie.regular,n),xLarge:ht(We.xLarge,ie.semibold,n),xLargePlus:ht(We.xLargePlus,ie.semibold,n),xxLarge:ht(We.xxLarge,ie.semibold,n),xxLargePlus:ht(We.xxLargePlus,ie.semibold,n),superLarge:ht(We.superLarge,ie.semibold,n),mega:ht(We.mega,ie.semibold,n)};return r}var C1="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets",E1=_1(x_());function Cr(e,t,n,r){e="'"+e+"'";var o=r!==void 0?"local('"+r+"'),":"";Ev({fontFamily:e,src:o+("url('"+t+".woff2') format('woff2'),")+("url('"+t+".woff') format('woff')"),fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function Ut(e,t,n,r,o){r===void 0&&(r="segoeui");var i=e+"/"+n+"/"+r;Cr(t,i+"-light",ie.light,o&&o+" Light"),Cr(t,i+"-semilight",ie.semilight,o&&o+" SemiLight"),Cr(t,i+"-regular",ie.regular,o),Cr(t,i+"-semibold",ie.semibold,o&&o+" SemiBold"),Cr(t,i+"-bold",ie.bold,o&&o+" Bold")}function x1(e){if(e){var t=e+"/fonts";Ut(t,ce.Thai,"leelawadeeui-thai","leelawadeeui"),Ut(t,ce.Arabic,"segoeui-arabic"),Ut(t,ce.Cyrillic,"segoeui-cyrillic"),Ut(t,ce.EastEuropean,"segoeui-easteuropean"),Ut(t,ce.Greek,"segoeui-greek"),Ut(t,ce.Hebrew,"segoeui-hebrew"),Ut(t,ce.Vietnamese,"segoeui-vietnamese"),Ut(t,ce.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),Ut(t,$.Selawik,"selawik","selawik"),Ut(t,ce.Armenian,"segoeui-armenian"),Ut(t,ce.Georgian,"segoeui-georgian"),Cr("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",ie.light),Cr("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",ie.semibold)}}function k1(){var e,t,n=(e=me())===null||e===void 0?void 0:e.FabricConfig;return(t=n==null?void 0:n.fontBaseUrl)!==null&&t!==void 0?t:C1}x1(k1());function yi(e,t){e===void 0&&(e={}),t===void 0&&(t=!1);var n=!!e.isInverted,r={palette:rh,effects:oh,fonts:E1,spacing:F_,isInverted:n,disableGlobalClassNames:!1,semanticColors:R_(rh,oh,void 0,n,t),rtl:void 0};return O_(r,e)}var K="@media screen and (-ms-high-contrast: active), screen and (forced-colors: active)",w1=640,lh=w1-1;function uh(e,t){var n=typeof e=="number"?" and (min-width: "+e+"px)":"",r=typeof t=="number"?" and (max-width: "+t+"px)":"";return"@media only screen"+n+r}function Er(){return{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}}var _i;(function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001})(_i||(_i={}));function vo(e,t,n,r,o,i,a,l){return typeof t=="number"||!t?sh(e,{inset:t,position:n,highContrastStyle:r,borderColor:o,outlineColor:i,isFocusedOnly:a,borderRadius:l}):sh(e,t)}function sh(e,t){var n,r;t===void 0&&(t={});var o=t.borderRadius,i=t.inset,a=i===void 0?0:i,l=t.width,u=l===void 0?1:l,s=t.position,d=s===void 0?"relative":s,c=t.highContrastStyle,f=t.borderColor,h=f===void 0?e.palette.white:f,y=t.outlineColor,_=y===void 0?e.palette.neutralSecondary:y,E=t.isFocusedOnly,v=E===void 0?!0:E,p=t.pointerEvents;return{outline:"transparent",position:d,selectors:(n={"::-moz-focus-inner":{border:"0"}},n["."+Ue+" &"+(v?":focus":"")+":after"]={content:'""',position:"absolute",pointerEvents:p,left:a+1,top:a+1,bottom:a+1,right:a+1,border:u+"px solid "+h,outline:u+"px solid "+_,zIndex:_i.FocusStyle,borderRadius:o,selectors:(r={},r[K]=c,r)},n)}}function S1(){return{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}}}var ch={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden",whiteSpace:"nowrap"},b1=ke(function(e,t){var n=bt.getInstance();return t?Object.keys(e).reduce(function(r,o){return r[o]=n.getClassName(e[o]),r},{}):e});function xr(e,t,n){return b1(e,n!==void 0?n:t.disableGlobalClassNames)}var ho=globalThis&&globalThis.__assign||function(){return ho=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},ho.apply(this,arguments)},Ci=typeof window>"u"?global:window,dh=Ci&&Ci.CSPSettings&&Ci.CSPSettings.nonce,mt=I1();function I1(){var e=Ci.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]};return e.runState||(e=ho(ho({},e),{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}})),e.registeredThemableStyles||(e=ho(ho({},e),{registeredThemableStyles:[]})),Ci.__themeState__=e,e}function T1(e,t){mt.loadStyles?mt.loadStyles(ph(e).styleString,e):N1(e)}function M1(e){mt.theme=e,D1()}function P1(e){e===void 0&&(e=3),(e===3||e===2)&&(fh(mt.registeredStyles),mt.registeredStyles=[]),(e===3||e===1)&&(fh(mt.registeredThemableStyles),mt.registeredThemableStyles=[])}function fh(e){e.forEach(function(t){var n=t&&t.styleElement;n&&n.parentElement&&n.parentElement.removeChild(n)})}function D1(){if(mt.theme){for(var e=[],t=0,n=mt.registeredThemableStyles;t<n.length;t++){var r=n[t];e.push(r.themableStyle)}e.length>0&&(P1(1),T1([].concat.apply([],e)))}}function ph(e){var t=mt.theme,n=!1,r=(e||[]).map(function(o){var i=o.theme;if(i){n=!0;var a=t?t[i]:void 0,l=o.defaultValue||"inherit";return t&&!a&&console&&!(i in t)&&typeof DEBUG<"u"&&DEBUG&&console.warn('Theming value not provided for "'.concat(i,'". Falling back to "').concat(l,'".')),a||l}else return o.rawString});return{styleString:r.join(""),themable:n}}function N1(e){if(!(typeof document>"u")){var t=document.getElementsByTagName("head")[0],n=document.createElement("style"),r=ph(e),o=r.styleString,i=r.themable;n.setAttribute("data-load-themed-styles","true"),dh&&n.setAttribute("nonce",dh),n.appendChild(document.createTextNode(o)),mt.perf.count++,t.appendChild(n);var a=document.createEvent("HTMLEvents");a.initEvent("styleinsert",!0,!1),a.args={newStyle:n},document.dispatchEvent(a);var l={styleElement:n,themableStyle:e};i?mt.registeredThemableStyles.push(l):mt.registeredStyles.push(l)}}var Mt=yi({}),B1=[],dc="theme";function vh(){var e,t,n,r=me();!((t=r==null?void 0:r.FabricConfig)===null||t===void 0)&&t.legacyTheme?L1(r.FabricConfig.legacyTheme):zt.getSettings([dc]).theme||(!((n=r==null?void 0:r.FabricConfig)===null||n===void 0)&&n.theme&&(Mt=yi(r.FabricConfig.theme)),zt.applySettings((e={},e[dc]=Mt,e)))}vh();function R1(e){return e===void 0&&(e=!1),e===!0&&(Mt=yi({},e)),Mt}function L1(e,t){var n;return t===void 0&&(t=!1),Mt=yi(e,t),M1(k(k(k(k({},Mt.palette),Mt.semanticColors),Mt.effects),O1(Mt))),zt.applySettings((n={},n[dc]=Mt,n)),B1.forEach(function(r){try{r(Mt)}catch{}}),Mt}function O1(e){for(var t={},n=0,r=Object.keys(e.fonts);n<r.length;n++)for(var o=r[n],i=e.fonts[o],a=0,l=Object.keys(i);a<l.length;a++){var u=l[a],s=o+u.charAt(0).toUpperCase()+u.slice(1),d=i[u];u==="fontSize"&&typeof d=="number"&&(d=d+"px"),t[s]=d}return t}var Ei=f0(v1);rv("@fluentui/style-utilities","8.9.6"),vh();var ye={topLeftEdge:0,topCenter:1,topRightEdge:2,topAutoEdge:3,bottomLeftEdge:4,bottomCenter:5,bottomRightEdge:6,bottomAutoEdge:7,leftTopEdge:8,leftCenter:9,leftBottomEdge:10,rightTopEdge:11,rightCenter:12,rightBottomEdge:13},R;(function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"})(R||(R={}));var hh;(function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"})(hh||(hh={}));var Re;function Je(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var mh=(Re={},Re[ye.topLeftEdge]=Je(R.top,R.left),Re[ye.topCenter]=Je(R.top),Re[ye.topRightEdge]=Je(R.top,R.right),Re[ye.topAutoEdge]=Je(R.top,void 0,!0),Re[ye.bottomLeftEdge]=Je(R.bottom,R.left),Re[ye.bottomCenter]=Je(R.bottom),Re[ye.bottomRightEdge]=Je(R.bottom,R.right),Re[ye.bottomAutoEdge]=Je(R.bottom,void 0,!0),Re[ye.leftTopEdge]=Je(R.left,R.top),Re[ye.leftCenter]=Je(R.left),Re[ye.leftBottomEdge]=Je(R.left,R.bottom),Re[ye.rightTopEdge]=Je(R.right,R.top),Re[ye.rightCenter]=Je(R.right),Re[ye.rightBottomEdge]=Je(R.right,R.bottom),Re);function fc(e,t){return!(e.top<t.top||e.bottom>t.bottom||e.left<t.left||e.right>t.right)}function ml(e,t){var n=[];return e.top<t.top&&n.push(R.top),e.bottom>t.bottom&&n.push(R.bottom),e.left<t.left&&n.push(R.left),e.right>t.right&&n.push(R.right),n}function Le(e,t){return e[R[t]]}function gh(e,t,n){return e[R[t]]=n,e}function xi(e,t){var n=go(t);return(Le(e,n.positiveEdge)+Le(e,n.negativeEdge))/2}function gl(e,t){return e>0?t:t*-1}function pc(e,t){return gl(e,Le(t,e))}function gn(e,t,n){var r=Le(e,n)-Le(t,n);return gl(n,r)}function mo(e,t,n,r){r===void 0&&(r=!0);var o=Le(e,t)-n,i=gh(e,t,n);return r&&(i=gh(e,t*-1,Le(e,t*-1)-o)),i}function ki(e,t,n,r){return r===void 0&&(r=0),mo(e,n,Le(t,n)+gl(n,r))}function F1(e,t,n,r){r===void 0&&(r=0);var o=n*-1,i=gl(o,r);return mo(e,n*-1,Le(t,n)+i)}function yl(e,t,n){var r=pc(n,e);return r>pc(n,t)}function A1(e,t){for(var n=ml(e,t),r=0,o=0,i=n;o<i.length;o++){var a=i[o];r+=Math.pow(gn(e,t,a),2)}return r}function z1(e,t,n,r,o){o===void 0&&(o=0);var i=[R.left,R.right,R.bottom,R.top];Ze()&&(i[0]*=-1,i[1]*=-1);for(var a=e,l=r.targetEdge,u=r.alignmentEdge,s,d=l,c=u,f=0;f<4;f++){if(yl(a,n,l))return{elementRectangle:a,targetEdge:l,alignmentEdge:u};var h=A1(a,n);(!s||h<s)&&(s=h,d=l,c=u),i.splice(i.indexOf(l),1),i.length>0&&(i.indexOf(l*-1)>-1?l=l*-1:(u=l,l=i.slice(-1)[0]),a=_l(e,t,{targetEdge:l,alignmentEdge:u},o))}return a=_l(e,t,{targetEdge:d,alignmentEdge:c},o),{elementRectangle:a,targetEdge:d,alignmentEdge:c}}function H1(e,t,n,r){var o=e.alignmentEdge,i=e.targetEdge,a=e.elementRectangle,l=o*-1,u=_l(a,t,{targetEdge:i,alignmentEdge:l},n,r);return{elementRectangle:u,targetEdge:i,alignmentEdge:l}}function U1(e,t,n,r,o,i,a){o===void 0&&(o=0);var l=r.alignmentEdge,u=r.alignTargetEdge,s={elementRectangle:e,targetEdge:r.targetEdge,alignmentEdge:l};!i&&!a&&(s=z1(e,t,n,r,o));var d=ml(s.elementRectangle,n),c=i?-s.targetEdge:void 0;if(d.length>0)if(u)if(s.alignmentEdge&&d.indexOf(s.alignmentEdge*-1)>-1){var f=H1(s,t,o,a);if(fc(f.elementRectangle,n))return f;s=vc(ml(f.elementRectangle,n),s,n,c)}else s=vc(d,s,n,c);else s=vc(d,s,n,c);return s}function vc(e,t,n,r){for(var o=0,i=e;o<i.length;o++){var a=i[o],l=void 0;if(r&&r===a*-1)l=mo(t.elementRectangle,a,Le(n,a),!1),t.forcedInBounds=!0;else{l=ki(t.elementRectangle,n,a);var u=yl(l,n,a*-1);u||(l=mo(l,a*-1,Le(n,a*-1),!1),t.forcedInBounds=!0)}t.elementRectangle=l}return t}function yh(e,t,n){var r=go(t).positiveEdge,o=xi(e,t),i=o-Le(e,r);return mo(e,r,n-i)}function _l(e,t,n,r,o){r===void 0&&(r=0);var i=new Gt(e.left,e.right,e.top,e.bottom),a=n.alignmentEdge,l=n.targetEdge,u=o?l:l*-1;if(i=o?ki(i,t,l,r):F1(i,t,l,r),a)i=ki(i,t,a);else{var s=xi(t,l);i=yh(i,u,s)}return i}function go(e){return e===R.top||e===R.bottom?{positiveEdge:R.left,negativeEdge:R.right}:{positiveEdge:R.top,negativeEdge:R.bottom}}function _h(e,t,n){return n&&Math.abs(gn(e,n,t))>Math.abs(gn(e,n,t*-1))?t*-1:t}function W1(e,t,n){return n!==void 0&&Le(e,t)===Le(n,t)}function K1(e,t,n,r,o,i,a,l){var u={},s=hc(t),d=i?n:n*-1,c=o||go(n).positiveEdge;return(!a||W1(e,rC(c),r))&&(c=_h(e,c,r)),u[R[d]]=gn(e,s,d),u[R[c]]=gn(e,s,c),l&&(u[R[d*-1]]=gn(e,s,d*-1),u[R[c*-1]]=gn(e,s,c*-1)),u}function j1(e){return Math.sqrt(e*e*2)}function V1(e,t,n){if(e===void 0&&(e=ye.bottomAutoEdge),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var r=k({},mh[e]);return Ze()?(r.alignmentEdge&&r.alignmentEdge%2===0&&(r.alignmentEdge=r.alignmentEdge*-1),t!==void 0?mh[t]:r):r}function $1(e,t,n,r,o){return e.isAuto&&(e.alignmentEdge=Ch(e.targetEdge,t,n)),e.alignTargetEdge=o,e}function Ch(e,t,n){var r=xi(t,e),o=xi(n,e),i=go(e),a=i.positiveEdge,l=i.negativeEdge;return r<=o?a:l}function G1(e,t,n,r,o,i,a){var l=_l(e,t,r,o,a);return fc(l,n)?{elementRectangle:l,targetEdge:r.targetEdge,alignmentEdge:r.alignmentEdge}:U1(l,t,n,r,o,i,a)}function Q1(e,t,n){var r=e.targetEdge*-1,o=new Gt(0,e.elementRectangle.width,0,e.elementRectangle.height),i={},a=_h(e.elementRectangle,e.alignmentEdge?e.alignmentEdge:go(r).positiveEdge,n),l=gn(e.elementRectangle,e.targetRectangle,r),u=l>Math.abs(Le(t,r));return i[R[r]]=Le(t,r),i[R[a]]=gn(t,o,a),{elementPosition:k({},i),closestEdge:Ch(e.targetEdge,t,o),targetEdge:r,hideBeak:!u}}function Y1(e,t){var n=t.targetRectangle,r=go(t.targetEdge),o=r.positiveEdge,i=r.negativeEdge,a=xi(n,t.targetEdge),l=new Gt(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),u=new Gt(0,e,0,e);return u=mo(u,t.targetEdge*-1,-e/2),u=yh(u,t.targetEdge*-1,a-pc(o,t.elementRectangle)),yl(u,l,o)?yl(u,l,i)||(u=ki(u,l,i)):u=ki(u,l,o),u}function hc(e){var t=e.getBoundingClientRect();return new Gt(t.left,t.right,t.top,t.bottom)}function q1(e){return new Gt(e.left,e.right,e.top,e.bottom)}function X1(e,t){var n;if(t){if(t.preventDefault){var r=t;n=new Gt(r.clientX,r.clientX,r.clientY,r.clientY)}else if(t.getBoundingClientRect)n=hc(t);else{var o=t,i=o.left||o.x,a=o.top||o.y,l=o.right||i,u=o.bottom||a;n=new Gt(i,l,a,u)}if(!fc(n,e))for(var s=ml(n,e),d=0,c=s;d<c.length;d++){var f=c[d];n[R[f]]=e[R[f]]}}else n=new Gt(0,0,0,0);return n}function Z1(e,t,n,r){var o=e.gapSpace?e.gapSpace:0,i=X1(n,e.target),a=$1(V1(e.directionalHint,e.directionalHintForRTL,r),i,n,e.coverTarget,e.alignTargetEdge),l=G1(hc(t),i,n,a,o,e.directionalHintFixed,e.coverTarget);return k(k({},l),{targetRectangle:i})}function J1(e,t,n,r,o){var i=K1(e.elementRectangle,t,e.targetEdge,n,e.alignmentEdge,r,o,e.forcedInBounds);return{elementPosition:i,targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}function Eh(e,t,n,r,o){var i=e.isBeakVisible&&e.beakWidth||0,a=j1(i)/2+(e.gapSpace?e.gapSpace:0),l=e;l.gapSpace=a;var u=e.bounds?q1(e.bounds):new Gt(0,window.innerWidth-v0(),0,window.innerHeight),s=Z1(l,n,u,r),d=Y1(i,s),c=Q1(s,d,u);return k(k({},J1(s,t,u,e.coverTarget,o)),{beakPosition:c})}function eC(e,t,n,r){return Eh(e,t,n,r,!0)}function tC(e,t,n,r){return Eh(e,t,n,r)}function nC(e,t,n,r){return eC(e,t,n,r)}function rC(e){return e*-1}function oC(e,t){var n=void 0;if(t.getWindowSegments&&(n=t.getWindowSegments()),n===void 0||n.length<=1)return{top:0,left:0,right:t.innerWidth,bottom:t.innerHeight,width:t.innerWidth,height:t.innerHeight};var r=0,o=0;if(e!==null&&!!e.getBoundingClientRect){var i=e.getBoundingClientRect();r=(i.left+i.right)/2,o=(i.top+i.bottom)/2}else e!==null&&(r=e.left||e.x,o=e.top||e.y);for(var a={top:0,left:0,right:0,bottom:0,width:0,height:0},l=0,u=n;l<u.length;l++){var s=u[l];r&&s.left<=r&&s.right>=r&&o&&s.top<=o&&s.bottom>=o&&(a={top:s.top,left:s.left,right:s.right,bottom:s.bottom,width:s.width,height:s.height})}return a}function iC(e,t){return oC(e,t)}function yo(){var e=g.exports.useRef();return e.current||(e.current=new el),g.exports.useEffect(function(){return function(){var t;(t=e.current)===null||t===void 0||t.dispose(),e.current=void 0}},[]),e.current}function xh(e){var t=g.exports.useRef();return t.current===void 0&&(t.current={value:typeof e=="function"?e():e}),t.current.value}function kh(e,t){var n=g.exports.useRef(t);return n.current||(n.current=mn(e)),n.current}function _o(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=g.exports.useCallback(function(r){n.current=r;for(var o=0,i=e;o<i.length;o++){var a=i[o];typeof a=="function"?a(r):a&&(a.current=r)}},dn([],e));return n}function wi(e,t,n,r){var o=g.exports.useRef(n);o.current=n,g.exports.useEffect(function(){var i=e&&"current"in e?e.current:e;if(!!i){var a=co(i,t,function(l){return o.current(l)},r);return a}},[e,t,r])}function wh(e){var t=g.exports.useRef();return g.exports.useEffect(function(){t.current=e}),t.current}var aC=g.exports.createContext({window:typeof window=="object"?window:void 0}),mc=function(){return g.exports.useContext(aC).window};function Sh(e,t){var n=g.exports.useRef(),r=g.exports.useRef(null),o=mc();if(!e||e!==n.current||typeof e=="string"){var i=t==null?void 0:t.current;if(e)if(typeof e=="string"){var a=ft(i);r.current=a?a.querySelector(e):null}else"stopPropagation"in e||"getBoundingClientRect"in e?r.current=e:"current"in e?r.current=e.current:r.current=e;n.current=e}return[r,o]}function lC(e,t){var n=yo(),r=g.exports.useState(!1),o=r[0],i=r[1];return g.exports.useEffect(function(){return n.requestAnimationFrame(function(){var a;if(!(e.style&&e.style.overflowY)){var l=!1;if(t&&t.current&&((a=t.current)===null||a===void 0?void 0:a.firstElementChild)){var u=t.current.clientHeight,s=t.current.firstElementChild.clientHeight;u>0&&s>u&&(l=s-u>1)}o!==l&&i(l)}}),function(){return n.dispose()}}),o}function uC(e){var t=e.originalElement,n=e.containsFocus;t&&n&&t!==me()&&setTimeout(function(){var r;(r=t.focus)===null||r===void 0||r.call(t)},0)}function sC(e,t){var n=e.onRestoreFocus,r=n===void 0?uC:n,o=g.exports.useRef(),i=g.exports.useRef(!1);g.exports.useEffect(function(){return o.current=ft().activeElement,A0(t.current)&&(i.current=!0),function(){var a;r==null||r({originalElement:o.current,containsFocus:i.current,documentContainsFocus:((a=ft())===null||a===void 0?void 0:a.hasFocus())||!1}),o.current=void 0}},[]),wi(t,"focus",g.exports.useCallback(function(){i.current=!0},[]),!0),wi(t,"blur",g.exports.useCallback(function(a){t.current&&a.relatedTarget&&!t.current.contains(a.relatedTarget)&&(i.current=!1)},[]),!0)}function cC(e,t){var n=String(e["aria-modal"]).toLowerCase()==="true"&&e.enableAriaHiddenSiblings;g.exports.useEffect(function(){if(!!(n&&t.current)){var r=w_(t.current);return r}},[t,n])}var bh=g.exports.forwardRef(function(e,t){var n=uc({shouldRestoreFocus:!0,enableAriaHiddenSiblings:!0},e),r=g.exports.useRef(),o=_o(r,t);cC(n,r),sC(n,r);var i=n.role,a=n.className,l=n.ariaLabel,u=n.ariaLabelledBy,s=n.ariaDescribedBy,d=n.style,c=n.children,f=n.onDismiss,h=lC(n,r),y=g.exports.useCallback(function(E){switch(E.which){case O.escape:f&&(f(E),E.preventDefault(),E.stopPropagation());break}},[f]),_=mc();return wi(_,"keydown",y),g.exports.createElement("div",k({ref:o},He(n,sl),{className:a,role:i,"aria-label":l,"aria-labelledby":u,"aria-describedby":s,onKeyDown:y,style:k({overflowY:h?"scroll":void 0,outline:"none"},d)}),c)});bh.displayName="Popup";var Co,dC="CalloutContentBase",fC=(Co={},Co[R.top]=Ei.slideUpIn10,Co[R.bottom]=Ei.slideDownIn10,Co[R.left]=Ei.slideLeftIn10,Co[R.right]=Ei.slideRightIn10,Co),Ih={top:0,left:0},pC={opacity:0,filter:"opacity(0)",pointerEvents:"none"},vC=["role","aria-roledescription"],Th={preventDismissOnLostFocus:!1,preventDismissOnScroll:!1,preventDismissOnResize:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:ye.bottomAutoEdge},hC=Vn({disableCaching:!0});function mC(e,t,n){var r=e.bounds,o=e.minPagePadding,i=o===void 0?Th.minPagePadding:o,a=e.target,l=g.exports.useState(!1),u=l[0],s=l[1],d=g.exports.useRef(),c=g.exports.useCallback(function(){if(!d.current||u){var h=typeof r=="function"?n?r(a,n):void 0:r;!h&&n&&(h=iC(t.current,n),h={top:h.top+i,left:h.left+i,right:h.right-i,bottom:h.bottom-i,width:h.width-i*2,height:h.height-i*2}),d.current=h,u&&s(!1)}return d.current},[r,i,a,t,n,u]),f=yo();return wi(n,"resize",f.debounce(function(){s(!0)},500,{leading:!0})),c}function gC(e,t,n){var r,o=e.calloutMaxHeight,i=e.finalHeight,a=e.directionalHint,l=e.directionalHintFixed,u=e.hidden,s=g.exports.useState(),d=s[0],c=s[1],f=(r=n==null?void 0:n.elementPosition)!==null&&r!==void 0?r:{},h=f.top,y=f.bottom;return g.exports.useEffect(function(){var _,E=(_=t())!==null&&_!==void 0?_:{},v=E.top,p=E.bottom;!o&&!u?typeof h=="number"&&p?c(p-h):typeof y=="number"&&typeof v=="number"&&p&&c(p-v-y):c(o||void 0)},[y,o,i,a,l,t,u,n,h]),d}function yC(e,t,n,r,o){var i=g.exports.useState(),a=i[0],l=i[1],u=g.exports.useRef(0),s=g.exports.useRef(),d=yo(),c=e.hidden,f=e.target,h=e.finalHeight,y=e.calloutMaxHeight,_=e.onPositioned,E=e.directionalHint;return g.exports.useEffect(function(){if(c)l(void 0),u.current=0;else{var v=d.requestAnimationFrame(function(){var p,m;if(t.current&&n){var C=k(k({},e),{target:r.current,bounds:o()}),w=n.cloneNode(!0);w.style.maxHeight=y?""+y:"",w.style.visibility="hidden",(p=n.parentElement)===null||p===void 0||p.appendChild(w);var S=s.current===f?a:void 0,x=h?nC(C,t.current,w,S):tC(C,t.current,w,S);(m=n.parentElement)===null||m===void 0||m.removeChild(w),!a&&x||a&&x&&!xC(a,x)&&u.current<5?(u.current++,l(x)):u.current>0&&(u.current=0,_==null||_(a))}},n);return s.current=f,function(){d.cancelAnimationFrame(v),s.current=void 0}}},[c,E,d,n,y,t,r,h,o,_,a,e,f]),a}function _C(e,t,n){var r=e.hidden,o=e.setInitialFocus,i=yo(),a=!!t;g.exports.useEffect(function(){if(!r&&o&&a&&n){var l=i.requestAnimationFrame(function(){return F0(n)},n);return function(){return i.cancelAnimationFrame(l)}}},[r,a,i,n,o])}function CC(e,t,n,r,o){var i=e.hidden,a=e.onDismiss,l=e.preventDismissOnScroll,u=e.preventDismissOnResize,s=e.preventDismissOnLostFocus,d=e.dismissOnTargetClick,c=e.shouldDismissOnWindowFocus,f=e.preventDismissOnEvent,h=g.exports.useRef(!1),y=yo(),_=xh([function(){h.current=!0},function(){h.current=!1}]),E=!!t;return g.exports.useEffect(function(){var v=function(x){E&&!l&&C(x)},p=function(x){!u&&!(f&&f(x))&&(a==null||a(x))},m=function(x){s||C(x)},C=function(x){var b=x.composedPath?x.composedPath():[],T=b.length>0?b[0]:x.target,P=n.current&&!jn(n.current,T);if(P&&h.current){h.current=!1;return}if(!r.current&&P||x.target!==o&&P&&(!r.current||"stopPropagation"in r.current||d||T!==r.current&&!jn(r.current,T))){if(f&&f(x))return;a==null||a(x)}},w=function(x){!c||(f&&!f(x)||!f&&!s)&&!(o!=null&&o.document.hasFocus())&&x.relatedTarget===null&&(a==null||a(x))},S=new Promise(function(x){y.setTimeout(function(){if(!i&&o){var b=[co(o,"scroll",v,!0),co(o,"resize",p,!0),co(o.document.documentElement,"focus",m,!0),co(o.document.documentElement,"click",m,!0),co(o,"blur",w,!0)];x(function(){b.forEach(function(T){return T()})})}},0)});return function(){S.then(function(x){return x()})}},[i,y,n,r,o,a,c,d,s,u,l,E,f]),_}var Mh=g.exports.memo(g.exports.forwardRef(function(e,t){var n=uc(Th,e),r=n.styles,o=n.style,i=n.ariaLabel,a=n.ariaDescribedBy,l=n.ariaLabelledBy,u=n.className,s=n.isBeakVisible,d=n.children,c=n.beakWidth,f=n.calloutWidth,h=n.calloutMaxWidth,y=n.calloutMinWidth,_=n.doNotLayer,E=n.finalHeight,v=n.hideOverflow,p=v===void 0?!!E:v,m=n.backgroundColor,C=n.calloutMaxHeight,w=n.onScroll,S=n.shouldRestoreFocus,x=S===void 0?!0:S,b=n.target,T=n.hidden,P=n.onLayerMounted,W=n.popupProps,H=g.exports.useRef(null),ae=g.exports.useState(null),G=ae[0],te=ae[1],nt=g.exports.useCallback(function(Nc){te(Nc)},[]),Me=_o(H,t),D=Sh(n.target,{current:G}),B=D[0],L=D[1],q=mC(n,B,L),F=yC(n,H,G,B,q),gt=gC(n,q,F),rt=CC(n,F,H,B,L),Sr=rt[0],Pt=rt[1],Cn=(F==null?void 0:F.elementPosition.top)&&(F==null?void 0:F.elementPosition.bottom),Sl=k(k({},F==null?void 0:F.elementPosition),{maxHeight:gt});if(Cn&&(Sl.bottom=void 0),_C(n,F,G),g.exports.useEffect(function(){T||P==null||P()},[T]),!L)return null;var Eo=p,bl=s&&!!b,br=hC(r,{theme:n.theme,className:u,overflowYHidden:Eo,calloutWidth:f,positions:F,beakWidth:c,backgroundColor:m,calloutMaxWidth:h,calloutMinWidth:y,doNotLayer:_}),Ri=k(k({maxHeight:C||"100%"},o),Eo&&{overflowY:"hidden"}),xo=n.hidden?{visibility:"hidden"}:void 0;return g.exports.createElement("div",{ref:Me,className:br.container,style:xo},g.exports.createElement("div",k({},He(n,sl,vC),{className:At(br.root,F&&F.targetEdge&&fC[F.targetEdge]),style:F?k({},Sl):pC,tabIndex:-1,ref:nt}),bl&&g.exports.createElement("div",{className:br.beak,style:EC(F)}),bl&&g.exports.createElement("div",{className:br.beakCurtain}),g.exports.createElement(bh,k({role:n.role,"aria-roledescription":n["aria-roledescription"],ariaDescribedBy:a,ariaLabel:i,ariaLabelledBy:l,className:br.calloutMain,onDismiss:n.onDismiss,onMouseDown:Sr,onMouseUp:Pt,onRestoreFocus:n.onRestoreFocus,onScroll:w,shouldRestoreFocus:x,style:Ri},W),d)))}),function(e,t){return!t.shouldUpdateWhenHidden&&e.hidden&&t.hidden?!0:Ys(e,t)});function EC(e){var t,n,r=k(k({},(t=e==null?void 0:e.beakPosition)===null||t===void 0?void 0:t.elementPosition),{display:!((n=e==null?void 0:e.beakPosition)===null||n===void 0)&&n.hideBeak?"none":void 0});return!r.top&&!r.bottom&&!r.left&&!r.right&&(r.left=Ih.left,r.top=Ih.top),r}function xC(e,t){return Ph(e.elementPosition,t.elementPosition)&&Ph(e.beakPosition.elementPosition,t.beakPosition.elementPosition)}function Ph(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=e[n],o=t[n];if(r!==void 0&&o!==void 0){if(r.toFixed(2)!==o.toFixed(2))return!1}else return!1}return!0}Mh.displayName=dC;function kC(e){return{height:e,width:e}}var wC={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"},SC=function(e){var t,n=e.theme,r=e.className,o=e.overflowYHidden,i=e.calloutWidth,a=e.beakWidth,l=e.backgroundColor,u=e.calloutMaxWidth,s=e.calloutMinWidth,d=e.doNotLayer,c=xr(wC,n),f=n.semanticColors,h=n.effects;return{container:[c.container,{position:"relative"}],root:[c.root,n.fonts.medium,{position:"absolute",display:"flex",zIndex:d?_i.Layer:void 0,boxSizing:"border-box",borderRadius:h.roundedCorner2,boxShadow:h.elevation16,selectors:(t={},t[K]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},S1(),r,!!i&&{width:i},!!u&&{maxWidth:u},!!s&&{minWidth:s}],beak:[c.beak,{position:"absolute",backgroundColor:f.menuBackground,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},kC(a),l&&{backgroundColor:l}],beakCurtain:[c.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:f.menuBackground,borderRadius:h.roundedCorner2}],calloutMain:[c.calloutMain,{backgroundColor:f.menuBackground,overflowX:"hidden",overflowY:"auto",position:"relative",width:"100%",borderRadius:h.roundedCorner2},o&&{overflowY:"hidden"},l&&{backgroundColor:l}]}},bC=Gn(Mh,SC,void 0,{scope:"CalloutContent"});const Dh=g.exports.createContext(void 0),IC=()=>()=>{};Dh.Provider;function TC(){var e;return(e=g.exports.useContext(Dh))!==null&&e!==void 0?e:IC}var MC=Vn(),PC=ke(function(e,t){return yi(k(k({},e),{rtl:t}))}),DC=function(e){var t=e.theme,n=e.dir,r=Ze(t)?"rtl":"ltr",o=Ze()?"rtl":"ltr",i=n||r;return{rootDir:i!==r||i!==o?i:n,needsTheme:i!==r}},Nh=g.exports.forwardRef(function(e,t){var n=e.className,r=e.theme,o=e.applyTheme,i=e.applyThemeToBody,a=e.styles,l=MC(a,{theme:r,applyTheme:o,className:n}),u=g.exports.useRef(null);return BC(i,l,u),g.exports.createElement(g.exports.Fragment,null,NC(e,l,u,t))});Nh.displayName="FabricBase";function NC(e,t,n,r){var o=t.root,i=e.as,a=i===void 0?"div":i,l=e.dir,u=e.theme,s=He(e,sl,["dir"]),d=DC(e),c=d.rootDir,f=d.needsTheme,h=g.exports.createElement(Yv,{providerRef:n},g.exports.createElement(a,k({dir:c},s,{className:o,ref:_o(n,r)})));return f&&(h=g.exports.createElement(o_,{settings:{theme:PC(u,l==="rtl")}},h)),h}function BC(e,t,n){var r=t.bodyThemed;return g.exports.useEffect(function(){if(e){var o=ft(n.current);if(o)return o.body.classList.add(r),function(){o.body.classList.remove(r)}}},[r,e,n]),n}var gc={fontFamily:"inherit"},RC={root:"ms-Fabric",bodyThemed:"ms-Fabric-bodyThemed"},LC=function(e){var t=e.applyTheme,n=e.className,r=e.preventBlanketFontInheritance,o=e.theme,i=xr(RC,o);return{root:[i.root,o.fonts.medium,{color:o.palette.neutralPrimary},!r&&{"& button":gc,"& input":gc,"& textarea":gc},t&&{color:o.semanticColors.bodyText,backgroundColor:o.semanticColors.bodyBackground},n],bodyThemed:[{backgroundColor:o.semanticColors.bodyBackground}]}},OC=Gn(Nh,LC,void 0,{scope:"Fabric"}),Si={},yc={},Bh="fluent-default-layer-host",FC="#"+Bh;function AC(e,t){Si[e]||(Si[e]=[]),Si[e].push(t);var n=yc[e];if(n)for(var r=0,o=n;r<o.length;r++){var i=o[r];i.notifyLayersChanged()}}function zC(e,t){var n=Si[e];if(n){var r=n.indexOf(t);r>=0&&(n.splice(r,1),n.length===0&&delete Si[e])}var o=yc[e];if(o)for(var i=0,a=o;i<a.length;i++){var l=a[i];l.notifyLayersChanged()}}function HC(e){var t=yc[e];return t&&t[0]||void 0}function UC(e){var t=e.createElement("div");return t.setAttribute("id",Bh),t.style.cssText="position:fixed;z-index:1000000",e==null||e.body.appendChild(t),t}function WC(){return FC}var KC=Vn(),Rh=g.exports.forwardRef(function(e,t){var n=TC(),r=g.exports.useRef(null),o=_o(r,t),i=g.exports.useRef(),a=g.exports.useRef(null),l=g.exports.useState(!1),u=l[0],s=l[1],d=e.children,c=e.className,f=e.eventBubblingEnabled,h=e.fabricProps,y=e.hostId,_=e.insertFirst,E=e.onLayerDidMount,v=E===void 0?function(){}:E,p=e.onLayerMounted,m=p===void 0?function(){}:p,C=e.onLayerWillUnmount,w=e.styles,S=e.theme,x=_o(a,h==null?void 0:h.ref),b=KC(w,{theme:S,className:c,isNotHost:!y}),T=function(H){var ae,G;if(y){var te=HC(y);return te?(ae=te.rootRef.current)!==null&&ae!==void 0?ae:null:(G=H.getElementById(y))!==null&&G!==void 0?G:null}else{var nt=WC(),Me=nt?H.querySelector(nt):null;return Me||(Me=UC(H)),Me}},P=function(){C==null||C();var H=i.current;i.current=void 0,H&&H.parentNode&&H.parentNode.removeChild(H)},W=function(){var H,ae=ft(r.current);if(!!ae){var G=T(ae);if(!!G){P();var te=((H=G.ownerDocument)!==null&&H!==void 0?H:ae).createElement("div");te.className=b.root,M0(te),P0(te,r.current),_?G.insertBefore(te,G.firstChild):G.appendChild(te),i.current=te,s(!0)}}};return gi(function(){W(),y&&AC(y,W);var H=i.current?n(i.current):void 0;return function(){H&&H(),P(),y&&zC(y,W)}},[y]),g.exports.useEffect(function(){i.current&&u&&(m==null||m(),v==null||v(),s(!1))},[u,m,v]),g.exports.createElement("span",{className:"ms-layer",ref:o},i.current&&Ol.exports.createPortal(g.exports.createElement(Yv,{layerRoot:!0,providerRef:x},g.exports.createElement(OC,k({},!f&&VC(),h,{className:At(b.content,h==null?void 0:h.className),ref:x}),d)),i.current))});Rh.displayName="LayerBase";var Cl,jC=function(e){e.eventPhase===Event.BUBBLING_PHASE&&e.type!=="mouseenter"&&e.type!=="mouseleave"&&e.type!=="touchstart"&&e.type!=="touchend"&&e.stopPropagation()};function VC(){return Cl||(Cl={},["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onTouchMove","onTouchStart","onTouchCancel","onTouchEnd","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onInvalid","onSubmit"].forEach(function(e){return Cl[e]=jC})),Cl}var $C={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"},GC=function(e){var t=e.className,n=e.isNotHost,r=e.theme,o=xr($C,r);return{root:[o.root,r.fonts.medium,n&&[o.rootNoHost,{position:"fixed",zIndex:_i.Layer,top:0,left:0,bottom:0,right:0,visibility:"hidden"}],t],content:[o.content,{visibility:"visible"}]}},QC=Gn(Rh,GC,void 0,{scope:"Layer",fields:["hostId","theme","styles"]}),Lh=g.exports.forwardRef(function(e,t){var n=e.layerProps,r=e.doNotLayer,o=oo(e,["layerProps","doNotLayer"]),i=g.exports.createElement(bC,k({},o,{doNotLayer:r,ref:t}));return r?i:g.exports.createElement(QC,k({},n),i)});Lh.displayName="Callout";var El;(function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"})(El||(El={}));var et;(function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none",e[e.centerCover=4]="centerCover",e[e.centerContain=5]="centerContain"})(et||(et={}));var bi;(function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"})(bi||(bi={}));var Ke;(function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"})(Ke||(Ke={}));var YC=Vn(),qC=/\.svg$/i,XC="fabricImage";function ZC(e,t){var n=e.onLoadingStateChange,r=e.onLoad,o=e.onError,i=e.src,a=g.exports.useState(Ke.notLoaded),l=a[0],u=a[1];gi(function(){u(Ke.notLoaded)},[i]),g.exports.useEffect(function(){if(l===Ke.notLoaded){var c=t.current?i&&t.current.naturalWidth>0&&t.current.naturalHeight>0||t.current.complete&&qC.test(i):!1;c&&u(Ke.loaded)}}),g.exports.useEffect(function(){n==null||n(l)},[l]);var s=g.exports.useCallback(function(c){r==null||r(c),i&&u(Ke.loaded)},[i,r]),d=g.exports.useCallback(function(c){o==null||o(c),u(Ke.error)},[o]);return[l,s,d]}var Oh=g.exports.forwardRef(function(e,t){var n=g.exports.useRef(),r=g.exports.useRef(),o=ZC(e,r),i=o[0],a=o[1],l=o[2],u=He(e,v_,["width","height"]),s=e.src,d=e.alt,c=e.width,f=e.height,h=e.shouldFadeIn,y=h===void 0?!0:h,_=e.shouldStartVisible,E=e.className,v=e.imageFit,p=e.role,m=e.maximizeFrame,C=e.styles,w=e.theme,S=e.loading,x=JC(e,i,r,n),b=YC(C,{theme:w,className:E,width:c,height:f,maximizeFrame:m,shouldFadeIn:y,shouldStartVisible:_,isLoaded:i===Ke.loaded||i===Ke.notLoaded&&e.shouldStartVisible,isLandscape:x===bi.landscape,isCenter:v===et.center,isCenterContain:v===et.centerContain,isCenterCover:v===et.centerCover,isContain:v===et.contain,isCover:v===et.cover,isNone:v===et.none,isError:i===Ke.error,isNotImageFit:v===void 0});return g.exports.createElement("div",{className:b.root,style:{width:c,height:f},ref:n},g.exports.createElement("img",k({},u,{onLoad:a,onError:l,key:XC+e.src||"",className:b.image,ref:_o(r,t),src:s,alt:d,role:p,loading:S})))});Oh.displayName="ImageBase";function JC(e,t,n,r){var o=g.exports.useRef(t),i=g.exports.useRef();return(i===void 0||o.current===Ke.notLoaded&&t===Ke.loaded)&&(i.current=eE(e,t,n,r)),o.current=t,i.current}function eE(e,t,n,r){var o=e.imageFit,i=e.width,a=e.height;if(e.coverStyle!==void 0)return e.coverStyle;if(t===Ke.loaded&&(o===et.cover||o===et.contain||o===et.centerContain||o===et.centerCover)&&n.current&&r.current){var l=void 0;typeof i=="number"&&typeof a=="number"&&o!==et.centerContain&&o!==et.centerCover?l=i/a:l=r.current.clientWidth/r.current.clientHeight;var u=n.current.naturalWidth/n.current.naturalHeight;if(u>l)return bi.landscape}return bi.portrait}var tE={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageCenterContain:"ms-Image-image--centerContain",imageCenterCover:"ms-Image-image--centerCover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"},nE=function(e){var t=e.className,n=e.width,r=e.height,o=e.maximizeFrame,i=e.isLoaded,a=e.shouldFadeIn,l=e.shouldStartVisible,u=e.isLandscape,s=e.isCenter,d=e.isContain,c=e.isCover,f=e.isCenterContain,h=e.isCenterCover,y=e.isNone,_=e.isError,E=e.isNotImageFit,v=e.theme,p=xr(tE,v),m={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"},C=me(),w=C!==void 0&&C.navigator.msMaxTouchPoints===void 0,S=d&&u||c&&!u?{width:"100%",height:"auto"}:{width:"auto",height:"100%"};return{root:[p.root,v.fonts.medium,{overflow:"hidden"},o&&[p.rootMaximizeFrame,{height:"100%",width:"100%"}],i&&a&&!l&&Ei.fadeIn400,(s||d||c||f||h)&&{position:"relative"},t],image:[p.image,{display:"block",opacity:0},i&&["is-loaded",{opacity:1}],s&&[p.imageCenter,m],d&&[p.imageContain,w&&{width:"100%",height:"100%",objectFit:"contain"},!w&&S,!w&&m],c&&[p.imageCover,w&&{width:"100%",height:"100%",objectFit:"cover"},!w&&S,!w&&m],f&&[p.imageCenterContain,u&&{maxWidth:"100%"},!u&&{maxHeight:"100%"},m],h&&[p.imageCenterCover,u&&{maxHeight:"100%"},!u&&{maxWidth:"100%"},m],y&&[p.imageNone,{width:"auto",height:"auto"}],E&&[!!n&&!r&&{height:"auto",width:"100%"},!n&&!!r&&{height:"100%",width:"auto"},!!n&&!!r&&{height:"100%",width:"100%"}],u&&p.imageLandscape,!u&&p.imagePortrait,!i&&"is-notLoaded",a&&"is-fadeIn",_&&"is-error"]}},_c=Gn(Oh,nE,void 0,{scope:"Image"},!0);_c.displayName="Image";var kr=vi({root:{display:"inline-block"},placeholder:["ms-Icon-placeHolder",{width:"1em"}],image:["ms-Icon-imageContainer",{overflow:"hidden"}]}),Fh="ms-Icon",rE=function(e){var t=e.className,n=e.iconClassName,r=e.isPlaceholder,o=e.isImage,i=e.styles;return{root:[r&&kr.placeholder,kr.root,o&&kr.image,n,t,i&&i.root,i&&i.imageContainer]}},Ah=ke(function(e){var t=B_(e)||{subset:{},code:void 0},n=t.code,r=t.subset;return n?{children:n,iconClassName:r.className,fontFamily:r.fontFace&&r.fontFace.fontFamily,mergeImageProps:r.mergeImageProps}:null},void 0,!0),Cc=function(e){var t=e.iconName,n=e.className,r=e.style,o=r===void 0?{}:r,i=Ah(t)||{},a=i.iconClassName,l=i.children,u=i.fontFamily,s=i.mergeImageProps,d=He(e,ge),c=e["aria-label"]||e.title,f=e["aria-label"]||e["aria-labelledby"]||e.title?{role:s?void 0:"img"}:{"aria-hidden":!0},h=l;return s&&typeof l=="object"&&typeof l.props=="object"&&c&&(h=g.exports.cloneElement(l,{alt:c})),g.exports.createElement("i",k({"data-icon-name":t},f,d,s?{title:void 0,"aria-label":void 0}:{},{className:At(Fh,kr.root,a,!t&&kr.placeholder,n),style:k({fontFamily:u},o)}),h)};ke(function(e,t,n){return Cc({iconName:e,className:t,"aria-label":n})});var oE=Vn({cacheSize:100}),iE=function(e){dt(t,e);function t(n){var r=e.call(this,n)||this;return r._onImageLoadingStateChange=function(o){r.props.imageProps&&r.props.imageProps.onLoadingStateChange&&r.props.imageProps.onLoadingStateChange(o),o===Ke.error&&r.setState({imageLoadError:!0})},r.state={imageLoadError:!1},r}return t.prototype.render=function(){var n=this.props,r=n.children,o=n.className,i=n.styles,a=n.iconName,l=n.imageErrorAs,u=n.theme,s=typeof a=="string"&&a.length===0,d=!!this.props.imageProps||this.props.iconType===El.image||this.props.iconType===El.Image,c=Ah(a)||{},f=c.iconClassName,h=c.children,y=c.mergeImageProps,_=oE(i,{theme:u,className:o,iconClassName:f,isImage:d,isPlaceholder:s}),E=d?"span":"i",v=He(this.props,ge,["aria-label"]),p=this.state.imageLoadError,m=k(k({},this.props.imageProps),{onLoadingStateChange:this._onImageLoadingStateChange}),C=p&&l||_c,w=this.props["aria-label"]||this.props.ariaLabel,S=m.alt||w||this.props.title,x=!!(S||this.props["aria-labelledby"]||m["aria-label"]||m["aria-labelledby"]),b=x?{role:d||y?void 0:"img","aria-label":d||y?void 0:S}:{"aria-hidden":!0},T=h;return y&&h&&typeof h=="object"&&S&&(T=g.exports.cloneElement(h,{alt:S})),g.exports.createElement(E,k({"data-icon-name":a},b,v,y?{title:void 0,"aria-label":void 0}:{},{className:_.root}),d?g.exports.createElement(C,k({},m)):r||T)},t}(g.exports.Component),Ii=Gn(iE,rE,void 0,{scope:"Icon"},!0);Ii.displayName="Icon";var aE=function(e){var t=e.className,n=e.imageProps,r=He(e,ge,["aria-label","aria-labelledby","title","aria-describedby"]),o=n.alt||e["aria-label"],i=o||e["aria-labelledby"]||e.title||n["aria-label"]||n["aria-labelledby"]||n.title,a={"aria-labelledby":e["aria-labelledby"],"aria-describedby":e["aria-describedby"],title:e.title},l=i?{}:{"aria-hidden":!0};return g.exports.createElement("div",k({},l,r,{className:At(Fh,kr.root,kr.image,t)}),g.exports.createElement(_c,k({},a,n,{alt:i?o:""})))},Ec={none:0,all:1,inputOnly:2},je;(function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional",e[e.domOrder=3]="domOrder"})(je||(je={}));var xl="data-is-focusable",lE="data-disable-click-on-enter",xc="data-focuszone-id",qt="tabindex",kc="data-no-vertical-wrap",wc="data-no-horizontal-wrap",Sc=999999999,Ti=-999999999,bc,uE="ms-FocusZone";function sE(e,t){var n;typeof MouseEvent=="function"?n=new MouseEvent("click",{ctrlKey:t==null?void 0:t.ctrlKey,metaKey:t==null?void 0:t.metaKey,shiftKey:t==null?void 0:t.shiftKey,altKey:t==null?void 0:t.altKey,bubbles:t==null?void 0:t.bubbles,cancelable:t==null?void 0:t.cancelable}):(n=document.createEvent("MouseEvents"),n.initMouseEvent("click",t?t.bubbles:!1,t?t.cancelable:!1,window,0,0,0,0,0,t?t.ctrlKey:!1,t?t.altKey:!1,t?t.shiftKey:!1,t?t.metaKey:!1,0,null)),e.dispatchEvent(n)}function cE(){return bc||(bc=fn({selectors:{":focus":{outline:"none"}}},uE)),bc}var Mi={},kl=new Set,dE=["text","number","password","email","tel","url","search","textarea"],yn=!1,fE=function(e){dt(t,e);function t(n){var r,o,i,a,l=e.call(this,n)||this;l._root=g.exports.createRef(),l._mergedRef=th(),l._onFocus=function(s){if(!l._portalContainsElement(s.target)){var d=l.props,c=d.onActiveElementChanged,f=d.doNotAllowFocusEventToPropagate,h=d.stopFocusPropagation,y=d.onFocusNotification,_=d.onFocus,E=d.shouldFocusInnerElementWhenReceivedFocus,v=d.defaultTabbableElement,p=l._isImmediateDescendantOfZone(s.target),m;if(p)m=s.target;else for(var C=s.target;C&&C!==l._root.current;){if(Yt(C)&&l._isImmediateDescendantOfZone(C)){m=C;break}C=Qt(C,yn)}if(E&&s.target===l._root.current){var w=v&&typeof v=="function"&&l._root.current&&v(l._root.current);w&&Yt(w)?(m=w,w.focus()):(l.focus(!0),l._activeElement&&(m=null))}var S=!l._activeElement;m&&m!==l._activeElement&&((p||S)&&l._setFocusAlignment(m,!0,!0),l._activeElement=m,S&&l._updateTabIndexes()),c&&c(l._activeElement,s),(h||f)&&s.stopPropagation(),_?_(s):y&&y()}},l._onBlur=function(){l._setParkedFocus(!1)},l._onMouseDown=function(s){if(!l._portalContainsElement(s.target)){var d=l.props.disabled;if(!d){for(var c=s.target,f=[];c&&c!==l._root.current;)f.push(c),c=Qt(c,yn);for(;f.length&&(c=f.pop(),c&&Yt(c)&&l._setActiveElement(c,!0),!hn(c)););}}},l._onKeyDown=function(s,d){if(!l._portalContainsElement(s.target)){var c=l.props,f=c.direction,h=c.disabled,y=c.isInnerZoneKeystroke,_=c.pagingSupportDisabled,E=c.shouldEnterInnerZone;if(!h&&(l.props.onKeyDown&&l.props.onKeyDown(s),!s.isDefaultPrevented()&&!(l._getDocument().activeElement===l._root.current&&l._isInnerZone))){if((E&&E(s)||y&&y(s))&&l._isImmediateDescendantOfZone(s.target)){var v=l._getFirstInnerZone();if(v){if(!v.focus(!0))return}else if(rc(s.target)){if(!l.focusElement(vt(s.target,s.target.firstChild,!0)))return}else return}else{if(s.altKey)return;switch(s.which){case O.space:if(l._shouldRaiseClicksOnSpace&&l._tryInvokeClickForFocusable(s.target,s))break;return;case O.left:if(f!==je.vertical&&(l._preventDefaultWhenHandled(s),l._moveFocusLeft(d)))break;return;case O.right:if(f!==je.vertical&&(l._preventDefaultWhenHandled(s),l._moveFocusRight(d)))break;return;case O.up:if(f!==je.horizontal&&(l._preventDefaultWhenHandled(s),l._moveFocusUp()))break;return;case O.down:if(f!==je.horizontal&&(l._preventDefaultWhenHandled(s),l._moveFocusDown()))break;return;case O.pageDown:if(!_&&l._moveFocusPaging(!0))break;return;case O.pageUp:if(!_&&l._moveFocusPaging(!1))break;return;case O.tab:if(l.props.allowTabKey||l.props.handleTabKey===Ec.all||l.props.handleTabKey===Ec.inputOnly&&l._isElementInput(s.target)){var p=!1;if(l._processingTabKey=!0,f===je.vertical||!l._shouldWrapFocus(l._activeElement,wc))p=s.shiftKey?l._moveFocusUp():l._moveFocusDown();else{var m=Ze(d)?!s.shiftKey:s.shiftKey;p=m?l._moveFocusLeft(d):l._moveFocusRight(d)}if(l._processingTabKey=!1,p)break;l.props.shouldResetActiveElementWhenTabFromZone&&(l._activeElement=null)}return;case O.home:if(l._isContentEditableElement(s.target)||l._isElementInput(s.target)&&!l._shouldInputLoseFocus(s.target,!1))return!1;var C=l._root.current&&l._root.current.firstChild;if(l._root.current&&C&&l.focusElement(vt(l._root.current,C,!0)))break;return;case O.end:if(l._isContentEditableElement(s.target)||l._isElementInput(s.target)&&!l._shouldInputLoseFocus(s.target,!0))return!1;var w=l._root.current&&l._root.current.lastChild;if(l._root.current&&l.focusElement(pt(l._root.current,w,!0,!0,!0)))break;return;case O.enter:if(l._shouldRaiseClicksOnEnter&&l._tryInvokeClickForFocusable(s.target,s))break;return;default:return}}s.preventDefault(),s.stopPropagation()}}},l._getHorizontalDistanceFromCenter=function(s,d,c){var f=l._focusAlignment.left||l._focusAlignment.x||0,h=Math.floor(c.top),y=Math.floor(d.bottom),_=Math.floor(c.bottom),E=Math.floor(d.top),v=s&&h>y,p=!s&&_<E;return v||p?f>=c.left&&f<=c.left+c.width?0:Math.abs(c.left+c.width/2-f):l._shouldWrapFocus(l._activeElement,kc)?Sc:Ti},cl(l),l._id=mn("FocusZone"),l._focusAlignment={left:0,top:0},l._processingTabKey=!1;var u=(o=(r=n.shouldRaiseClicks)!==null&&r!==void 0?r:t.defaultProps.shouldRaiseClicks)!==null&&o!==void 0?o:!0;return l._shouldRaiseClicksOnEnter=(i=n.shouldRaiseClicksOnEnter)!==null&&i!==void 0?i:u,l._shouldRaiseClicksOnSpace=(a=n.shouldRaiseClicksOnSpace)!==null&&a!==void 0?a:u,l}return t.getOuterZones=function(){return kl.size},t._onKeyDownCapture=function(n){n.which===O.tab&&kl.forEach(function(r){return r._updateTabIndexes()})},t.prototype.componentDidMount=function(){var n=this._root.current;if(Mi[this._id]=this,n){for(var r=Qt(n,yn);r&&r!==this._getDocument().body&&r.nodeType===1;){if(hn(r)){this._isInnerZone=!0;break}r=Qt(r,yn)}this._isInnerZone||(kl.add(this),this._root.current&&this._root.current.addEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.addEventListener("blur",this._onBlur,!0),this._updateTabIndexes(),this.props.defaultTabbableElement&&typeof this.props.defaultTabbableElement=="string"?this._activeElement=this._getDocument().querySelector(this.props.defaultTabbableElement):this.props.defaultActiveElement&&(this._activeElement=this._getDocument().querySelector(this.props.defaultActiveElement)),this.props.shouldFocusOnMount&&this.focus()}},t.prototype.componentDidUpdate=function(){var n=this._root.current,r=this._getDocument();if((this._activeElement&&!jn(this._root.current,this._activeElement,yn)||this._defaultFocusElement&&!jn(this._root.current,this._defaultFocusElement,yn))&&(this._activeElement=null,this._defaultFocusElement=null,this._updateTabIndexes()),!this.props.preventFocusRestoration&&r&&this._lastIndexPath&&(r.activeElement===r.body||r.activeElement===null||r.activeElement===n)){var o=H0(n,this._lastIndexPath);o?(this._setActiveElement(o,!0),o.focus(),this._setParkedFocus(!1)):this._setParkedFocus(!0)}},t.prototype.componentWillUnmount=function(){delete Mi[this._id],this._isInnerZone||(kl.delete(this),this._root.current&&this._root.current.removeEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.removeEventListener("blur",this._onBlur,!0),this._activeElement=null,this._defaultFocusElement=null},t.prototype.render=function(){var n=this,r=this.props,o=r.as,i=r.elementType,a=r.rootProps,l=r.ariaDescribedBy,u=r.ariaLabelledBy,s=r.className,d=He(this.props,ge),c=o||i||"div";this._evaluateFocusBeforeRender();var f=R1();return g.exports.createElement(c,k({"aria-labelledby":u,"aria-describedby":l},d,a,{className:At(cE(),s),ref:this._mergedRef(this.props.elementRef,this._root),"data-focuszone-id":this._id,onKeyDown:function(h){return n._onKeyDown(h,f)},onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},t.prototype.focus=function(n,r){if(n===void 0&&(n=!1),r===void 0&&(r=!1),this._root.current)if(!n&&this._root.current.getAttribute(xl)==="true"&&this._isInnerZone){var o=this._getOwnerZone(this._root.current);if(o!==this._root.current){var i=Mi[o.getAttribute(xc)];return!!i&&i.focusElement(this._root.current)}return!1}else{if(!n&&this._activeElement&&jn(this._root.current,this._activeElement)&&Yt(this._activeElement)&&(!r||Mv(this._activeElement)))return this._activeElement.focus(),!0;var a=this._root.current.firstChild;return this.focusElement(vt(this._root.current,a,!0,void 0,void 0,void 0,void 0,void 0,r))}return!1},t.prototype.focusLast=function(){if(this._root.current){var n=this._root.current&&this._root.current.lastChild;return this.focusElement(pt(this._root.current,n,!0,!0,!0))}return!1},t.prototype.focusElement=function(n,r){var o=this.props,i=o.onBeforeFocus,a=o.shouldReceiveFocus;return a&&!a(n)||i&&!i(n)?!1:n?(this._setActiveElement(n,r),this._activeElement&&this._activeElement.focus(),!0):!1},t.prototype.setFocusAlignment=function(n){this._focusAlignment=n},Object.defineProperty(t.prototype,"defaultFocusElement",{get:function(){return this._defaultFocusElement},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"activeElement",{get:function(){return this._activeElement},enumerable:!1,configurable:!0}),t.prototype._evaluateFocusBeforeRender=function(){var n=this._root.current,r=this._getDocument();if(r){var o=r.activeElement;if(o!==n){var i=jn(n,o,!1);this._lastIndexPath=i?U0(n,o):void 0}}},t.prototype._setParkedFocus=function(n){var r=this._root.current;r&&this._isParked!==n&&(this._isParked=n,n?(this.props.allowFocusRoot||(this._parkedTabIndex=r.getAttribute("tabindex"),r.setAttribute("tabindex","-1")),r.focus()):this.props.allowFocusRoot||(this._parkedTabIndex?(r.setAttribute("tabindex",this._parkedTabIndex),this._parkedTabIndex=void 0):r.removeAttribute("tabindex")))},t.prototype._setActiveElement=function(n,r){var o=this._activeElement;this._activeElement=n,o&&(hn(o)&&this._updateTabIndexes(o),o.tabIndex=-1),this._activeElement&&((!this._focusAlignment||r)&&this._setFocusAlignment(n,!0,!0),this._activeElement.tabIndex=0)},t.prototype._preventDefaultWhenHandled=function(n){this.props.preventDefaultWhenHandled&&n.preventDefault()},t.prototype._tryInvokeClickForFocusable=function(n,r){var o=n;if(o===this._root.current)return!1;do{if(o.tagName==="BUTTON"||o.tagName==="A"||o.tagName==="INPUT"||o.tagName==="TEXTAREA"||o.tagName==="SUMMARY")return!1;if(this._isImmediateDescendantOfZone(o)&&o.getAttribute(xl)==="true"&&o.getAttribute(lE)!=="true")return sE(o,r),!0;o=Qt(o,yn)}while(o!==this._root.current);return!1},t.prototype._getFirstInnerZone=function(n){if(n=n||this._activeElement||this._root.current,!n)return null;if(hn(n))return Mi[n.getAttribute(xc)];for(var r=n.firstElementChild;r;){if(hn(r))return Mi[r.getAttribute(xc)];var o=this._getFirstInnerZone(r);if(o)return o;r=r.nextElementSibling}return null},t.prototype._moveFocus=function(n,r,o,i){i===void 0&&(i=!0);var a=this._activeElement,l=-1,u=void 0,s=!1,d=this.props.direction===je.bidirectional;if(!a||!this._root.current||this._isElementInput(a)&&!this._shouldInputLoseFocus(a,n))return!1;var c=d?a.getBoundingClientRect():null;do if(a=n?vt(this._root.current,a):pt(this._root.current,a),d){if(a){var f=a.getBoundingClientRect(),h=r(c,f);if(h===-1&&l===-1){u=a;break}if(h>-1&&(l===-1||h<l)&&(l=h,u=a),l>=0&&h<0)break}}else{u=a;break}while(a);if(u&&u!==this._activeElement)s=!0,this.focusElement(u);else if(this.props.isCircularNavigation&&i)return n?this.focusElement(vt(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(pt(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return s},t.prototype._moveFocusDown=function(){var n=this,r=-1,o=this._focusAlignment.left||this._focusAlignment.x||0;return this._moveFocus(!0,function(i,a){var l=-1,u=Math.floor(a.top),s=Math.floor(i.bottom);return u<s?n._shouldWrapFocus(n._activeElement,kc)?Sc:Ti:((r===-1&&u>=s||u===r)&&(r=u,o>=a.left&&o<=a.left+a.width?l=0:l=Math.abs(a.left+a.width/2-o)),l)})?(this._setFocusAlignment(this._activeElement,!1,!0),!0):!1},t.prototype._moveFocusUp=function(){var n=this,r=-1,o=this._focusAlignment.left||this._focusAlignment.x||0;return this._moveFocus(!1,function(i,a){var l=-1,u=Math.floor(a.bottom),s=Math.floor(a.top),d=Math.floor(i.top);return u>d?n._shouldWrapFocus(n._activeElement,kc)?Sc:Ti:((r===-1&&u<=d||s===r)&&(r=s,o>=a.left&&o<=a.left+a.width?l=0:l=Math.abs(a.left+a.width/2-o)),l)})?(this._setFocusAlignment(this._activeElement,!1,!0),!0):!1},t.prototype._moveFocusLeft=function(n){var r=this,o=this._shouldWrapFocus(this._activeElement,wc);return this._moveFocus(Ze(n),function(i,a){var l=-1,u;return Ze(n)?u=parseFloat(a.top.toFixed(3))<parseFloat(i.bottom.toFixed(3)):u=parseFloat(a.bottom.toFixed(3))>parseFloat(i.top.toFixed(3)),u&&a.right<=i.right&&r.props.direction!==je.vertical?l=i.right-a.right:o||(l=Ti),l},void 0,o)?(this._setFocusAlignment(this._activeElement,!0,!1),!0):!1},t.prototype._moveFocusRight=function(n){var r=this,o=this._shouldWrapFocus(this._activeElement,wc);return this._moveFocus(!Ze(n),function(i,a){var l=-1,u;return Ze(n)?u=parseFloat(a.bottom.toFixed(3))>parseFloat(i.top.toFixed(3)):u=parseFloat(a.top.toFixed(3))<parseFloat(i.bottom.toFixed(3)),u&&a.left>=i.left&&r.props.direction!==je.vertical?l=a.left-i.left:o||(l=Ti),l},void 0,o)?(this._setFocusAlignment(this._activeElement,!0,!1),!0):!1},t.prototype._moveFocusPaging=function(n,r){r===void 0&&(r=!0);var o=this._activeElement;if(!o||!this._root.current||this._isElementInput(o)&&!this._shouldInputLoseFocus(o,n))return!1;var i=h0(o);if(!i)return!1;var a=-1,l=void 0,u=-1,s=-1,d=i.clientHeight,c=o.getBoundingClientRect();do if(o=n?vt(this._root.current,o):pt(this._root.current,o),o){var f=o.getBoundingClientRect(),h=Math.floor(f.top),y=Math.floor(c.bottom),_=Math.floor(f.bottom),E=Math.floor(c.top),v=this._getHorizontalDistanceFromCenter(n,c,f),p=n&&h>y+d,m=!n&&_<E-d;if(p||m)break;v>-1&&(n&&h>u?(u=h,a=v,l=o):!n&&_<s?(s=_,a=v,l=o):(a===-1||v<=a)&&(a=v,l=o))}while(o);var C=!1;if(l&&l!==this._activeElement)C=!0,this.focusElement(l),this._setFocusAlignment(l,!1,!0);else if(this.props.isCircularNavigation&&r)return n?this.focusElement(vt(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(pt(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return C},t.prototype._setFocusAlignment=function(n,r,o){if(this.props.direction===je.bidirectional&&(!this._focusAlignment||r||o)){var i=n.getBoundingClientRect(),a=i.left+i.width/2,l=i.top+i.height/2;this._focusAlignment||(this._focusAlignment={left:a,top:l}),r&&(this._focusAlignment.left=a),o&&(this._focusAlignment.top=l)}},t.prototype._isImmediateDescendantOfZone=function(n){return this._getOwnerZone(n)===this._root.current},t.prototype._getOwnerZone=function(n){for(var r=Qt(n,yn);r&&r!==this._root.current&&r!==this._getDocument().body;){if(hn(r))return r;r=Qt(r,yn)}return r},t.prototype._updateTabIndexes=function(n){!this._activeElement&&this.props.defaultTabbableElement&&typeof this.props.defaultTabbableElement=="function"&&(this._activeElement=this.props.defaultTabbableElement(this._root.current)),!n&&this._root.current&&(this._defaultFocusElement=null,n=this._root.current,this._activeElement&&!jn(n,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!Yt(this._activeElement)&&(this._activeElement=null);for(var r=n&&n.children,o=0;r&&o<r.length;o++){var i=r[o];hn(i)?i.getAttribute(xl)==="true"&&(!this._isInnerZone&&(!this._activeElement&&!this._defaultFocusElement||this._activeElement===i)?(this._defaultFocusElement=i,i.getAttribute(qt)!=="0"&&i.setAttribute(qt,"0")):i.getAttribute(qt)!=="-1"&&i.setAttribute(qt,"-1")):(i.getAttribute&&i.getAttribute(xl)==="false"&&i.setAttribute(qt,"-1"),Yt(i)?this.props.disabled?i.setAttribute(qt,"-1"):!this._isInnerZone&&(!this._activeElement&&!this._defaultFocusElement||this._activeElement===i)?(this._defaultFocusElement=i,i.getAttribute(qt)!=="0"&&i.setAttribute(qt,"0")):i.getAttribute(qt)!=="-1"&&i.setAttribute(qt,"-1"):i.tagName==="svg"&&i.getAttribute("focusable")!=="false"&&i.setAttribute("focusable","false")),this._updateTabIndexes(i)}},t.prototype._isContentEditableElement=function(n){return n&&n.getAttribute("contenteditable")==="true"},t.prototype._isElementInput=function(n){return!!(n&&n.tagName&&(n.tagName.toLowerCase()==="input"||n.tagName.toLowerCase()==="textarea"))},t.prototype._shouldInputLoseFocus=function(n,r){if(!this._processingTabKey&&n&&n.type&&dE.indexOf(n.type.toLowerCase())>-1){var o=n.selectionStart,i=n.selectionEnd,a=o!==i,l=n.value,u=n.readOnly;if(a||o>0&&!r&&!u||o!==l.length&&r&&!u||!!this.props.handleTabKey&&!(this.props.shouldInputLoseFocusOnArrowKey&&this.props.shouldInputLoseFocusOnArrowKey(n)))return!1}return!0},t.prototype._shouldWrapFocus=function(n,r){return this.props.checkForNoWrap?Pv(n,r):!0},t.prototype._portalContainsElement=function(n){return n&&!!this._root.current&&Tv(n,this._root.current)},t.prototype._getDocument=function(){return ft(this._root.current)},t.defaultProps={isCircularNavigation:!1,direction:je.bidirectional,shouldRaiseClicks:!0},t}(g.exports.Component),tt;(function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"})(tt||(tt={}));function Pi(e){return e.canCheck?!!(e.isChecked||e.checked):typeof e.isChecked=="boolean"?e.isChecked:typeof e.checked=="boolean"?e.checked:null}function _n(e){return!!(e.subMenuProps||e.items)}function Xt(e){return!!(e.isDisabled||e.disabled)}function zh(e){var t=Pi(e),n=t!==null;return n?"menuitemcheckbox":"menuitem"}var Hh=function(e){var t=e.item,n=e.classNames,r=t.iconProps;return g.exports.createElement(Ii,k({},r,{className:n.icon}))},pE=function(e){var t=e.item,n=e.hasIcons;return n?t.onRenderIcon?t.onRenderIcon(e,Hh):Hh(e):null},vE=function(e){var t=e.onCheckmarkClick,n=e.item,r=e.classNames,o=Pi(n);if(t){var i=function(a){return t(n,a)};return g.exports.createElement(Ii,{iconName:n.canCheck!==!1&&o?"CheckMark":"",className:r.checkmarkIcon,onClick:i})}return null},hE=function(e){var t=e.item,n=e.classNames;return t.text||t.name?g.exports.createElement("span",{className:n.label},t.text||t.name):null},mE=function(e){var t=e.item,n=e.classNames;return t.secondaryText?g.exports.createElement("span",{className:n.secondaryText},t.secondaryText):null},gE=function(e){var t=e.item,n=e.classNames,r=e.theme;return _n(t)?g.exports.createElement(Ii,k({iconName:Ze(r)?"ChevronLeft":"ChevronRight"},t.submenuIconProps,{className:n.subMenuIcon})):null},yE=function(e){dt(t,e);function t(n){var r=e.call(this,n)||this;return r.openSubMenu=function(){var o=r.props,i=o.item,a=o.openSubMenu,l=o.getSubmenuTarget;if(l){var u=l();_n(i)&&a&&u&&a(i,u)}},r.dismissSubMenu=function(){var o=r.props,i=o.item,a=o.dismissSubMenu;_n(i)&&a&&a()},r.dismissMenu=function(o){var i=r.props.dismissMenu;i&&i(void 0,o)},cl(r),r}return t.prototype.render=function(){var n=this.props,r=n.item,o=n.classNames,i=r.onRenderContent||this._renderLayout;return g.exports.createElement("div",{className:r.split?o.linkContentMenu:o.linkContent},i(this.props,{renderCheckMarkIcon:vE,renderItemIcon:pE,renderItemName:hE,renderSecondaryText:mE,renderSubMenuIcon:gE}))},t.prototype._renderLayout=function(n,r){return g.exports.createElement(g.exports.Fragment,null,r.renderCheckMarkIcon(n),r.renderItemIcon(n),r.renderItemName(n),r.renderSecondaryText(n),r.renderSubMenuIcon(n))},t}(g.exports.Component),_E=ke(function(e){return vi({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})}),Xn=36,Uh=uh(0,lh),CE=ke(function(e){var t,n,r,o,i,a=e.semanticColors,l=e.fonts,u=e.palette,s=a.menuItemBackgroundHovered,d=a.menuItemTextHovered,c=a.menuItemBackgroundPressed,f=a.bodyDivider,h={item:[l.medium,{color:a.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:f,position:"relative"},root:[vo(e),l.medium,{color:a.bodyText,backgroundColor:"transparent",border:"none",width:"100%",height:Xn,lineHeight:Xn,display:"block",cursor:"pointer",padding:"0px 8px 0 4px",textAlign:"left"}],rootDisabled:{color:a.disabledBodyText,cursor:"default",pointerEvents:"none",selectors:(t={},t[K]={color:"GrayText",opacity:1},t)},rootHovered:{backgroundColor:s,color:d,selectors:{".ms-ContextualMenu-icon":{color:u.themeDarkAlt},".ms-ContextualMenu-submenuIcon":{color:u.neutralPrimary}}},rootFocused:{backgroundColor:u.white},rootChecked:{selectors:{".ms-ContextualMenu-checkmarkIcon":{color:u.neutralPrimary}}},rootPressed:{backgroundColor:c,selectors:{".ms-ContextualMenu-icon":{color:u.themeDark},".ms-ContextualMenu-submenuIcon":{color:u.neutralPrimary}}},rootExpanded:{backgroundColor:c,color:a.bodyTextChecked,selectors:(n={".ms-ContextualMenu-submenuIcon":(r={},r[K]={color:"inherit"},r)},n[K]=k({},Er()),n)},linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 8px 0 4px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},secondaryText:{color:e.palette.neutralSecondary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:Xn,fontSize:qn.medium,width:qn.medium,margin:"0 4px",verticalAlign:"middle",flexShrink:"0",selectors:(o={},o[Uh]={fontSize:qn.large,width:qn.large},o)},iconColor:{color:a.menuIcon},iconDisabled:{color:a.disabledBodyText},checkmarkIcon:{color:a.bodySubtext},subMenuIcon:{height:Xn,lineHeight:Xn,color:u.neutralSecondary,textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:qn.small,selectors:(i={":hover":{color:u.neutralPrimary},":active":{color:u.neutralPrimary}},i[Uh]={fontSize:qn.medium},i)},splitButtonFlexContainer:[vo(e),{display:"flex",height:Xn,flexWrap:"nowrap",justifyContent:"center",alignItems:"flex-start"}]};return vr(h)}),Wh="28px",EE=uh(0,lh),xE=ke(function(e){var t;return vi(_E(e),{wrapper:{position:"absolute",right:28,selectors:(t={},t[EE]={right:32},t)},divider:{height:16,width:1}})}),kE={item:"ms-ContextualMenu-item",divider:"ms-ContextualMenu-divider",root:"ms-ContextualMenu-link",isChecked:"is-checked",isExpanded:"is-expanded",isDisabled:"is-disabled",linkContent:"ms-ContextualMenu-linkContent",linkContentMenu:"ms-ContextualMenu-linkContent",icon:"ms-ContextualMenu-icon",iconColor:"ms-ContextualMenu-iconColor",checkmarkIcon:"ms-ContextualMenu-checkmarkIcon",subMenuIcon:"ms-ContextualMenu-submenuIcon",label:"ms-ContextualMenu-itemText",secondaryText:"ms-ContextualMenu-secondaryText",splitMenu:"ms-ContextualMenu-splitMenu",screenReaderText:"ms-ContextualMenu-screenReaderText"},wE=ke(function(e,t,n,r,o,i,a,l,u,s,d,c){var f,h,y,_,E=CE(e),v=xr(kE,e);return vi({item:[v.item,E.item,a],divider:[v.divider,E.divider,l],root:[v.root,E.root,r&&[v.isChecked,E.rootChecked],o&&E.anchorLink,n&&[v.isExpanded,E.rootExpanded],t&&[v.isDisabled,E.rootDisabled],!t&&!n&&[{selectors:(f={":hover":E.rootHovered,":active":E.rootPressed},f["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,f["."+Ue+" &:hover"]={background:"inherit;"},f)}],c],splitPrimary:[E.root,{width:"calc(100% - "+Wh+")"},r&&["is-checked",E.rootChecked],(t||d)&&["is-disabled",E.rootDisabled],!(t||d)&&!r&&[{selectors:(h={":hover":E.rootHovered},h[":hover ~ ."+v.splitMenu]=E.rootHovered,h[":active"]=E.rootPressed,h["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,h["."+Ue+" &:hover"]={background:"inherit;"},h)}]],splitMenu:[v.splitMenu,E.root,{flexBasis:"0",padding:"0 8px",minWidth:Wh},n&&["is-expanded",E.rootExpanded],t&&["is-disabled",E.rootDisabled],!t&&!n&&[{selectors:(y={":hover":E.rootHovered,":active":E.rootPressed},y["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,y["."+Ue+" &:hover"]={background:"inherit;"},y)}]],anchorLink:E.anchorLink,linkContent:[v.linkContent,E.linkContent],linkContentMenu:[v.linkContentMenu,E.linkContent,{justifyContent:"center"}],icon:[v.icon,i&&E.iconColor,E.icon,u,t&&[v.isDisabled,E.iconDisabled]],iconColor:E.iconColor,checkmarkIcon:[v.checkmarkIcon,i&&E.checkmarkIcon,E.icon,u],subMenuIcon:[v.subMenuIcon,E.subMenuIcon,s,n&&{color:e.palette.neutralPrimary},t&&[E.iconDisabled]],label:[v.label,E.label],secondaryText:[v.secondaryText,E.secondaryText],splitContainer:[E.splitButtonFlexContainer,!t&&!r&&[{selectors:(_={},_["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,_)}]],screenReaderText:[v.screenReaderText,E.screenReaderText,ch,{visibility:"hidden"}]})}),Kh=function(e){var t=e.theme,n=e.disabled,r=e.expanded,o=e.checked,i=e.isAnchorLink,a=e.knownIcon,l=e.itemClassName,u=e.dividerClassName,s=e.iconClassName,d=e.subMenuClassName,c=e.primaryDisabled,f=e.className;return wE(t,n,r,o,i,a,l,u,s,d,c,f)},Di=Gn(yE,Kh,void 0,{scope:"ContextualMenuItem"}),Ic=function(e){dt(t,e);function t(n){var r=e.call(this,n)||this;return r._onItemMouseEnter=function(o){var i=r.props,a=i.item,l=i.onItemMouseEnter;l&&l(a,o,o.currentTarget)},r._onItemClick=function(o){var i=r.props,a=i.item,l=i.onItemClickBase;l&&l(a,o,o.currentTarget)},r._onItemMouseLeave=function(o){var i=r.props,a=i.item,l=i.onItemMouseLeave;l&&l(a,o)},r._onItemKeyDown=function(o){var i=r.props,a=i.item,l=i.onItemKeyDown;l&&l(a,o)},r._onItemMouseMove=function(o){var i=r.props,a=i.item,l=i.onItemMouseMove;l&&l(a,o,o.currentTarget)},r._getSubmenuTarget=function(){},cl(r),r}return t.prototype.shouldComponentUpdate=function(n){return!Ys(n,this.props)},t}(g.exports.Component),SE="ktp",jh="-",bE="data-ktp-target",IE="data-ktp-execute-target",TE="ktp-layer-id",Zt;(function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"})(Zt||(Zt={}));var ME=function(){function e(){this.keytips={},this.persistedKeytips={},this.sequenceMapping={},this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0,this.delayUpdatingKeytipChange=!1}return e.getInstance=function(){return this._instance},e.prototype.init=function(t){this.delayUpdatingKeytipChange=t},e.prototype.register=function(t,n){n===void 0&&(n=!1);var r=t;n||(r=this.addParentOverflow(t),this.sequenceMapping[r.keySequences.toString()]=r);var o=this._getUniqueKtp(r);if(n?this.persistedKeytips[o.uniqueID]=o:this.keytips[o.uniqueID]=o,this.inKeytipMode||!this.delayUpdatingKeytipChange){var i=n?Zt.PERSISTED_KEYTIP_ADDED:Zt.KEYTIP_ADDED;pn.raise(this,i,{keytip:r,uniqueID:o.uniqueID})}return o.uniqueID},e.prototype.update=function(t,n){var r=this.addParentOverflow(t),o=this._getUniqueKtp(r,n),i=this.keytips[n];i&&(o.keytip.visible=i.keytip.visible,this.keytips[n]=o,delete this.sequenceMapping[i.keytip.keySequences.toString()],this.sequenceMapping[o.keytip.keySequences.toString()]=o.keytip,(this.inKeytipMode||!this.delayUpdatingKeytipChange)&&pn.raise(this,Zt.KEYTIP_UPDATED,{keytip:o.keytip,uniqueID:o.uniqueID}))},e.prototype.unregister=function(t,n,r){r===void 0&&(r=!1),r?delete this.persistedKeytips[n]:delete this.keytips[n],!r&&delete this.sequenceMapping[t.keySequences.toString()];var o=r?Zt.PERSISTED_KEYTIP_REMOVED:Zt.KEYTIP_REMOVED;(this.inKeytipMode||!this.delayUpdatingKeytipChange)&&pn.raise(this,o,{keytip:t,uniqueID:n})},e.prototype.enterKeytipMode=function(){pn.raise(this,Zt.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){pn.raise(this,Zt.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){var t=this;return Object.keys(this.keytips).map(function(n){return t.keytips[n].keytip})},e.prototype.addParentOverflow=function(t){var n=dn([],t.keySequences);if(n.pop(),n.length!==0){var r=this.sequenceMapping[n.toString()];if(r&&r.overflowSetSequence)return k(k({},t),{overflowSetSequence:r.overflowSetSequence})}return t},e.prototype.menuExecute=function(t,n){pn.raise(this,Zt.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:t,keytipSequences:n})},e.prototype._getUniqueKtp=function(t,n){return n===void 0&&(n=mn()),{keytip:k({},t),uniqueID:n}},e._instance=new e,e}();function Vh(e){return e.reduce(function(t,n){return t+jh+n.split("").join(jh)},SE)}function PE(e,t){var n=t.length,r=dn([],t).pop(),o=dn([],e);return x0(o,n-1,r)}function DE(e){var t=" "+TE;return e.length?t+" "+Vh(e):t}function NE(e){var t=g.exports.useRef(),n=e.keytipProps?k({disabled:e.disabled},e.keytipProps):void 0,r=xh(ME.getInstance()),o=wh(e);gi(function(){t.current&&n&&((o==null?void 0:o.keytipProps)!==e.keytipProps||(o==null?void 0:o.disabled)!==e.disabled)&&r.update(n,t.current)}),gi(function(){return n&&(t.current=r.register(n)),function(){n&&r.unregister(n,t.current)}},[]);var i={ariaDescribedBy:void 0,keytipId:void 0};return n&&(i=BE(r,n,e.ariaDescribedBy)),i}function BE(e,t,n){var r=e.addParentOverflow(t),o=hi(n,DE(r.keySequences)),i=dn([],r.keySequences);r.overflowSetSequence&&(i=PE(i,r.overflowSetSequence));var a=Vh(i);return{ariaDescribedBy:o,keytipId:a}}var Ni=function(e){var t,n=e.children,r=oo(e,["children"]),o=NE(r),i=o.keytipId,a=o.ariaDescribedBy;return n((t={},t[bE]=i,t[IE]=i,t["aria-describedby"]=a,t))},RE=function(e){dt(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n._anchor=g.exports.createRef(),n._getMemoizedMenuButtonKeytipProps=ke(function(r){return k(k({},r),{hasMenu:!0})}),n._getSubmenuTarget=function(){return n._anchor.current?n._anchor.current:void 0},n._onItemClick=function(r){var o=n.props,i=o.item,a=o.onItemClick;a&&a(i,r)},n._renderAriaDescription=function(r,o){return r?g.exports.createElement("span",{id:n._ariaDescriptionId,className:o},r):null},n}return t.prototype.render=function(){var n=this,r=this.props,o=r.item,i=r.classNames,a=r.index,l=r.focusableElementIndex,u=r.totalItemCount,s=r.hasCheckmarks,d=r.hasIcons,c=r.contextualMenuItemAs,f=c===void 0?Di:c,h=r.expandedMenuItemKey,y=r.onItemClick,_=r.openSubMenu,E=r.dismissSubMenu,v=r.dismissMenu,p=o.rel;o.target&&o.target.toLowerCase()==="_blank"&&(p=p||"nofollow noopener noreferrer");var m=_n(o),C=He(o,Fv),w=Xt(o),S=o.itemProps,x=o.ariaDescription,b=o.keytipProps;b&&m&&(b=this._getMemoizedMenuButtonKeytipProps(b)),x&&(this._ariaDescriptionId=mn());var T=hi(o.ariaDescribedBy,x?this._ariaDescriptionId:void 0,C["aria-describedby"]),P={"aria-describedby":T};return g.exports.createElement("div",null,g.exports.createElement(Ni,{keytipProps:o.keytipProps,ariaDescribedBy:T,disabled:w},function(W){return g.exports.createElement("a",k({},P,C,W,{ref:n._anchor,href:o.href,target:o.target,rel:p,className:i.root,role:"menuitem","aria-haspopup":m||void 0,"aria-expanded":m?o.key===h:void 0,"aria-posinset":l+1,"aria-setsize":u,"aria-disabled":Xt(o),style:o.style,onClick:n._onItemClick,onMouseEnter:n._onItemMouseEnter,onMouseLeave:n._onItemMouseLeave,onMouseMove:n._onItemMouseMove,onKeyDown:m?n._onItemKeyDown:void 0}),g.exports.createElement(f,k({componentRef:o.componentRef,item:o,classNames:i,index:a,onCheckmarkClick:s&&y?y:void 0,hasIcons:d,openSubMenu:_,dismissSubMenu:E,dismissMenu:v,getSubmenuTarget:n._getSubmenuTarget},S)),n._renderAriaDescription(x,i.screenReaderText))}))},t}(Ic),LE=function(e){dt(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n._btn=g.exports.createRef(),n._getMemoizedMenuButtonKeytipProps=ke(function(r){return k(k({},r),{hasMenu:!0})}),n._renderAriaDescription=function(r,o){return r?g.exports.createElement("span",{id:n._ariaDescriptionId,className:o},r):null},n._getSubmenuTarget=function(){return n._btn.current?n._btn.current:void 0},n}return t.prototype.render=function(){var n=this,r=this.props,o=r.item,i=r.classNames,a=r.index,l=r.focusableElementIndex,u=r.totalItemCount,s=r.hasCheckmarks,d=r.hasIcons,c=r.contextualMenuItemAs,f=c===void 0?Di:c,h=r.expandedMenuItemKey,y=r.onItemMouseDown,_=r.onItemClick,E=r.openSubMenu,v=r.dismissSubMenu,p=r.dismissMenu,m=Pi(o),C=m!==null,w=zh(o),S=_n(o),x=o.itemProps,b=o.ariaLabel,T=o.ariaDescription,P=He(o,mr);delete P.disabled;var W=o.role||w;T&&(this._ariaDescriptionId=mn());var H=hi(o.ariaDescribedBy,T?this._ariaDescriptionId:void 0,P["aria-describedby"]),ae={className:i.root,onClick:this._onItemClick,onKeyDown:S?this._onItemKeyDown:void 0,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(te){return y?y(o,te):void 0},onMouseMove:this._onItemMouseMove,href:o.href,title:o.title,"aria-label":b,"aria-describedby":H,"aria-haspopup":S||void 0,"aria-expanded":S?o.key===h:void 0,"aria-posinset":l+1,"aria-setsize":u,"aria-disabled":Xt(o),"aria-checked":(W==="menuitemcheckbox"||W==="menuitemradio")&&C?!!m:void 0,"aria-selected":W==="menuitem"&&C?!!m:void 0,role:W,style:o.style},G=o.keytipProps;return G&&S&&(G=this._getMemoizedMenuButtonKeytipProps(G)),g.exports.createElement(Ni,{keytipProps:G,ariaDescribedBy:H,disabled:Xt(o)},function(te){return g.exports.createElement("button",k({ref:n._btn},P,ae,te),g.exports.createElement(f,k({componentRef:o.componentRef,item:o,classNames:i,index:a,onCheckmarkClick:s&&_?_:void 0,hasIcons:d,openSubMenu:E,dismissSubMenu:v,dismissMenu:p,getSubmenuTarget:n._getSubmenuTarget},x)),n._renderAriaDescription(T,i.screenReaderText))})},t}(Ic),OE=function(e){var t=e.theme,n=e.getClassNames,r=e.className;if(!t)throw new Error("Theme is undefined or null.");if(n){var o=n(t);return{wrapper:[o.wrapper],divider:[o.divider]}}return{wrapper:[{display:"inline-flex",height:"100%",alignItems:"center"},r],divider:[{width:1,height:"100%",backgroundColor:t.palette.neutralTertiaryAlt}]}},FE=Vn(),$h=g.exports.forwardRef(function(e,t){var n=e.styles,r=e.theme,o=e.getClassNames,i=e.className,a=FE(n,{theme:r,getClassNames:o,className:i});return g.exports.createElement("span",{className:a.wrapper,ref:t},g.exports.createElement("span",{className:a.divider}))});$h.displayName="VerticalDividerBase";var AE=Gn($h,OE,void 0,{scope:"VerticalDivider"}),zE=500,HE=function(e){dt(t,e);function t(n){var r=e.call(this,n)||this;return r._getMemoizedMenuButtonKeytipProps=ke(function(o){return k(k({},o),{hasMenu:!0})}),r._onItemKeyDown=function(o){var i=r.props,a=i.item,l=i.onItemKeyDown;o.which===O.enter?(r._executeItemClick(o),o.preventDefault(),o.stopPropagation()):l&&l(a,o)},r._getSubmenuTarget=function(){return r._splitButton},r._renderAriaDescription=function(o,i){return o?g.exports.createElement("span",{id:r._ariaDescriptionId,className:i},o):null},r._onItemMouseEnterPrimary=function(o){var i=r.props,a=i.item,l=i.onItemMouseEnter;l&&l(k(k({},a),{subMenuProps:void 0,items:void 0}),o,r._splitButton)},r._onItemMouseEnterIcon=function(o){var i=r.props,a=i.item,l=i.onItemMouseEnter;l&&l(a,o,r._splitButton)},r._onItemMouseMovePrimary=function(o){var i=r.props,a=i.item,l=i.onItemMouseMove;l&&l(k(k({},a),{subMenuProps:void 0,items:void 0}),o,r._splitButton)},r._onItemMouseMoveIcon=function(o){var i=r.props,a=i.item,l=i.onItemMouseMove;l&&l(a,o,r._splitButton)},r._onIconItemClick=function(o){var i=r.props,a=i.item,l=i.onItemClickBase;l&&l(a,o,r._splitButton?r._splitButton:o.currentTarget)},r._executeItemClick=function(o){var i=r.props,a=i.item,l=i.executeItemClick,u=i.onItemClick;if(!(a.disabled||a.isDisabled)){if(r._processingTouch&&u)return u(a,o);l&&l(a,o)}},r._onTouchStart=function(o){r._splitButton&&!("onpointerdown"in r._splitButton)&&r._handleTouchAndPointerEvent(o)},r._onPointerDown=function(o){o.pointerType==="touch"&&(r._handleTouchAndPointerEvent(o),o.preventDefault(),o.stopImmediatePropagation())},r._async=new el(r),r._events=new pn(r),r}return t.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.render=function(){var n=this,r=this.props,o=r.item,i=r.classNames,a=r.index,l=r.focusableElementIndex,u=r.totalItemCount,s=r.hasCheckmarks,d=r.hasIcons,c=r.onItemMouseLeave,f=r.expandedMenuItemKey,h=_n(o),y=o.keytipProps;y&&(y=this._getMemoizedMenuButtonKeytipProps(y));var _=o.ariaDescription;return _&&(this._ariaDescriptionId=mn()),g.exports.createElement(Ni,{keytipProps:y,disabled:Xt(o)},function(E){return g.exports.createElement("div",{"data-ktp-target":E["data-ktp-target"],ref:function(v){return n._splitButton=v},role:zh(o),"aria-label":o.ariaLabel,className:i.splitContainer,"aria-disabled":Xt(o),"aria-expanded":h?o.key===f:void 0,"aria-haspopup":!0,"aria-describedby":hi(o.ariaDescribedBy,_?n._ariaDescriptionId:void 0,E["aria-describedby"]),"aria-checked":o.isChecked||o.checked,"aria-posinset":l+1,"aria-setsize":u,onMouseEnter:n._onItemMouseEnterPrimary,onMouseLeave:c?c.bind(n,k(k({},o),{subMenuProps:null,items:null})):void 0,onMouseMove:n._onItemMouseMovePrimary,onKeyDown:n._onItemKeyDown,onClick:n._executeItemClick,onTouchStart:n._onTouchStart,tabIndex:0,"data-is-focusable":!0,"aria-roledescription":o["aria-roledescription"]},n._renderSplitPrimaryButton(o,i,a,s,d),n._renderSplitDivider(o),n._renderSplitIconButton(o,i,a,E),n._renderAriaDescription(_,i.screenReaderText))})},t.prototype._renderSplitPrimaryButton=function(n,r,o,i,a){var l=this.props,u=l.contextualMenuItemAs,s=u===void 0?Di:u,d=l.onItemClick,c={key:n.key,disabled:Xt(n)||n.primaryDisabled,name:n.name,text:n.text||n.name,secondaryText:n.secondaryText,className:r.splitPrimary,canCheck:n.canCheck,isChecked:n.isChecked,checked:n.checked,iconProps:n.iconProps,onRenderIcon:n.onRenderIcon,data:n.data,"data-is-focusable":!1},f=n.itemProps;return g.exports.createElement("button",k({},He(c,mr)),g.exports.createElement(s,k({"data-is-focusable":!1,item:c,classNames:r,index:o,onCheckmarkClick:i&&d?d:void 0,hasIcons:a},f)))},t.prototype._renderSplitDivider=function(n){var r=n.getSplitButtonVerticalDividerClassNames||xE;return g.exports.createElement(AE,{getClassNames:r})},t.prototype._renderSplitIconButton=function(n,r,o,i){var a=this.props,l=a.contextualMenuItemAs,u=l===void 0?Di:l,s=a.onItemMouseLeave,d=a.onItemMouseDown,c=a.openSubMenu,f=a.dismissSubMenu,h=a.dismissMenu,y={onClick:this._onIconItemClick,disabled:Xt(n),className:r.splitMenu,subMenuProps:n.subMenuProps,submenuIconProps:n.submenuIconProps,split:!0,key:n.key},_=k(k({},He(y,mr)),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:s?s.bind(this,n):void 0,onMouseDown:function(v){return d?d(n,v):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":i["data-ktp-execute-target"],"aria-hidden":!0}),E=n.itemProps;return g.exports.createElement("button",k({},_),g.exports.createElement(u,k({componentRef:n.componentRef,item:y,classNames:r,index:o,hasIcons:!1,openSubMenu:c,dismissSubMenu:f,dismissMenu:h,getSubmenuTarget:this._getSubmenuTarget},E)))},t.prototype._handleTouchAndPointerEvent=function(n){var r=this,o=this.props.onTap;o&&o(n),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout(function(){r._processingTouch=!1,r._lastTouchTimeoutId=void 0},zE)},t}(Ic),Bi;(function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge",e[e.unknown=999]="unknown"})(Bi||(Bi={}));var UE=[479,639,1023,1365,1919,99999999],Gh;function Qh(){var e;return(e=Gh)!==null&&e!==void 0?e:Bi.large}function WE(e){try{return e.document.documentElement.clientWidth}catch{return e.innerWidth}}function KE(e){var t=Bi.small;if(e){try{for(;WE(e)>UE[t];)t++}catch{t=Qh()}Gh=t}else throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");return t}var jE=function(e,t){var n=g.exports.useState(Qh()),r=n[0],o=n[1],i=g.exports.useCallback(function(){var l=KE(me(e.current));r!==l&&o(l)},[e,r]),a=mc();return wi(a,"resize",i),g.exports.useEffect(function(){t===void 0&&i()},[t]),t!=null?t:r},VE=g.exports.createContext({}),$E=Vn(),GE=Vn(),QE={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:ye.bottomAutoEdge,beakWidth:16};function Yh(e,t){var n=t==null?void 0:t.target,r=e.subMenuProps?e.subMenuProps.items:e.items;if(r){for(var o=[],i=0,a=r;i<a.length;i++){var l=a[i];if(l.preferMenuTargetAsEventTarget){var u=l.onClick,s=oo(l,["onClick"]);o.push(k(k({},s),{onClick:nm(u,n)}))}else o.push(l)}return o}}function YE(e){return e.some(function(t){return!!(t.canCheck||t.sectionProps&&t.sectionProps.items.some(function(n){return n.canCheck===!0}))})}var qh=250,Xh="ContextualMenu",qE=ke(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(n){return Cv.apply(void 0,dn([n,Kh],e))}});function XE(e,t){var n=e.hidden,r=n===void 0?!1:n,o=e.onMenuDismissed,i=e.onMenuOpened,a=wh(r),l=g.exports.useRef(i),u=g.exports.useRef(o),s=g.exports.useRef(e);l.current=i,u.current=o,s.current=e,g.exports.useEffect(function(){var d,c;r&&a===!1?(d=u.current)===null||d===void 0||d.call(u,s.current):!r&&a!==!1&&((c=l.current)===null||c===void 0||c.call(l,s.current))},[r,a]),g.exports.useEffect(function(){return function(){var d;return(d=u.current)===null||d===void 0?void 0:d.call(u,s.current)}},[])}function ZE(e,t){var n=e.hidden,r=e.items,o=e.theme,i=e.className,a=e.id,l=e.target,u=g.exports.useState(),s=u[0],d=u[1],c=g.exports.useState(),f=c[0],h=c[1],y=g.exports.useState(),_=y[0],E=y[1],v=kh(Xh,a),p=g.exports.useCallback(function(){E(void 0),d(void 0),h(void 0)},[]),m=g.exports.useCallback(function(S,x,b){var T=S.key;s!==T&&(x.focus(),E(b),d(T),h(x))},[s]);g.exports.useEffect(function(){n&&p()},[n,p]);var C=rx(t,p),w=function(){var S=tm(s,r),x=null;if(S&&(x={items:Yh(S,{target:l}),target:f,onDismiss:C,isSubMenu:!0,id:v,shouldFocusOnMount:!0,shouldFocusOnContainer:_,directionalHint:Ze(o)?ye.leftTopEdge:ye.rightTopEdge,className:i,gapSpace:0,isBeakVisible:!1},S.subMenuProps&&hr(x,S.subMenuProps),S.preferMenuTargetAsEventTarget)){var b=S.onItemClick;x.onItemClick=nm(b,l)}return x};return[s,m,w,C]}function JE(e){var t=e.delayUpdateFocusOnHover,n=e.hidden,r=g.exports.useRef(!t),o=g.exports.useRef(!1);g.exports.useEffect(function(){r.current=!t,o.current=n?!1:!t&&o.current},[t,n]);var i=g.exports.useCallback(function(){t&&(r.current=!1)},[t]);return[r,o,i]}function ex(e,t,n){var r=e.hidden,o=e.onRestoreFocus,i=g.exports.useRef(),a=g.exports.useCallback(function(l){var u,s;o?o(l):l!=null&&l.documentContainsFocus&&((s=(u=i.current)===null||u===void 0?void 0:u.focus)===null||s===void 0||s.call(u))},[o]);return gi(function(){var l,u;if(r)i.current&&(a({originalElement:i.current,containsFocus:!0,documentContainsFocus:((u=ft())===null||u===void 0?void 0:u.hasFocus())||!1}),i.current=void 0);else{var s=t==null?void 0:t.document.activeElement;!(!((l=n.current)===null||l===void 0)&&l.contains(s))&&s.tagName!=="BODY"&&(i.current=s)}},[r,t==null?void 0:t.document.activeElement,a,n]),[a]}function tx(e,t,n,r){var o=e.theme,i=e.isSubMenu,a=e.focusZoneProps,l=a===void 0?{}:a,u=l.checkForNoWrap,s=l.direction,d=s===void 0?je.vertical:s,c=g.exports.useRef(),f=function(C,w,S){var x=!1;return w(C)&&(t(C,S),C.preventDefault(),C.stopPropagation(),x=!0),x},h=function(C){var w=Ze(o)?O.right:O.left;return C.which!==w||!i?!1:!!(d===je.vertical||u&&!Pv(C.target,"data-no-horizontal-wrap"))},y=function(C){return C.which===O.escape||h(C)||C.which===O.up&&(C.altKey||C.metaKey)},_=function(C){c.current=Jh(C);var w=C.which===O.escape&&(eh()||Jv());return f(C,y,w)},E=function(C){var w=c.current&&Jh(C);return c.current=!1,!!w&&!(Jv()||eh())},v=function(C){return f(C,E,!0)},p=function(C){var w=_(C);if(!(w||!n.current)){var S=!!(C.altKey||C.metaKey),x=C.which===O.up,b=C.which===O.down;if(!S&&(x||b)){var T=x?O0(n.current,n.current.lastChild,!0):L0(n.current,n.current.firstChild,!0);T&&(T.focus(),C.preventDefault(),C.stopPropagation())}}},m=function(C,w){var S=Ze(o)?O.left:O.right;!C.disabled&&(w.which===S||w.which===O.enter||w.which===O.down&&(w.altKey||w.metaKey))&&(r(C,w.currentTarget),w.preventDefault())};return[_,v,p,m]}function nx(e){var t=g.exports.useRef(!0),n=g.exports.useRef(),r=function(){!t.current&&n.current!==void 0?(e.clearTimeout(n.current),n.current=void 0):t.current=!1,n.current=e.setTimeout(function(){t.current=!0},qh)};return[r,t]}function rx(e,t){var n=g.exports.useRef(!1);g.exports.useEffect(function(){return n.current=!0,function(){n.current=!1}},[]);var r=function(o,i){i?e(o,i):n.current&&t()};return r}function ox(e,t){var n=e.subMenuHoverDelay,r=n===void 0?qh:n,o=g.exports.useRef(void 0),i=function(){o.current!==void 0&&(t.clearTimeout(o.current),o.current=void 0)},a=function(l){o.current=t.setTimeout(function(){l(),i()},r)};return[i,a,o]}function ix(e,t,n,r,o,i,a,l,u,s,d,c,f){var h=e.target,y=function(x,b,T){o.current&&(i.current=!0),!E()&&p(x,b,T)},_=function(x,b,T){var P=b.currentTarget;if(o.current)i.current=!0;else return;!t.current||n.current!==void 0||P===(r==null?void 0:r.document.activeElement)||p(x,b,T)},E=function(){return!t.current||!i.current},v=function(x,b){var T;if(!E()&&(s(),a===void 0))if(l.current.setActive)try{l.current.setActive()}catch{}else(T=l.current)===null||T===void 0||T.focus()},p=function(x,b,T){var P=T||b.currentTarget;x.key!==a&&(s(),a===void 0&&P.focus(),_n(x)?(b.stopPropagation(),u(function(){P.focus(),d(x,P,!0)})):u(function(){c(b),P.focus()}))},m=function(x,b){C(x,b,b.currentTarget)},C=function(x,b,T){var P=Yh(x,{target:h});if(s(),!_n(x)&&(!P||!P.length))S(x,b);else if(x.key!==a){var W=typeof e.shouldFocusOnContainer=="boolean"?e.shouldFocusOnContainer:b.nativeEvent.pointerType==="mouse";d(x,T,W)}b.stopPropagation(),b.preventDefault()},w=function(x,b){S(x,b),b.stopPropagation()},S=function(x,b){if(!(x.disabled||x.isDisabled)){x.preferMenuTargetAsEventTarget&&rm(b,h);var T=!1;x.onClick?T=!!x.onClick(b,x):e.onItemClick&&(T=!!e.onItemClick(b,x)),(T||!b.defaultPrevented)&&f(b,!0)}};return[y,_,v,m,w,S,C]}var Zh=g.exports.memo(g.exports.forwardRef(function(e,t){var n,r=uc(QE,e);r.ref;var o=oo(r,["ref"]),i=g.exports.useRef(null),a=yo(),l=kh(Xh,o.id),u=function(M,z){var X;return(X=o.onDismiss)===null||X===void 0?void 0:X.call(o,M,z)},s=Sh(o.target,i),d=s[0],c=s[1],f=ex(o,c,i)[0],h=ZE(o,u),y=h[0],_=h[1],E=h[2],v=h[3],p=JE(o),m=p[0],C=p[1],w=p[2],S=nx(a),x=S[0],b=S[1],T=ox(o,a),P=T[0],W=T[1],H=T[2],ae=jE(i,o.responsiveMode);XE(o);var G=tx(o,u,i,_),te=G[0],nt=G[1],Me=G[2],D=G[3],B=ix(o,b,H,c,m,C,y,i,W,P,_,v,u),L=B[0],q=B[1],F=B[2],gt=B[3],rt=B[4],Sr=B[5],Pt=B[6],Cn=function(M,z,X){var Z=0,Ve=M.items,ot=M.totalItemCount,Q=M.hasCheckmarks,yt=M.hasIcons;return g.exports.createElement("ul",{className:z.list,onKeyDown:te,onKeyUp:nt,role:"presentation"},Ve.map(function(de,_t){var Jt=Eo(de,_t,Z,ot,Q,yt,z);if(de.itemType!==tt.Divider&&de.itemType!==tt.Header){var Ir=de.customOnRenderListLength?de.customOnRenderListLength:1;Z+=Ir}return Jt}))},Sl=function(M,z){var X=o.focusZoneAs,Z=X===void 0?fE:X;return g.exports.createElement(Z,k({},z),M)},Eo=function(M,z,X,Z,Ve,ot,Q){var yt,de=[],_t=M.iconProps||{iconName:"None"},Jt=M.getItemClassNames,Ir=M.itemProps,Ml=Ir?Ir.styles:void 0,Pl=M.itemType===tt.Divider?M.className:void 0,Li=M.submenuIconProps?M.submenuIconProps.className:"",En;if(Jt)En=Jt(o.theme,Xt(M),y===M.key,!!Pi(M),!!M.href,_t.iconName!=="None",M.className,Pl,_t.className,Li,M.primaryDisabled);else{var tk={theme:o.theme,disabled:Xt(M),expanded:y===M.key,checked:!!Pi(M),isAnchorLink:!!M.href,knownIcon:_t.iconName!=="None",itemClassName:M.className,dividerClassName:Pl,iconClassName:_t.className,subMenuClassName:Li,primaryDisabled:M.primaryDisabled};En=GE(qE((yt=Q.subComponentStyles)===null||yt===void 0?void 0:yt.menuItem,Ml),tk)}switch((M.text==="-"||M.name==="-")&&(M.itemType=tt.Divider),M.itemType){case tt.Divider:de.push(xo(z,En));break;case tt.Header:de.push(xo(z,En));var nk=vm(M,En,Q,z,Ve,ot);de.push(Ri(nk,M.key||z,En,M.title));break;case tt.Section:de.push(br(M,En,Q,z,Ve,ot));break;default:var Pm=function(){return Nc(M,En,z,X,Z,Ve,ot)},rk=o.onRenderContextualMenuItem?o.onRenderContextualMenuItem(M,Pm):Pm();de.push(Ri(rk,M.key||z,En,M.title));break}return g.exports.createElement(g.exports.Fragment,{key:M.key},de)},bl=function(M,z){var X=M.index,Z=M.focusableElementIndex,Ve=M.totalItemCount,ot=M.hasCheckmarks,Q=M.hasIcons;return Eo(M,X,Z,Ve,ot,Q,z)},br=function(M,z,X,Z,Ve,ot){var Q=M.sectionProps;if(!!Q){var yt,de;if(Q.title){var _t=void 0,Jt="";if(typeof Q.title=="string"){var Ir=l+Q.title.replace(/\s/g,"");_t={key:"section-"+Q.title+"-title",itemType:tt.Header,text:Q.title,id:Ir},Jt=Ir}else{var Ml=Q.title.id||l+Q.title.key.replace(/\s/g,"");_t=k(k({},Q.title),{id:Ml}),Jt=Ml}_t&&(de={role:"group","aria-labelledby":Jt},yt=vm(_t,z,X,Z,Ve,ot))}if(Q.items&&Q.items.length>0)return g.exports.createElement("li",{role:"presentation",key:Q.key||M.key||"section-"+Z},g.exports.createElement("div",k({},de),g.exports.createElement("ul",{className:X.list,role:"presentation"},Q.topDivider&&xo(Z,z,!0,!0),yt&&Ri(yt,M.key||Z,z,M.title),Q.items.map(function(Pl,Li){return Eo(Pl,Li,Li,Q.items.length,Ve,ot,X)}),Q.bottomDivider&&xo(Z,z,!1,!0))))}},Ri=function(M,z,X,Z){return g.exports.createElement("li",{role:"presentation",title:Z,key:z,className:X.item},M)},xo=function(M,z,X,Z){return Z||M>0?g.exports.createElement("li",{role:"separator",key:"separator-"+M+(X===void 0?"":X?"-top":"-bottom"),className:z.divider,"aria-hidden":"true"}):null},Nc=function(M,z,X,Z,Ve,ot,Q){if(M.onRender)return M.onRender(k({"aria-posinset":Z+1,"aria-setsize":Ve},M),u);var yt=o.contextualMenuItemAs,de={item:M,classNames:z,index:X,focusableElementIndex:Z,totalItemCount:Ve,hasCheckmarks:ot,hasIcons:Q,contextualMenuItemAs:yt,onItemMouseEnter:L,onItemMouseLeave:F,onItemMouseMove:q,onItemMouseDown:ax,executeItemClick:Sr,onItemKeyDown:D,expandedMenuItemKey:y,openSubMenu:_,dismissSubMenu:v,dismissMenu:u};return M.href?g.exports.createElement(RE,k({},de,{onItemClick:rt})):M.split&&_n(M)?g.exports.createElement(HE,k({},de,{onItemClick:gt,onItemClickBase:Pt,onTap:P})):g.exports.createElement(LE,k({},de,{onItemClick:gt,onItemClickBase:Pt}))},vm=function(M,z,X,Z,Ve,ot){var Q=o.contextualMenuItemAs,yt=Q===void 0?Di:Q,de=M.itemProps,_t=M.id,Jt=de&&He(de,sl);return g.exports.createElement("div",k({id:_t,className:X.header},Jt,{style:M.style}),g.exports.createElement(yt,k({item:M,classNames:z,index:Z,onCheckmarkClick:Ve?gt:void 0,hasIcons:ot},de)))},Il=o.isBeakVisible,Zn=o.items,hm=o.labelElementId,Nx=o.id,mm=o.className,Bx=o.beakWidth,Rx=o.directionalHint,Lx=o.directionalHintForRTL,Ox=o.alignTargetEdge,Fx=o.gapSpace,Ax=o.coverTarget,gm=o.ariaLabel,zx=o.doNotLayer,Hx=o.target,Ux=o.bounds,ym=o.useTargetWidth,_m=o.useTargetAsMinWidth,Wx=o.directionalHintFixed,Kx=o.shouldFocusOnMount,jx=o.shouldFocusOnContainer,Cm=o.title,Vx=o.styles,Em=o.theme,Bc=o.calloutProps,xm=o.onRenderSubMenu,$x=xm===void 0?em:xm,km=o.onRenderMenuList,Gx=km===void 0?function(M,z){return Cn(M,Jn)}:km,Qx=o.focusZoneProps,wm=o.getMenuClassNames,Jn=wm?wm(Em,mm):$E(Vx,{theme:Em,className:mm}),Yx=Sm(Zn);function Sm(M){for(var z=0,X=M;z<X.length;z++){var Z=X[z];if(Z.iconProps||Z.itemType===tt.Section&&Z.sectionProps&&Sm(Z.sectionProps.items))return!0}return!1}var qx=k(k({direction:je.vertical,handleTabKey:Ec.all,isCircularNavigation:!0},Qx),{className:At(Jn.root,(n=o.focusZoneProps)===null||n===void 0?void 0:n.className)}),Xx=YE(Zn),bm=y&&o.hidden!==!0?E():null;Il=Il===void 0?ae<=Bi.medium:Il;var Rc,Lc=d.current;if((ym||_m)&&Lc&&Lc.offsetWidth){var Zx=Lc.getBoundingClientRect(),Im=Zx.width-2;ym?Rc={width:Im}:_m&&(Rc={minWidth:Im})}if(Zn&&Zn.length>0){for(var Tm=0,Oc=0,Mm=Zn;Oc<Mm.length;Oc++){var Tl=Mm[Oc];if(Tl.itemType!==tt.Divider&&Tl.itemType!==tt.Header){var Jx=Tl.customOnRenderListLength?Tl.customOnRenderListLength:1;Tm+=Jx}}var ek=Jn.subComponentStyles?Jn.subComponentStyles.callout:void 0;return g.exports.createElement(VE.Consumer,null,function(M){return g.exports.createElement(Lh,k({styles:ek,onRestoreFocus:f},Bc,{target:Hx||M.target,isBeakVisible:Il,beakWidth:Bx,directionalHint:Rx,directionalHintForRTL:Lx,gapSpace:Fx,coverTarget:Ax,doNotLayer:zx,className:At("ms-ContextualMenu-Callout",Bc&&Bc.className),setInitialFocus:Kx,onDismiss:o.onDismiss||M.onDismiss,onScroll:x,bounds:Ux,directionalHintFixed:Wx,alignTargetEdge:Ox,hidden:o.hidden||M.hidden,ref:t}),g.exports.createElement("div",{style:Rc,ref:i,id:Nx,className:Jn.container,tabIndex:jx?0:-1,onKeyDown:Me,onKeyUp:nt,onFocusCapture:w,"aria-label":gm,"aria-labelledby":hm,role:"menu"},Cm&&g.exports.createElement("div",{className:Jn.title}," ",Cm," "),Zn&&Zn.length?Sl(Gx({ariaLabel:gm,items:Zn,totalItemCount:Tm,hasCheckmarks:Xx,hasIcons:Yx,defaultMenuItemRenderer:function(z){return bl(z,Jn)},labelElementId:hm},function(z,X){return Cn(z,Jn)}),qx):null,bm&&$x(bm,em)),g.exports.createElement(jv,null))})}else return null}),function(e,t){return!t.shouldUpdateWhenHidden&&e.hidden&&t.hidden?!0:Ys(e,t)});Zh.displayName="ContextualMenuBase";function Jh(e){return e.which===O.alt||e.key==="Meta"}function ax(e,t){var n;(n=e.onMouseDown)===null||n===void 0||n.call(e,e,t)}function em(e,t){throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.")}function tm(e,t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if(o.itemType===tt.Section&&o.sectionProps){var i=tm(e,o.sectionProps.items);if(i)return i}else if(o.key&&o.key===e)return o}}function nm(e,t){return e&&function(n,r){return rm(n,t),e(n,r)}}function rm(e,t){e&&t&&(e.persist(),t instanceof Event?e.target=t.target:t instanceof Element&&(e.target=t))}var lx={root:"ms-ContextualMenu",container:"ms-ContextualMenu-container",list:"ms-ContextualMenu-list",header:"ms-ContextualMenu-header",title:"ms-ContextualMenu-title",isopen:"is-open"},ux=function(e){var t=e.className,n=e.theme,r=xr(lx,n),o=n.fonts,i=n.semanticColors,a=n.effects;return{root:[n.fonts.medium,r.root,r.isopen,{backgroundColor:i.menuBackground,minWidth:"180px"},t],container:[r.container,{selectors:{":focus":{outline:0}}}],list:[r.list,r.isopen,{listStyleType:"none",margin:"0",padding:"0"}],header:[r.header,o.small,{fontWeight:ie.semibold,color:i.menuHeader,background:"none",backgroundColor:"transparent",border:"none",height:Xn,lineHeight:Xn,cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}],title:[r.title,{fontSize:o.mediumPlus.fontSize,paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:i.menuItemBackgroundPressed}],subComponentStyles:{callout:{root:{boxShadow:a.elevation8}},menuItem:{}}}};function om(e){return g.exports.createElement(im,k({},e))}var im=Gn(Zh,ux,function(e){return{onRenderSubMenu:e.onRenderSubMenu?T_(e.onRenderSubMenu,om):om}},{scope:"ContextualMenu"}),Tc=im;Tc.displayName="ContextualMenu";var am={msButton:"ms-Button",msButtonHasMenu:"ms-Button--hasMenu",msButtonIcon:"ms-Button-icon",msButtonMenuIcon:"ms-Button-menuIcon",msButtonLabel:"ms-Button-label",msButtonDescription:"ms-Button-description",msButtonScreenReaderText:"ms-Button-screenReaderText",msButtonFlexContainer:"ms-Button-flexContainer",msButtonTextContainer:"ms-Button-textContainer"},sx=ke(function(e,t,n,r,o,i,a,l,u,s,d){var c,f,h=xr(am,e||{}),y=s&&!d;return vi({root:[h.msButton,t.root,r,u&&["is-checked",t.rootChecked],y&&["is-expanded",t.rootExpanded,{selectors:(c={},c[":hover ."+h.msButtonIcon]=t.iconExpandedHovered,c[":hover ."+h.msButtonMenuIcon]=t.menuIconExpandedHovered||t.rootExpandedHovered,c[":hover"]=t.rootExpandedHovered,c)}],l&&[am.msButtonHasMenu,t.rootHasMenu],a&&["is-disabled",t.rootDisabled],!a&&!y&&!u&&{selectors:(f={":hover":t.rootHovered},f[":hover ."+h.msButtonLabel]=t.labelHovered,f[":hover ."+h.msButtonIcon]=t.iconHovered,f[":hover ."+h.msButtonDescription]=t.descriptionHovered,f[":hover ."+h.msButtonMenuIcon]=t.menuIconHovered,f[":focus"]=t.rootFocused,f[":active"]=t.rootPressed,f[":active ."+h.msButtonIcon]=t.iconPressed,f[":active ."+h.msButtonDescription]=t.descriptionPressed,f[":active ."+h.msButtonMenuIcon]=t.menuIconPressed,f)},a&&u&&[t.rootCheckedDisabled],!a&&u&&{selectors:{":hover":t.rootCheckedHovered,":active":t.rootCheckedPressed}},n],flexContainer:[h.msButtonFlexContainer,t.flexContainer],textContainer:[h.msButtonTextContainer,t.textContainer],icon:[h.msButtonIcon,o,t.icon,y&&t.iconExpanded,u&&t.iconChecked,a&&t.iconDisabled],label:[h.msButtonLabel,t.label,u&&t.labelChecked,a&&t.labelDisabled],menuIcon:[h.msButtonMenuIcon,i,t.menuIcon,u&&t.menuIconChecked,a&&!d&&t.menuIconDisabled,!a&&!y&&!u&&{selectors:{":hover":t.menuIconHovered,":active":t.menuIconPressed}},y&&["is-expanded",t.menuIconExpanded]],description:[h.msButtonDescription,t.description,u&&t.descriptionChecked,a&&t.descriptionDisabled],screenReaderText:[h.msButtonScreenReaderText,t.screenReaderText]})}),cx=ke(function(e,t,n,r,o){return{root:fn(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],r&&!t&&[e.splitButtonMenuButtonChecked],o&&!t&&[{selectors:{":focus":e.splitButtonMenuFocused}}]),splitButtonContainer:fn(e.splitButtonContainer,!t&&r&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!r&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:fn(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&o&&e.splitButtonMenuIcon),flexContainer:fn(e.splitButtonFlexContainer),divider:fn(e.splitButtonDivider,(o||t)&&e.splitButtonDividerDisabled)}}),dx=500,fx="BaseButton",px=function(e){dt(t,e);function t(n){var r=e.call(this,n)||this;return r._buttonElement=g.exports.createRef(),r._splitButtonContainer=g.exports.createRef(),r._mergedRef=th(),r._renderedVisibleMenu=!1,r._getMemoizedMenuButtonKeytipProps=ke(function(o){return k(k({},o),{hasMenu:!0})}),r._onRenderIcon=function(o,i){var a=r.props.iconProps;if(a&&(a.iconName!==void 0||a.imageProps)){var l=a.className,u=a.imageProps,s=oo(a,["className","imageProps"]);if(a.styles)return g.exports.createElement(Ii,k({className:At(r._classNames.icon,l),imageProps:u},s));if(a.iconName)return g.exports.createElement(Cc,k({className:At(r._classNames.icon,l)},s));if(u)return g.exports.createElement(aE,k({className:At(r._classNames.icon,l),imageProps:u},s))}return null},r._onRenderTextContents=function(){var o=r.props,i=o.text,a=o.children,l=o.secondaryText,u=l===void 0?r.props.description:l,s=o.onRenderText,d=s===void 0?r._onRenderText:s,c=o.onRenderDescription,f=c===void 0?r._onRenderDescription:c;return i||typeof a=="string"||u?g.exports.createElement("span",{className:r._classNames.textContainer},d(r.props,r._onRenderText),f(r.props,r._onRenderDescription)):[d(r.props,r._onRenderText),f(r.props,r._onRenderDescription)]},r._onRenderText=function(){var o=r.props.text,i=r.props.children;return o===void 0&&typeof i=="string"&&(o=i),r._hasText()?g.exports.createElement("span",{key:r._labelId,className:r._classNames.label,id:r._labelId},o):null},r._onRenderChildren=function(){var o=r.props.children;return typeof o=="string"?null:o},r._onRenderDescription=function(o){var i=o.secondaryText,a=i===void 0?r.props.description:i;return a?g.exports.createElement("span",{key:r._descriptionId,className:r._classNames.description,id:r._descriptionId},a):null},r._onRenderAriaDescription=function(){var o=r.props.ariaDescription;return o?g.exports.createElement("span",{className:r._classNames.screenReaderText,id:r._ariaDescriptionId},o):null},r._onRenderMenuIcon=function(o){var i=r.props.menuIconProps;return g.exports.createElement(Cc,k({iconName:"ChevronDown"},i,{className:r._classNames.menuIcon}))},r._onRenderMenu=function(o){var i=r.props.menuAs?q0(r.props.menuAs,Tc):Tc;return g.exports.createElement(i,k({},o))},r._onDismissMenu=function(o){var i=r.props.menuProps;i&&i.onDismiss&&i.onDismiss(o),(!o||!o.defaultPrevented)&&r._dismissMenu()},r._dismissMenu=function(){r._menuShouldFocusOnMount=void 0,r._menuShouldFocusOnContainer=void 0,r.setState({menuHidden:!0})},r._openMenu=function(o,i){i===void 0&&(i=!0),r.props.menuProps&&(r._menuShouldFocusOnContainer=o,r._menuShouldFocusOnMount=i,r._renderedVisibleMenu=!0,r.setState({menuHidden:!1}))},r._onToggleMenu=function(o){var i=!0;r.props.menuProps&&r.props.menuProps.shouldFocusOnMount===!1&&(i=!1),r.state.menuHidden?r._openMenu(o,i):r._dismissMenu()},r._onSplitContainerFocusCapture=function(o){var i=r._splitButtonContainer.current;!i||o.target&&Tv(o.target,i)||i.focus()},r._onSplitButtonPrimaryClick=function(o){r.state.menuHidden||r._dismissMenu(),!r._processingTouch&&r.props.onClick?r.props.onClick(o):r._processingTouch&&r._onMenuClick(o)},r._onKeyDown=function(o){r.props.disabled&&(o.which===O.enter||o.which===O.space)?(o.preventDefault(),o.stopPropagation()):r.props.disabled||(r.props.menuProps?r._onMenuKeyDown(o):r.props.onKeyDown!==void 0&&r.props.onKeyDown(o))},r._onKeyUp=function(o){!r.props.disabled&&r.props.onKeyUp!==void 0&&r.props.onKeyUp(o)},r._onKeyPress=function(o){!r.props.disabled&&r.props.onKeyPress!==void 0&&r.props.onKeyPress(o)},r._onMouseUp=function(o){!r.props.disabled&&r.props.onMouseUp!==void 0&&r.props.onMouseUp(o)},r._onMouseDown=function(o){!r.props.disabled&&r.props.onMouseDown!==void 0&&r.props.onMouseDown(o)},r._onClick=function(o){r.props.disabled||(r.props.menuProps?r._onMenuClick(o):r.props.onClick!==void 0&&r.props.onClick(o))},r._onSplitButtonContainerKeyDown=function(o){o.which===O.enter||o.which===O.space?r._buttonElement.current&&(r._buttonElement.current.click(),o.preventDefault(),o.stopPropagation()):r._onMenuKeyDown(o)},r._onMenuKeyDown=function(o){var i;if(!r.props.disabled){r.props.onKeyDown&&r.props.onKeyDown(o);var a=o.which===O.up,l=o.which===O.down;if(!o.defaultPrevented&&r._isValidMenuOpenKey(o)){var u=r.props.onMenuClick;u&&u(o,r.props),r._onToggleMenu(!1),o.preventDefault(),o.stopPropagation()}if((o.which===O.enter||o.which===O.space)&&gr(!0,o.target,(i=r.context)===null||i===void 0?void 0:i.registeredProviders),!(o.altKey||o.metaKey)&&(a||l)&&!r.state.menuHidden&&r.props.menuProps){var s=r._menuShouldFocusOnMount!==void 0?r._menuShouldFocusOnMount:r.props.menuProps.shouldFocusOnMount;s||(o.preventDefault(),o.stopPropagation(),r._menuShouldFocusOnMount=!0,r.forceUpdate())}}},r._onTouchStart=function(){r._isSplitButton&&r._splitButtonContainer.current&&!("onpointerdown"in r._splitButtonContainer.current)&&r._handleTouchAndPointerEvent()},r._onMenuClick=function(o){var i=r.props,a=i.onMenuClick,l=i.menuProps;a&&a(o,r.props);var u=typeof(l==null?void 0:l.shouldFocusOnContainer)=="boolean"?l.shouldFocusOnContainer:o.nativeEvent.pointerType==="mouse";o.defaultPrevented||(r._onToggleMenu(u),o.preventDefault(),o.stopPropagation())},cl(r),r._async=new el(r),r._events=new pn(r),kv(fx,n,["menuProps","onClick"],"split",r.props.split),r._labelId=mn(),r._descriptionId=mn(),r._ariaDescriptionId=mn(),r.state={menuHidden:!0},r}return Object.defineProperty(t.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&this.props.split===!0},enumerable:!1,configurable:!0}),t.prototype.render=function(){var n,r=this.props,o=r.ariaDescription,i=r.ariaLabel,a=r.ariaHidden,l=r.className,u=r.disabled,s=r.allowDisabledFocus,d=r.primaryDisabled,c=r.secondaryText,f=c===void 0?this.props.description:c,h=r.href,y=r.iconProps,_=r.menuIconProps,E=r.styles,v=r.checked,p=r.variantClassName,m=r.theme,C=r.toggle,w=r.getClassNames,S=r.role,x=this.state.menuHidden,b=u||d;this._classNames=w?w(m,l,p,y&&y.className,_&&_.className,b,v,!x,!!this.props.menuProps,this.props.split,!!s):sx(m,E,l,p,y&&y.className,_&&_.className,b,!!this.props.menuProps,v,!x,this.props.split);var T=this,P=T._ariaDescriptionId,W=T._labelId,H=T._descriptionId,ae=!b&&!!h,G=ae?"a":"button",te=He(hr(ae?{}:{type:"button"},this.props.rootProps,this.props),ae?Fv:mr,["disabled"]),nt=i||te["aria-label"],Me=void 0;o?Me=P:f&&this.props.onRenderDescription!==Xs?Me=H:te["aria-describedby"]&&(Me=te["aria-describedby"]);var D=void 0;te["aria-labelledby"]?D=te["aria-labelledby"]:Me&&!nt&&(D=this._hasText()?W:void 0);var B=!(this.props["data-is-focusable"]===!1||u&&!s||this._isSplitButton),L=S==="menuitemcheckbox"||S==="checkbox",q=L||C===!0?!!v:void 0,F=hr(te,(n={className:this._classNames.root,ref:this._mergedRef(this.props.elementRef,this._buttonElement),disabled:b&&!s,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onClick:this._onClick,"aria-label":nt,"aria-labelledby":D,"aria-describedby":Me,"aria-disabled":b,"data-is-focusable":B},n[L?"aria-checked":"aria-pressed"]=q,n));if(a&&(F["aria-hidden"]=!0),this._isSplitButton)return this._onRenderSplitButtonContent(G,F);if(this.props.menuProps){var gt=this.props.menuProps.id,rt=gt===void 0?this._labelId+"-menu":gt;hr(F,{"aria-expanded":!x,"aria-controls":x?null:rt,"aria-haspopup":!0})}return this._onRenderContent(G,F)},t.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.current&&("onpointerdown"in this._splitButtonContainer.current&&this._events.on(this._splitButtonContainer.current,"pointerdown",this._onPointerDown,!0),"onpointerup"in this._splitButtonContainer.current&&this.props.onPointerUp&&this._events.on(this._splitButtonContainer.current,"pointerup",this.props.onPointerUp,!0))},t.prototype.componentDidUpdate=function(n,r){this.props.onAfterMenuDismiss&&!r.menuHidden&&this.state.menuHidden&&this.props.onAfterMenuDismiss()},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.focus=function(){var n,r;this._isSplitButton&&this._splitButtonContainer.current?(gr(!0,void 0,(n=this.context)===null||n===void 0?void 0:n.registeredProviders),this._splitButtonContainer.current.focus()):this._buttonElement.current&&(gr(!0,void 0,(r=this.context)===null||r===void 0?void 0:r.registeredProviders),this._buttonElement.current.focus())},t.prototype.dismissMenu=function(){this._dismissMenu()},t.prototype.openMenu=function(n,r){this._openMenu(n,r)},t.prototype._onRenderContent=function(n,r){var o=this,i=this.props,a=n,l=i.menuIconProps,u=i.menuProps,s=i.onRenderIcon,d=s===void 0?this._onRenderIcon:s,c=i.onRenderAriaDescription,f=c===void 0?this._onRenderAriaDescription:c,h=i.onRenderChildren,y=h===void 0?this._onRenderChildren:h,_=i.onRenderMenu,E=_===void 0?this._onRenderMenu:_,v=i.onRenderMenuIcon,p=v===void 0?this._onRenderMenuIcon:v,m=i.disabled,C=i.keytipProps;C&&u&&(C=this._getMemoizedMenuButtonKeytipProps(C));var w=function(x){return g.exports.createElement(a,k({},r,x),g.exports.createElement("span",{className:o._classNames.flexContainer,"data-automationid":"splitbuttonprimary"},d(i,o._onRenderIcon),o._onRenderTextContents(),f(i,o._onRenderAriaDescription),y(i,o._onRenderChildren),!o._isSplitButton&&(u||l||o.props.onRenderMenuIcon)&&p(o.props,o._onRenderMenuIcon),u&&!u.doNotLayer&&o._shouldRenderMenu()&&E(o._getMenuProps(u),o._onRenderMenu)))},S=C?g.exports.createElement(Ni,{keytipProps:this._isSplitButton?void 0:C,ariaDescribedBy:r["aria-describedby"],disabled:m},function(x){return w(x)}):w();return u&&u.doNotLayer?g.exports.createElement(g.exports.Fragment,null,S,this._shouldRenderMenu()&&E(this._getMenuProps(u),this._onRenderMenu)):g.exports.createElement(g.exports.Fragment,null,S,g.exports.createElement(jv,null))},t.prototype._shouldRenderMenu=function(){var n=this.state.menuHidden,r=this.props,o=r.persistMenu,i=r.renderPersistedMenuHiddenOnMount;if(n){if(o&&(this._renderedVisibleMenu||i))return!0}else return!0;return!1},t.prototype._hasText=function(){return this.props.text!==null&&(this.props.text!==void 0||typeof this.props.children=="string")},t.prototype._getMenuProps=function(n){var r=this.props.persistMenu,o=this.state.menuHidden;return!n.ariaLabel&&!n.labelElementId&&this._hasText()&&(n=k(k({},n),{labelElementId:this._labelId})),k(k({id:this._labelId+"-menu",directionalHint:ye.bottomLeftEdge},n),{shouldFocusOnContainer:this._menuShouldFocusOnContainer,shouldFocusOnMount:this._menuShouldFocusOnMount,hidden:r?o:void 0,className:At("ms-BaseButton-menuhost",n.className),target:this._isSplitButton?this._splitButtonContainer.current:this._buttonElement.current,onDismiss:this._onDismissMenu})},t.prototype._onRenderSplitButtonContent=function(n,r){var o=this,i=this.props,a=i.styles,l=a===void 0?{}:a,u=i.disabled,s=i.allowDisabledFocus,d=i.checked,c=i.getSplitButtonClassNames,f=i.primaryDisabled,h=i.menuProps,y=i.toggle,_=i.role,E=i.primaryActionButtonProps,v=this.props.keytipProps,p=this.state.menuHidden,m=c?c(!!u,!p,!!d,!!s):l&&cx(l,!!u,!p,!!d,!!f);hr(r,{onClick:void 0,onPointerDown:void 0,onPointerUp:void 0,tabIndex:-1,"data-is-focusable":!1}),v&&h&&(v=this._getMemoizedMenuButtonKeytipProps(v));var C=He(r,[],["disabled"]);E&&hr(r,E);var w=function(S){return g.exports.createElement("div",k({},C,{"data-ktp-target":S?S["data-ktp-target"]:void 0,role:_||"button","aria-disabled":u,"aria-haspopup":!0,"aria-expanded":!p,"aria-pressed":y?!!d:void 0,"aria-describedby":hi(r["aria-describedby"],S?S["aria-describedby"]:void 0),className:m&&m.splitButtonContainer,onKeyDown:o._onSplitButtonContainerKeyDown,onTouchStart:o._onTouchStart,ref:o._splitButtonContainer,"data-is-focusable":!0,onClick:!u&&!f?o._onSplitButtonPrimaryClick:void 0,tabIndex:!u&&!f||s?0:void 0,"aria-roledescription":r["aria-roledescription"],onFocusCapture:o._onSplitContainerFocusCapture}),g.exports.createElement("span",{style:{display:"flex",width:"100%"}},o._onRenderContent(n,r),o._onRenderSplitButtonMenuButton(m,S),o._onRenderSplitButtonDivider(m)))};return v?g.exports.createElement(Ni,{keytipProps:v,disabled:u},function(S){return w(S)}):w()},t.prototype._onRenderSplitButtonDivider=function(n){if(n&&n.divider){var r=function(o){o.stopPropagation()};return g.exports.createElement("span",{className:n.divider,"aria-hidden":!0,onClick:r})}return null},t.prototype._onRenderSplitButtonMenuButton=function(n,r){var o=this.props,i=o.allowDisabledFocus,a=o.checked,l=o.disabled,u=o.splitButtonMenuProps,s=o.splitButtonAriaLabel,d=o.primaryDisabled,c=this.state.menuHidden,f=this.props.menuIconProps;f===void 0&&(f={iconName:"ChevronDown"});var h=k(k({},u),{styles:n,checked:a,disabled:l,allowDisabledFocus:i,onClick:this._onMenuClick,menuProps:void 0,iconProps:k(k({},f),{className:this._classNames.menuIcon}),ariaLabel:s,"aria-haspopup":!0,"aria-expanded":!c,"data-is-focusable":!1});return g.exports.createElement(t,k({},h,{"data-ktp-execute-target":r&&r["data-ktp-execute-target"],onMouseDown:this._onMouseDown,tabIndex:d&&!i?0:-1}))},t.prototype._onPointerDown=function(n){var r=this.props.onPointerDown;r&&r(n),n.pointerType==="touch"&&(this._handleTouchAndPointerEvent(),n.preventDefault(),n.stopImmediatePropagation())},t.prototype._handleTouchAndPointerEvent=function(){var n=this;this._lastTouchTimeoutId!==void 0&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout(function(){n._processingTouch=!1,n._lastTouchTimeoutId=void 0,n.state.menuHidden&&n.focus()},dx)},t.prototype._isValidMenuOpenKey=function(n){return this.props.menuTriggerKeyCode?n.which===this.props.menuTriggerKeyCode:this.props.menuProps?n.which===O.down&&(n.altKey||n.metaKey):!1},t.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},t.contextType=fl,t}(g.exports.Component),lm={outline:0},um=function(e){return{fontSize:e,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",flexShrink:0}},vx=ke(function(e){var t,n,r=e.semanticColors,o=e.effects,i=e.fonts,a=r.buttonBorder,l=r.disabledBackground,u=r.disabledText,s={left:-2,top:-2,bottom:-2,right:-2,outlineColor:"ButtonText"};return{root:[vo(e,{inset:1,highContrastStyle:s,borderColor:"transparent"}),e.fonts.medium,{border:"1px solid "+a,borderRadius:o.roundedCorner2,boxSizing:"border-box",cursor:"pointer",display:"inline-block",padding:"0 16px",textDecoration:"none",textAlign:"center",userSelect:"none",selectors:{":active > span":{position:"relative",left:0,top:0}}}],rootDisabled:[vo(e,{inset:1,highContrastStyle:s,borderColor:"transparent"}),{backgroundColor:l,borderColor:l,color:u,cursor:"default",selectors:{":hover":lm,":focus":lm}}],iconDisabled:{color:u,selectors:(t={},t[K]={color:"GrayText"},t)},menuIconDisabled:{color:u,selectors:(n={},n[K]={color:"GrayText"},n)},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},description:{display:"block"},textContainer:{flexGrow:1,display:"block"},icon:um(i.mediumPlus.fontSize),menuIcon:um(i.small.fontSize),label:{margin:"0 4px",lineHeight:"100%",display:"block"},screenReaderText:ch}}),hx=ke(function(e,t){var n,r,o,i,a,l,u,s,d,c,f,h,y,_=e.effects,E=e.palette,v=e.semanticColors,p={left:-2,top:-2,bottom:-2,right:-2,border:"none"},m={position:"absolute",width:1,right:31,top:8,bottom:8},C={splitButtonContainer:[vo(e,{highContrastStyle:p,inset:2,pointerEvents:"none"}),{display:"inline-flex",selectors:{".ms-Button--default":{borderTopRightRadius:"0",borderBottomRightRadius:"0",borderRight:"none",flexGrow:"1"},".ms-Button--primary":{borderTopRightRadius:"0",borderBottomRightRadius:"0",border:"none",flexGrow:"1",selectors:(n={},n[K]=k({color:"WindowText",backgroundColor:"Window",border:"1px solid WindowText",borderRightWidth:"0"},Er()),n[":hover"]={border:"none"},n[":active"]={border:"none"},n)},".ms-Button--primary + .ms-Button":{border:"none",selectors:(r={},r[K]={border:"1px solid WindowText",borderLeftWidth:"0"},r)}}}],splitButtonContainerHovered:{selectors:{".ms-Button--primary":{selectors:(o={},o[K]={color:"Window",backgroundColor:"Highlight"},o)},".ms-Button.is-disabled":{color:v.buttonTextDisabled,selectors:(i={},i[K]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},i)}}},splitButtonContainerChecked:{selectors:{".ms-Button--primary":{selectors:(a={},a[K]=k({color:"Window",backgroundColor:"WindowText"},Er()),a)}}},splitButtonContainerCheckedHovered:{selectors:{".ms-Button--primary":{selectors:(l={},l[K]=k({color:"Window",backgroundColor:"WindowText"},Er()),l)}}},splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:(u={padding:6,height:"auto",boxSizing:"border-box",borderRadius:0,borderTopRightRadius:_.roundedCorner2,borderBottomRightRadius:_.roundedCorner2,border:"1px solid "+E.neutralSecondaryAlt,borderLeft:"none",outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1,marginTop:0,marginRight:0,marginBottom:0},u[K]={".ms-Button-menuIcon":{color:"WindowText"}},u),splitButtonDivider:k(k({},m),{selectors:(s={},s[K]={backgroundColor:"WindowText"},s)}),splitButtonDividerDisabled:k(k({},m),{selectors:(d={},d[K]={backgroundColor:"GrayText"},d)}),splitButtonMenuButtonDisabled:{pointerEvents:"none",border:"none",selectors:(c={":hover":{cursor:"default"},".ms-Button--primary":{selectors:(f={},f[K]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},f)},".ms-Button-menuIcon":{selectors:(h={},h[K]={color:"GrayText"},h)}},c[K]={color:"GrayText",border:"1px solid GrayText",backgroundColor:"Window"},c)},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none",selectors:(y={},y[K]=k({color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},Er()),y)},splitButtonMenuFocused:k({},vo(e,{highContrastStyle:p,inset:2}))};return vr(C,t)}),sm=function(){return{position:"absolute",width:1,right:31,top:8,bottom:8}};function mx(e){var t,n,r,o,i,a=e.semanticColors,l=e.palette,u=a.buttonBackground,s=a.buttonBackgroundPressed,d=a.buttonBackgroundHovered,c=a.buttonBackgroundDisabled,f=a.buttonText,h=a.buttonTextHovered,y=a.buttonTextDisabled,_=a.buttonTextChecked,E=a.buttonTextCheckedHovered;return{root:{backgroundColor:u,color:f},rootHovered:{backgroundColor:d,color:h,selectors:(t={},t[K]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:s,color:_},rootExpanded:{backgroundColor:s,color:_},rootChecked:{backgroundColor:s,color:_},rootCheckedHovered:{backgroundColor:s,color:E},rootDisabled:{color:y,backgroundColor:c,selectors:(n={},n[K]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},n)},splitButtonContainer:{selectors:(r={},r[K]={border:"none"},r)},splitButtonMenuButton:{color:l.white,backgroundColor:"transparent",selectors:{":hover":{backgroundColor:l.neutralLight,selectors:(o={},o[K]={color:"Highlight"},o)}}},splitButtonMenuButtonDisabled:{backgroundColor:a.buttonBackgroundDisabled,selectors:{":hover":{backgroundColor:a.buttonBackgroundDisabled}}},splitButtonDivider:k(k({},sm()),{backgroundColor:l.neutralTertiaryAlt,selectors:(i={},i[K]={backgroundColor:"WindowText"},i)}),splitButtonDividerDisabled:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:l.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:l.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:l.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:l.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:a.buttonText},splitButtonMenuIconDisabled:{color:a.buttonTextDisabled}}}function gx(e){var t,n,r,o,i,a,l,u,s,d=e.palette,c=e.semanticColors;return{root:{backgroundColor:c.primaryButtonBackground,border:"1px solid "+c.primaryButtonBackground,color:c.primaryButtonText,selectors:(t={},t[K]=k({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},Er()),t["."+Ue+" &:focus"]={selectors:{":after":{border:"none",outlineColor:d.white}}},t)},rootHovered:{backgroundColor:c.primaryButtonBackgroundHovered,border:"1px solid "+c.primaryButtonBackgroundHovered,color:c.primaryButtonTextHovered,selectors:(n={},n[K]={color:"Window",backgroundColor:"Highlight",borderColor:"Highlight"},n)},rootPressed:{backgroundColor:c.primaryButtonBackgroundPressed,border:"1px solid "+c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed,selectors:(r={},r[K]=k({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},Er()),r)},rootExpanded:{backgroundColor:c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed},rootChecked:{backgroundColor:c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed},rootCheckedHovered:{backgroundColor:c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed},rootDisabled:{color:c.primaryButtonTextDisabled,backgroundColor:c.primaryButtonBackgroundDisabled,selectors:(o={},o[K]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},o)},splitButtonContainer:{selectors:(i={},i[K]={border:"none"},i)},splitButtonDivider:k(k({},sm()),{backgroundColor:d.white,selectors:(a={},a[K]={backgroundColor:"Window"},a)}),splitButtonMenuButton:{backgroundColor:c.primaryButtonBackground,color:c.primaryButtonText,selectors:(l={},l[K]={backgroundColor:"Canvas"},l[":hover"]={backgroundColor:c.primaryButtonBackgroundHovered,selectors:(u={},u[K]={color:"Highlight"},u)},l)},splitButtonMenuButtonDisabled:{backgroundColor:c.primaryButtonBackgroundDisabled,selectors:{":hover":{backgroundColor:c.primaryButtonBackgroundDisabled}}},splitButtonMenuButtonChecked:{backgroundColor:c.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:c.primaryButtonBackgroundPressed}}},splitButtonMenuButtonExpanded:{backgroundColor:c.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:c.primaryButtonBackgroundPressed}}},splitButtonMenuIcon:{color:c.primaryButtonText},splitButtonMenuIconDisabled:{color:d.neutralTertiary,selectors:(s={},s[K]={color:"GrayText"},s)}}}var yx="32px",_x="80px",Cx=ke(function(e,t,n){var r=vx(e),o=hx(e),i={root:{minWidth:_x,height:yx},label:{fontWeight:ie.semibold}};return vr(r,i,n?gx(e):mx(e),o,t)}),Ex=function(e){dt(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.render=function(){var n=this.props,r=n.primary,o=r===void 0?!1:r,i=n.styles,a=n.theme;return g.exports.createElement(px,k({},this.props,{variantClassName:o?"ms-Button--primary":"ms-Button--default",styles:Cx(a,i,o),onRenderDescription:Xs}))},t=ov([Lv("DefaultButton",["theme","styles"],!0)],t),t}(g.exports.Component),xx=function(e){dt(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.render=function(){return g.exports.createElement(Ex,k({},this.props,{primary:!0,onRenderDescription:Xs}))},t=ov([Lv("PrimaryButton",["theme","styles"],!0)],t),t}(g.exports.Component);function kx(){return $e.createElement("div",{className:"preview-ui"},$e.createElement(xx,null,"Woozy Foobar"))}function wx(e,t){if(window.self===window.top)return;function n(i){return i.startsWith(e)}function r(i){t.includes("quartoPreviewReqId=")&&window.parent.postMessage&&i.addEventListener("click",function(u){return window.parent.postMessage({type:"openExternal",url:i.href},"*"),u.preventDefault(),!1}),t.includes("capabilities=")&&(i.target="_blank")}const o=document.getElementsByTagName("a");for(let i=0;i<o.length;i++){const a=o[i];a.href&&!n(a.href)&&r(a)}}function Sx(e){function t(l,u){window.addEventListener("message",function(s){s.data.message===l&&u(s.data.data)})}function n(l,u){window.parent.postMessage&&window.parent.postMessage({type:l,message:l,data:u},"*")}function r(l){const u=l.querySelectorAll("h1, h2, h3, h4, h5, h6"),s=Reveal.getIndices(l);return{id:l.id||"",title:u.item(0)&&u.item(0).textContent||"",h:s.h,v:s.v,f:s.f}}function o(l){n("reveal-init",{slides:l})}function i(){n("reveal-slidechange",{first:Reveal.isFirstSlide(),last:Reveal.isLastSlide(),slide:r(Reveal.getCurrentSlide())})}function a(){n("reveal-hashchange",{href:window.location.href})}Reveal.on("ready",function(){Reveal.configure({history:!0});const l=Reveal.getSlides().map(r);o(l),t("reveal-ready",function(){i(),a(),window.addEventListener("hashchange",a)}),/print-pdf/gi.test(window.location.search)&&(e(),setTimeout(function(){window.print()},1e3))}),Reveal.on("slidechanged",i),t("reveal-next",function(){Reveal.next()}),t("reveal-prev",function(){Reveal.prev()}),t("reveal-slide",l=>{Reveal.slide(l.h,l.v,l.f)}),t("reveal-refresh",function(){window.location.reload()}),t("reveal-home",function(){Reveal.slide(0,0,0)}),t("reveal-fullscreen",function(){Reveal.triggerKey(70)})}function bx(){window.parent.postMessage&&(window.addEventListener("message",function(e){e.data.type==="devhost-init"?window.quartoDevhost={openInputFile:function(t,n,r){window.parent.postMessage({type:"openfile",file:"<%- inputFile %>",line:t,column:n,highlight:r},e.origin)}}:e.data.type==="goback"?window.history.back():e.data.type==="goforward"&&window.history.forward()},!0),window.parent.postMessage({type:"navigate",href:window.location.href,file:"<%- inputFile %>"},"*"))}const ak="";var cm={};(function(e){(function(t,n){if(typeof e.nodeName!="string")n(e);else{var r={};n(r),t.AnsiUp=r.default}})(ko,function(t){var n=this&&this.__makeTemplateObject||function(l,u){return Object.defineProperty?Object.defineProperty(l,"raw",{value:u}):l.raw=u,l},r;(function(l){l[l.EOS=0]="EOS",l[l.Text=1]="Text",l[l.Incomplete=2]="Incomplete",l[l.ESC=3]="ESC",l[l.Unknown=4]="Unknown",l[l.SGR=5]="SGR",l[l.OSCURL=6]="OSCURL"})(r||(r={}));var o=function(){function l(){this.VERSION="5.2.1",this.setup_palettes(),this._use_classes=!1,this.bold=!1,this.italic=!1,this.underline=!1,this.fg=this.bg=null,this._buffer="",this._url_whitelist={http:1,https:1},this._escape_html=!0}return Object.defineProperty(l.prototype,"use_classes",{get:function(){return this._use_classes},set:function(u){this._use_classes=u},enumerable:!1,configurable:!0}),Object.defineProperty(l.prototype,"url_whitelist",{get:function(){return this._url_whitelist},set:function(u){this._url_whitelist=u},enumerable:!1,configurable:!0}),Object.defineProperty(l.prototype,"escape_html",{get:function(){return this._escape_html},set:function(u){this._escape_html=u},enumerable:!1,configurable:!0}),l.prototype.setup_palettes=function(){var u=this;this.ansi_colors=[[{rgb:[0,0,0],class_name:"ansi-black"},{rgb:[187,0,0],class_name:"ansi-red"},{rgb:[0,187,0],class_name:"ansi-green"},{rgb:[187,187,0],class_name:"ansi-yellow"},{rgb:[0,0,187],class_name:"ansi-blue"},{rgb:[187,0,187],class_name:"ansi-magenta"},{rgb:[0,187,187],class_name:"ansi-cyan"},{rgb:[255,255,255],class_name:"ansi-white"}],[{rgb:[85,85,85],class_name:"ansi-bright-black"},{rgb:[255,85,85],class_name:"ansi-bright-red"},{rgb:[0,255,0],class_name:"ansi-bright-green"},{rgb:[255,255,85],class_name:"ansi-bright-yellow"},{rgb:[85,85,255],class_name:"ansi-bright-blue"},{rgb:[255,85,255],class_name:"ansi-bright-magenta"},{rgb:[85,255,255],class_name:"ansi-bright-cyan"},{rgb:[255,255,255],class_name:"ansi-bright-white"}]],this.palette_256=[],this.ansi_colors.forEach(function(v){v.forEach(function(p){u.palette_256.push(p)})});for(var s=[0,95,135,175,215,255],d=0;d<6;++d)for(var c=0;c<6;++c)for(var f=0;f<6;++f){var h={rgb:[s[d],s[c],s[f]],class_name:"truecolor"};this.palette_256.push(h)}for(var y=8,_=0;_<24;++_,y+=10){var E={rgb:[y,y,y],class_name:"truecolor"};this.palette_256.push(E)}},l.prototype.escape_txt_for_html=function(u){return this._escape_html?u.replace(/[&<>"']/gm,function(s){if(s==="&")return"&amp;";if(s==="<")return"&lt;";if(s===">")return"&gt;";if(s==='"')return"&quot;";if(s==="'")return"&#x27;"}):u},l.prototype.append_buffer=function(u){var s=this._buffer+u;this._buffer=s},l.prototype.get_next_packet=function(){var u={kind:r.EOS,text:"",url:""},s=this._buffer.length;if(s==0)return u;var d=this._buffer.indexOf("\x1B");if(d==-1)return u.kind=r.Text,u.text=this._buffer,this._buffer="",u;if(d>0)return u.kind=r.Text,u.text=this._buffer.slice(0,d),this._buffer=this._buffer.slice(d),u;if(d==0){if(s<3)return u.kind=r.Incomplete,u;var c=this._buffer.charAt(1);if(c!="["&&c!="]"&&c!="(")return u.kind=r.ESC,u.text=this._buffer.slice(0,1),this._buffer=this._buffer.slice(1),u;if(c=="["){this._csi_regex||(this._csi_regex=i(n([`
                        ^                           # beginning of line
                                                    #
                                                    # First attempt
                        (?:                         # legal sequence
                          \x1B[                      # CSI
                          ([<-?]?)              # private-mode char
                          ([d;]*)                    # any digits or semicolons
                          ([ -/]?               # an intermediate modifier
                          [@-~])                # the command
                        )
                        |                           # alternate (second attempt)
                        (?:                         # illegal sequence
                          \x1B[                      # CSI
                          [ -~]*                # anything legal
                          ([\0-:])              # anything illegal
                        )
                    `],[`
                        ^                           # beginning of line
                                                    #
                                                    # First attempt
                        (?:                         # legal sequence
                          \\x1b\\[                      # CSI
                          ([\\x3c-\\x3f]?)              # private-mode char
                          ([\\d;]*)                    # any digits or semicolons
                          ([\\x20-\\x2f]?               # an intermediate modifier
                          [\\x40-\\x7e])                # the command
                        )
                        |                           # alternate (second attempt)
                        (?:                         # illegal sequence
                          \\x1b\\[                      # CSI
                          [\\x20-\\x7e]*                # anything legal
                          ([\\x00-\\x1f:])              # anything illegal
                        )
                    `])));var f=this._buffer.match(this._csi_regex);if(f===null)return u.kind=r.Incomplete,u;if(f[4])return u.kind=r.ESC,u.text=this._buffer.slice(0,1),this._buffer=this._buffer.slice(1),u;f[1]!=""||f[3]!="m"?u.kind=r.Unknown:u.kind=r.SGR,u.text=f[2];var h=f[0].length;return this._buffer=this._buffer.slice(h),u}else if(c=="]"){if(s<4)return u.kind=r.Incomplete,u;if(this._buffer.charAt(2)!="8"||this._buffer.charAt(3)!=";")return u.kind=r.ESC,u.text=this._buffer.slice(0,1),this._buffer=this._buffer.slice(1),u;this._osc_st||(this._osc_st=a(n([`
                        (?:                         # legal sequence
                          (\x1B\\)                    # ESC                           |                           # alternate
                          (\x07)                      # BEL (what xterm did)
                        )
                        |                           # alternate (second attempt)
                        (                           # illegal sequence
                          [\0-]                 # anything illegal
                          |                           # alternate
                          [\b-]                 # anything illegal
                          |                           # alternate
                          [-]                 # anything illegal
                        )
                    `],[`
                        (?:                         # legal sequence
                          (\\x1b\\\\)                    # ESC \\
                          |                           # alternate
                          (\\x07)                      # BEL (what xterm did)
                        )
                        |                           # alternate (second attempt)
                        (                           # illegal sequence
                          [\\x00-\\x06]                 # anything illegal
                          |                           # alternate
                          [\\x08-\\x1a]                 # anything illegal
                          |                           # alternate
                          [\\x1c-\\x1f]                 # anything illegal
                        )
                    `]))),this._osc_st.lastIndex=0;{var y=this._osc_st.exec(this._buffer);if(y===null)return u.kind=r.Incomplete,u;if(y[3])return u.kind=r.ESC,u.text=this._buffer.slice(0,1),this._buffer=this._buffer.slice(1),u}{var _=this._osc_st.exec(this._buffer);if(_===null)return u.kind=r.Incomplete,u;if(_[3])return u.kind=r.ESC,u.text=this._buffer.slice(0,1),this._buffer=this._buffer.slice(1),u}this._osc_regex||(this._osc_regex=i(n([`
                        ^                           # beginning of line
                                                    #
                        \x1B]8;                    # OSC Hyperlink
                        [ -:<-~]*       # params (excluding ;)
                        ;                           # end of params
                        ([!-~]{0,512})        # URL capture
                        (?:                         # ST
                          (?:\x1B\\)                  # ESC                           |                           # alternate
                          (?:\x07)                    # BEL (what xterm did)
                        )
                        ([ -~]+)              # TEXT capture
                        \x1B]8;;                   # OSC Hyperlink End
                        (?:                         # ST
                          (?:\x1B\\)                  # ESC                           |                           # alternate
                          (?:\x07)                    # BEL (what xterm did)
                        )
                    `],[`
                        ^                           # beginning of line
                                                    #
                        \\x1b\\]8;                    # OSC Hyperlink
                        [\\x20-\\x3a\\x3c-\\x7e]*       # params (excluding ;)
                        ;                           # end of params
                        ([\\x21-\\x7e]{0,512})        # URL capture
                        (?:                         # ST
                          (?:\\x1b\\\\)                  # ESC \\
                          |                           # alternate
                          (?:\\x07)                    # BEL (what xterm did)
                        )
                        ([\\x20-\\x7e]+)              # TEXT capture
                        \\x1b\\]8;;                   # OSC Hyperlink End
                        (?:                         # ST
                          (?:\\x1b\\\\)                  # ESC \\
                          |                           # alternate
                          (?:\\x07)                    # BEL (what xterm did)
                        )
                    `])));var f=this._buffer.match(this._osc_regex);if(f===null)return u.kind=r.ESC,u.text=this._buffer.slice(0,1),this._buffer=this._buffer.slice(1),u;u.kind=r.OSCURL,u.url=f[1],u.text=f[2];var h=f[0].length;return this._buffer=this._buffer.slice(h),u}else if(c=="(")return u.kind=r.Unknown,this._buffer=this._buffer.slice(3),u}},l.prototype.ansi_to_html=function(u){this.append_buffer(u);for(var s=[];;){var d=this.get_next_packet();if(d.kind==r.EOS||d.kind==r.Incomplete)break;d.kind==r.ESC||d.kind==r.Unknown||(d.kind==r.Text?s.push(this.transform_to_html(this.with_state(d))):d.kind==r.SGR?this.process_ansi(d):d.kind==r.OSCURL&&s.push(this.process_hyperlink(d)))}return s.join("")},l.prototype.with_state=function(u){return{bold:this.bold,italic:this.italic,underline:this.underline,fg:this.fg,bg:this.bg,text:u.text}},l.prototype.process_ansi=function(u){for(var s=u.text.split(";");s.length>0;){var d=s.shift(),c=parseInt(d,10);if(isNaN(c)||c===0)this.fg=this.bg=null,this.bold=!1,this.italic=!1,this.underline=!1;else if(c===1)this.bold=!0;else if(c===3)this.italic=!0;else if(c===4)this.underline=!0;else if(c===22)this.bold=!1;else if(c===23)this.italic=!1;else if(c===24)this.underline=!1;else if(c===39)this.fg=null;else if(c===49)this.bg=null;else if(c>=30&&c<38)this.fg=this.ansi_colors[0][c-30];else if(c>=40&&c<48)this.bg=this.ansi_colors[0][c-40];else if(c>=90&&c<98)this.fg=this.ansi_colors[1][c-90];else if(c>=100&&c<108)this.bg=this.ansi_colors[1][c-100];else if((c===38||c===48)&&s.length>0){var f=c===38,h=s.shift();if(h==="5"&&s.length>0){var y=parseInt(s.shift(),10);y>=0&&y<=255&&(f?this.fg=this.palette_256[y]:this.bg=this.palette_256[y])}if(h==="2"&&s.length>2){var _=parseInt(s.shift(),10),E=parseInt(s.shift(),10),v=parseInt(s.shift(),10);if(_>=0&&_<=255&&E>=0&&E<=255&&v>=0&&v<=255){var p={rgb:[_,E,v],class_name:"truecolor"};f?this.fg=p:this.bg=p}}}}},l.prototype.transform_to_html=function(u){var s=u.text;if(s.length===0||(s=this.escape_txt_for_html(s),!u.bold&&!u.italic&&!u.underline&&u.fg===null&&u.bg===null))return s;var d=[],c=[],f=u.fg,h=u.bg;u.bold&&d.push("font-weight:bold"),u.italic&&d.push("font-style:italic"),u.underline&&d.push("text-decoration:underline"),this._use_classes?(f&&(f.class_name!=="truecolor"?c.push(f.class_name+"-fg"):d.push("color:rgb("+f.rgb.join(",")+")")),h&&(h.class_name!=="truecolor"?c.push(h.class_name+"-bg"):d.push("background-color:rgb("+h.rgb.join(",")+")"))):(f&&d.push("color:rgb("+f.rgb.join(",")+")"),h&&d.push("background-color:rgb("+h.rgb+")"));var y="",_="";return c.length&&(y=' class="'+c.join(" ")+'"'),d.length&&(_=' style="'+d.join(";")+'"'),"<span"+_+y+">"+s+"</span>"},l.prototype.process_hyperlink=function(u){var s=u.url.split(":");if(s.length<1||!this._url_whitelist[s[0]])return"";var d='<a href="'+this.escape_txt_for_html(u.url)+'">'+this.escape_txt_for_html(u.text)+"</a>";return d},l}();function i(l){var u=l.raw[0],s=/^\s+|\s+\n|\s*#[\s\S]*?\n|\n/gm,d=u.replace(s,"");return new RegExp(d)}function a(l){var u=l.raw[0],s=/^\s+|\s+\n|\s*#[\s\S]*?\n|\n/gm,d=u.replace(s,"");return new RegExp(d,"g")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=o})})(cm);const Ix=Fc(cm);function Tx(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wl(e){return function(t){if(Array.isArray(t))return Mc(t)}(e)||function(t){if(typeof Symbol<"u"&&Symbol.iterator in Object(t))return Array.from(t)}(e)||function(t,n){if(!!t){if(typeof t=="string")return Mc(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);if(r==="Object"&&t.constructor&&(r=t.constructor.name),r==="Map"||r==="Set")return Array.from(t);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Mc(t,n)}}(e)||function(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function Mc(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var dm,Pc,wr,Dc,fm,pm=(dm=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],Pc=function(){function e(r){var o=r.targetModal,i=r.triggers,a=i===void 0?[]:i,l=r.onShow,u=l===void 0?function(){}:l,s=r.onClose,d=s===void 0?function(){}:s,c=r.openTrigger,f=c===void 0?"data-micromodal-trigger":c,h=r.closeTrigger,y=h===void 0?"data-micromodal-close":h,_=r.openClass,E=_===void 0?"is-open":_,v=r.disableScroll,p=v!==void 0&&v,m=r.disableFocus,C=m!==void 0&&m,w=r.awaitCloseAnimation,S=w!==void 0&&w,x=r.awaitOpenAnimation,b=x!==void 0&&x,T=r.debugMode,P=T!==void 0&&T;(function(W,H){if(!(W instanceof H))throw new TypeError("Cannot call a class as a function")})(this,e),this.modal=document.getElementById(o),this.config={debugMode:P,disableScroll:p,openTrigger:f,closeTrigger:y,openClass:E,onShow:u,onClose:d,awaitCloseAnimation:S,awaitOpenAnimation:b,disableFocus:C},a.length>0&&this.registerTriggers.apply(this,wl(a)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var t,n;return t=e,(n=[{key:"registerTriggers",value:function(){for(var r=this,o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];i.filter(Boolean).forEach(function(l){l.addEventListener("click",function(u){return r.showModal(u)})})}},{key:"showModal",value:function(){var r=this,o=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var i=function a(){r.modal.removeEventListener("animationend",a,!1),r.setFocusToFirstNode()};this.modal.addEventListener("animationend",i,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,o)}},{key:"closeModal",value:function(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,o=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,r),this.config.awaitCloseAnimation){var i=this.config.openClass;this.modal.addEventListener("animationend",function a(){o.classList.remove(i),o.removeEventListener("animationend",a,!1)},!1)}else o.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(r){this.modal=document.getElementById(r),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(r){if(this.config.disableScroll){var o=document.querySelector("body");switch(r){case"enable":Object.assign(o.style,{overflow:""});break;case"disable":Object.assign(o.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(r){(r.target.hasAttribute(this.config.closeTrigger)||r.target.parentNode.hasAttribute(this.config.closeTrigger))&&(r.preventDefault(),r.stopPropagation(),this.closeModal(r))}},{key:"onKeydown",value:function(r){r.keyCode===27&&this.closeModal(r),r.keyCode===9&&this.retainFocus(r)}},{key:"getFocusableNodes",value:function(){var r=this.modal.querySelectorAll(dm);return Array.apply(void 0,wl(r))}},{key:"setFocusToFirstNode",value:function(){var r=this;if(!this.config.disableFocus){var o=this.getFocusableNodes();if(o.length!==0){var i=o.filter(function(a){return!a.hasAttribute(r.config.closeTrigger)});i.length>0&&i[0].focus(),i.length===0&&o[0].focus()}}}},{key:"retainFocus",value:function(r){var o=this.getFocusableNodes();if(o.length!==0)if(o=o.filter(function(a){return a.offsetParent!==null}),this.modal.contains(document.activeElement)){var i=o.indexOf(document.activeElement);r.shiftKey&&i===0&&(o[o.length-1].focus(),r.preventDefault()),!r.shiftKey&&o.length>0&&i===o.length-1&&(o[0].focus(),r.preventDefault())}else o[0].focus()}}])&&Tx(t.prototype,n),e}(),wr=null,Dc=function(e){if(!document.getElementById(e))return console.warn("MicroModal: \u2757Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},fm=function(e,t){if(function(r){r.length<=0&&(console.warn("MicroModal: \u2757Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var n in t)Dc(n);return!0},{init:function(e){var t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),n=wl(document.querySelectorAll("[".concat(t.openTrigger,"]"))),r=function(a,l){var u=[];return a.forEach(function(s){var d=s.attributes[l].value;u[d]===void 0&&(u[d]=[]),u[d].push(s)}),u}(n,t.openTrigger);if(t.debugMode!==!0||fm(n,r)!==!1)for(var o in r){var i=r[o];t.targetModal=o,t.triggers=wl(i),wr=new Pc(t)}},show:function(e,t){var n=t||{};n.targetModal=e,n.debugMode===!0&&Dc(e)===!1||(wr&&wr.removeEventListeners(),(wr=new Pc(n)).showModal())},close:function(e){e?wr.closeModalById(e):wr.closeModal()}});typeof window<"u"&&(window.MicroModal=pm);const lk="";function Mx(){const e=document.createElement("div");document.body.appendChild(e),js(e).render($e.createElement(Px,null)),window.parent.postMessage&&window.document.addEventListener("keydown",_=>{const E={type:"keydown",data:{altKey:_.altKey,code:_.code,ctrlKey:_.ctrlKey,isComposing:_.isComposing,key:_.key,location:_.location,metaKey:_.metaKey,repeat:_.repeat,shiftKey:_.shiftKey}};window.parent.postMessage(E,"*")}),window.addEventListener("message",function(_){_.data.type==="devhost-exec-command"&&window.document.execCommand(_.data.data)},!0);const n=new Array(1e3);let r=0;r=0;function o(_){n[r++]=_,r%=n.length}function i(_){return n[(r-1-_+n.length)%n.length]}const a=window.location.protocol==="https:"?"wss:":"ws:";let l=window.location.pathname;/\/$/.test(l)||(l+="/");const u=new WebSocket(a+"//"+window.location.host+l);let s=!0;addEventListener("beforeunload",()=>{s=!1}),u.onopen=()=>{console.log("Socket connection open. Listening for events."),u.onclose=()=>{s&&(console.log("Socket connection closed. Reloading."),window.location.reload())}};let d=0;const c=2500;function f(_){const v=new Ix().ansi_to_html(_.trim()),p=document.getElementById("quarto-log-error-display");p.innerHTML&&Date.now()-d<c?p.innerHTML=p.innerHTML+"<br/>"+v:p.innerHTML=v,d=Date.now(),pm.show("quarto-log-error-modal",{awaitCloseAnimation:!0,onClose:()=>{p.innerHTML=""}}),window.parent.postMessage&&window.parent.postMessage({type:"error",msg:_},"*")}const h=document.getElementById("quarto-render-error");h&&f(h.innerHTML.trim());const y=_=>_.replace(/\/index\.html/,"/");return u.onmessage=_=>{if(_.data.startsWith("reload")){let E=y(_.data.replace(/^reload/,""));if(E){const v=window.location.pathname.match(/^.*?\/p\/\w+\//)||window.location.pathname.match(/^.*?\/user\/[\w\d]+\/proxy\/\d+\//);v&&(E=v+E.slice(1))}E&&E!==y(window.location.pathname)?window.location.replace(E):window.location.reload()}else if(_.data.startsWith("log:")){const E=JSON.parse(_.data.substr(4));if(o(E),E.levelName==="ERROR")f(E.msgFormatted);else{const v="Execution halted";if(E.msg.indexOf(v)!==-1){const p=[i(0).msgFormatted];for(let m=1;m<n.length;m++){const C=i(m);if(C){if(p.unshift(C.msgFormatted),C.msg.indexOf("Quitting from lines")!==-1){f(p.join(""));break}else if(C.msg.indexOf(v)!==-1)break}else break}}}}},()=>{try{u.close()}catch(_){console.error(_)}}}function Px(){return $e.createElement("div",{className:"modal__dialog micromodal-slide",id:"quarto-log-error-modal","aria-hidden":"true"},$e.createElement("div",{className:"modal__overlay",tabIndex:2,"data-micromodal-close":"1"},$e.createElement("div",{className:"modal__container",role:"dialog","aria-modal":"true","aria-labelledby":"quarto-log-error-modal-title"},$e.createElement("header",{className:"modal__header"},$e.createElement("h2",{className:"modal__title",id:"quarto-log-error-modal-title"},$e.createElement("i",{className:"bi bi-exclamation-circle"}),"Error"),$e.createElement("button",{className:"modal__close","aria-label":"Close modal","data-micromodal-close":!0})),$e.createElement("div",{className:"modal__content",id:"quarto-log-error-modal-content"},$e.createElement("pre",{tabIndex:1,id:"quarto-log-error-display"})),$e.createElement("footer",{className:"modal__footer"}))))}async function Dx(e){try{const t=Mx();e.origin&&e.search&&wx(e.origin,e.search),e.isPresentation?Sx(t):bx();const n=document.createElement("div");document.body.appendChild(n),js(n).render($e.createElement(kx,null))}catch(t){console.error(t)}}Tr.init=Dx,Object.defineProperties(Tr,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
