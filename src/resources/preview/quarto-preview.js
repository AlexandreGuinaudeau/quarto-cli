(function(Ir,ko){typeof exports=="object"&&typeof module<"u"?ko(exports):typeof define=="function"&&define.amd?define(["exports"],ko):(Ir=typeof globalThis<"u"?globalThis:Ir||self,ko(Ir.QuartoPreview={}))})(this,function(Ir){"use strict";function ko(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var g={exports:{}},H={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Eo=Symbol.for("react.element"),kh=Symbol.for("react.portal"),Eh=Symbol.for("react.fragment"),xh=Symbol.for("react.strict_mode"),Sh=Symbol.for("react.profiler"),wh=Symbol.for("react.provider"),Ih=Symbol.for("react.context"),Th=Symbol.for("react.forward_ref"),bh=Symbol.for("react.suspense"),Mh=Symbol.for("react.memo"),Ph=Symbol.for("react.lazy"),Dc=Symbol.iterator;function Dh(e){return e===null||typeof e!="object"?null:(e=Dc&&e[Dc]||e["@@iterator"],typeof e=="function"?e:null)}var Nc={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Bc=Object.assign,Rc={};function Tr(e,t,n){this.props=e,this.context=t,this.refs=Rc,this.updater=n||Nc}Tr.prototype.isReactComponent={},Tr.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},Tr.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Lc(){}Lc.prototype=Tr.prototype;function bu(e,t,n){this.props=e,this.context=t,this.refs=Rc,this.updater=n||Nc}var Mu=bu.prototype=new Lc;Mu.constructor=bu,Bc(Mu,Tr.prototype),Mu.isPureReactComponent=!0;var Fc=Array.isArray,Oc=Object.prototype.hasOwnProperty,Pu={current:null},Ac={key:!0,ref:!0,__self:!0,__source:!0};function zc(e,t,n){var r,o={},i=null,a=null;if(t!=null)for(r in t.ref!==void 0&&(a=t.ref),t.key!==void 0&&(i=""+t.key),t)Oc.call(t,r)&&!Ac.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(u===1)o.children=n;else if(1<u){for(var l=Array(u),s=0;s<u;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps,u)o[r]===void 0&&(o[r]=u[r]);return{$$typeof:Eo,type:e,key:i,ref:a,props:o,_owner:Pu.current}}function Nh(e,t){return{$$typeof:Eo,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Du(e){return typeof e=="object"&&e!==null&&e.$$typeof===Eo}function Bh(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var Hc=/\/+/g;function Nu(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Bh(""+e.key):t.toString(36)}function Ri(e,t,n,r,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var a=!1;if(e===null)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case Eo:case kh:a=!0}}if(a)return a=e,o=o(a),e=r===""?"."+Nu(a,0):r,Fc(o)?(n="",e!=null&&(n=e.replace(Hc,"$&/")+"/"),Ri(o,t,n,"",function(s){return s})):o!=null&&(Du(o)&&(o=Nh(o,n+(!o.key||a&&a.key===o.key?"":(""+o.key).replace(Hc,"$&/")+"/")+e)),t.push(o)),1;if(a=0,r=r===""?".":r+":",Fc(e))for(var u=0;u<e.length;u++){i=e[u];var l=r+Nu(i,u);a+=Ri(i,t,n,l,o)}else if(l=Dh(e),typeof l=="function")for(e=l.call(e),u=0;!(i=e.next()).done;)i=i.value,l=r+Nu(i,u++),a+=Ri(i,t,n,l,o);else if(i==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function Li(e,t,n){if(e==null)return e;var r=[],o=0;return Ri(e,r,"","",function(i){return t.call(n,i,o++)}),r}function Rh(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Fe={current:null},Fi={transition:null},Lh={ReactCurrentDispatcher:Fe,ReactCurrentBatchConfig:Fi,ReactCurrentOwner:Pu};H.Children={map:Li,forEach:function(e,t,n){Li(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Li(e,function(){t++}),t},toArray:function(e){return Li(e,function(t){return t})||[]},only:function(e){if(!Du(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},H.Component=Tr,H.Fragment=Eh,H.Profiler=Sh,H.PureComponent=bu,H.StrictMode=xh,H.Suspense=bh,H.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Lh,H.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Bc({},e.props),o=e.key,i=e.ref,a=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,a=Pu.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)Oc.call(t,l)&&!Ac.hasOwnProperty(l)&&(r[l]=t[l]===void 0&&u!==void 0?u[l]:t[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){u=Array(l);for(var s=0;s<l;s++)u[s]=arguments[s+2];r.children=u}return{$$typeof:Eo,type:e.type,key:o,ref:i,props:r,_owner:a}},H.createContext=function(e){return e={$$typeof:Ih,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:wh,_context:e},e.Consumer=e},H.createElement=zc,H.createFactory=function(e){var t=zc.bind(null,e);return t.type=e,t},H.createRef=function(){return{current:null}},H.forwardRef=function(e){return{$$typeof:Th,render:e}},H.isValidElement=Du,H.lazy=function(e){return{$$typeof:Ph,_payload:{_status:-1,_result:e},_init:Rh}},H.memo=function(e,t){return{$$typeof:Mh,type:e,compare:t===void 0?null:t}},H.startTransition=function(e){var t=Fi.transition;Fi.transition={};try{e()}finally{Fi.transition=t}},H.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},H.useCallback=function(e,t){return Fe.current.useCallback(e,t)},H.useContext=function(e){return Fe.current.useContext(e)},H.useDebugValue=function(){},H.useDeferredValue=function(e){return Fe.current.useDeferredValue(e)},H.useEffect=function(e,t){return Fe.current.useEffect(e,t)},H.useId=function(){return Fe.current.useId()},H.useImperativeHandle=function(e,t,n){return Fe.current.useImperativeHandle(e,t,n)},H.useInsertionEffect=function(e,t){return Fe.current.useInsertionEffect(e,t)},H.useLayoutEffect=function(e,t){return Fe.current.useLayoutEffect(e,t)},H.useMemo=function(e,t){return Fe.current.useMemo(e,t)},H.useReducer=function(e,t,n){return Fe.current.useReducer(e,t,n)},H.useRef=function(e){return Fe.current.useRef(e)},H.useState=function(e){return Fe.current.useState(e)},H.useSyncExternalStore=function(e,t,n){return Fe.current.useSyncExternalStore(e,t,n)},H.useTransition=function(){return Fe.current.useTransition()},H.version="18.2.0",function(e){e.exports=H}(g);const Bu=ko(g.exports);var Ru={exports:{}},ot={},Uc={exports:{}},Wc={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(P,B){var L=P.length;P.push(B);e:for(;0<L;){var X=L-1>>>1,O=P[X];if(0<o(O,B))P[X]=B,P[L]=O,L=X;else break e}}function n(P){return P.length===0?null:P[0]}function r(P){if(P.length===0)return null;var B=P[0],L=P.pop();if(L!==B){P[0]=L;e:for(var X=0,O=P.length,ht=O>>>1;X<ht;){var nt=2*(X+1)-1,xr=P[nt],Mt=nt+1,_n=P[Mt];if(0>o(xr,L))Mt<O&&0>o(_n,xr)?(P[X]=_n,P[Mt]=L,X=Mt):(P[X]=xr,P[nt]=L,X=nt);else if(Mt<O&&0>o(_n,L))P[X]=_n,P[Mt]=L,X=Mt;else break e}}return B}function o(P,B){var L=P.sortIndex-B.sortIndex;return L!==0?L:P.id-B.id}if(typeof performance=="object"&&typeof performance.now=="function"){var i=performance;e.unstable_now=function(){return i.now()}}else{var a=Date,u=a.now();e.unstable_now=function(){return a.now()-u}}var l=[],s=[],d=1,c=null,f=3,m=!1,y=!1,C=!1,E=typeof setTimeout=="function"?setTimeout:null,v=typeof clearTimeout=="function"?clearTimeout:null,p=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function h(P){for(var B=n(s);B!==null;){if(B.callback===null)r(s);else if(B.startTime<=P)r(s),B.sortIndex=B.expirationTime,t(l,B);else break;B=n(s)}}function _(P){if(C=!1,h(P),!y)if(n(l)!==null)y=!0,tt(S);else{var B=n(s);B!==null&&Me(_,B.startTime-P)}}function S(P,B){y=!1,C&&(C=!1,v(I),I=-1),m=!0;var L=f;try{for(h(B),c=n(l);c!==null&&(!(c.expirationTime>B)||P&&!j());){var X=c.callback;if(typeof X=="function"){c.callback=null,f=c.priorityLevel;var O=X(c.expirationTime<=B);B=e.unstable_now(),typeof O=="function"?c.callback=O:c===n(l)&&r(l),h(B)}else r(l);c=n(l)}if(c!==null)var ht=!0;else{var nt=n(s);nt!==null&&Me(_,nt.startTime-B),ht=!1}return ht}finally{c=null,f=L,m=!1}}var w=!1,k=null,I=-1,b=5,D=-1;function j(){return!(e.unstable_now()-D<b)}function U(){if(k!==null){var P=e.unstable_now();D=P;var B=!0;try{B=k(!0,P)}finally{B?ae():(w=!1,k=null)}}else w=!1}var ae;if(typeof p=="function")ae=function(){p(U)};else if(typeof MessageChannel<"u"){var G=new MessageChannel,te=G.port2;G.port1.onmessage=U,ae=function(){te.postMessage(null)}}else ae=function(){E(U,0)};function tt(P){k=P,w||(w=!0,ae())}function Me(P,B){I=E(function(){P(e.unstable_now())},B)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(P){P.callback=null},e.unstable_continueExecution=function(){y||m||(y=!0,tt(S))},e.unstable_forceFrameRate=function(P){0>P||125<P?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<P?Math.floor(1e3/P):5},e.unstable_getCurrentPriorityLevel=function(){return f},e.unstable_getFirstCallbackNode=function(){return n(l)},e.unstable_next=function(P){switch(f){case 1:case 2:case 3:var B=3;break;default:B=f}var L=f;f=B;try{return P()}finally{f=L}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(P,B){switch(P){case 1:case 2:case 3:case 4:case 5:break;default:P=3}var L=f;f=P;try{return B()}finally{f=L}},e.unstable_scheduleCallback=function(P,B,L){var X=e.unstable_now();switch(typeof L=="object"&&L!==null?(L=L.delay,L=typeof L=="number"&&0<L?X+L:X):L=X,P){case 1:var O=-1;break;case 2:O=250;break;case 5:O=1073741823;break;case 4:O=1e4;break;default:O=5e3}return O=L+O,P={id:d++,callback:B,priorityLevel:P,startTime:L,expirationTime:O,sortIndex:-1},L>X?(P.sortIndex=L,t(s,P),n(l)===null&&P===n(s)&&(C?(v(I),I=-1):C=!0,Me(_,L-X))):(P.sortIndex=O,t(l,P),y||m||(y=!0,tt(S))),P},e.unstable_shouldYield=j,e.unstable_wrapCallback=function(P){var B=f;return function(){var L=f;f=B;try{return P.apply(this,arguments)}finally{f=L}}}})(Wc),function(e){e.exports=Wc}(Uc);/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Kc=g.exports,it=Uc.exports;function T(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var jc=new Set,xo={};function Jn(e,t){br(e,t),br(e+"Capture",t)}function br(e,t){for(xo[e]=t,e=0;e<t.length;e++)jc.add(t[e])}var Jt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Lu=Object.prototype.hasOwnProperty,Fh=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Vc={},$c={};function Oh(e){return Lu.call($c,e)?!0:Lu.call(Vc,e)?!1:Fh.test(e)?$c[e]=!0:(Vc[e]=!0,!1)}function Ah(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function zh(e,t,n,r){if(t===null||typeof t>"u"||Ah(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Oe(e,t,n,r,o,i,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var Ie={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Ie[e]=new Oe(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Ie[t]=new Oe(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Ie[e]=new Oe(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Ie[e]=new Oe(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Ie[e]=new Oe(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){Ie[e]=new Oe(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){Ie[e]=new Oe(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){Ie[e]=new Oe(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){Ie[e]=new Oe(e,5,!1,e.toLowerCase(),null,!1,!1)});var Fu=/[\-:]([a-z])/g;function Ou(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Fu,Ou);Ie[t]=new Oe(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Fu,Ou);Ie[t]=new Oe(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Fu,Ou);Ie[t]=new Oe(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){Ie[e]=new Oe(e,1,!1,e.toLowerCase(),null,!1,!1)}),Ie.xlinkHref=new Oe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){Ie[e]=new Oe(e,1,!1,e.toLowerCase(),null,!0,!0)});function Au(e,t,n,r){var o=Ie.hasOwnProperty(t)?Ie[t]:null;(o!==null?o.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(zh(t,n,o,r)&&(n=null),r||o===null?Oh(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=n===null?o.type===3?!1:"":n:(t=o.attributeName,r=o.attributeNamespace,n===null?e.removeAttribute(t):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var en=Kc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Oi=Symbol.for("react.element"),Mr=Symbol.for("react.portal"),Pr=Symbol.for("react.fragment"),zu=Symbol.for("react.strict_mode"),Hu=Symbol.for("react.profiler"),Gc=Symbol.for("react.provider"),Qc=Symbol.for("react.context"),Uu=Symbol.for("react.forward_ref"),Wu=Symbol.for("react.suspense"),Ku=Symbol.for("react.suspense_list"),ju=Symbol.for("react.memo"),kn=Symbol.for("react.lazy"),Yc=Symbol.for("react.offscreen"),Xc=Symbol.iterator;function So(e){return e===null||typeof e!="object"?null:(e=Xc&&e[Xc]||e["@@iterator"],typeof e=="function"?e:null)}var ue=Object.assign,Vu;function wo(e){if(Vu===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);Vu=t&&t[1]||""}return`
`+Vu+e}var $u=!1;function Gu(e,t){if(!e||$u)return"";$u=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(s){var r=s}Reflect.construct(e,[],t)}else{try{t.call()}catch(s){r=s}e.call(t.prototype)}else{try{throw Error()}catch(s){r=s}e()}}catch(s){if(s&&r&&typeof s.stack=="string"){for(var o=s.stack.split(`
`),i=r.stack.split(`
`),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(a!==1||u!==1)do if(a--,u--,0>u||o[a]!==i[u]){var l=`
`+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=a&&0<=u);break}}}finally{$u=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?wo(e):""}function Hh(e){switch(e.tag){case 5:return wo(e.type);case 16:return wo("Lazy");case 13:return wo("Suspense");case 19:return wo("SuspenseList");case 0:case 2:case 15:return e=Gu(e.type,!1),e;case 11:return e=Gu(e.type.render,!1),e;case 1:return e=Gu(e.type,!0),e;default:return""}}function Qu(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Pr:return"Fragment";case Mr:return"Portal";case Hu:return"Profiler";case zu:return"StrictMode";case Wu:return"Suspense";case Ku:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Qc:return(e.displayName||"Context")+".Consumer";case Gc:return(e._context.displayName||"Context")+".Provider";case Uu:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case ju:return t=e.displayName||null,t!==null?t:Qu(e.type)||"Memo";case kn:t=e._payload,e=e._init;try{return Qu(e(t))}catch{}}return null}function Uh(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Qu(t);case 8:return t===zu?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function En(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function qc(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Wh(e){var t=qc(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(a){r=""+a,i.call(this,a)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(a){r=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Ai(e){e._valueTracker||(e._valueTracker=Wh(e))}function Zc(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qc(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function zi(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Yu(e,t){var n=t.checked;return ue({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n!=null?n:e._wrapperState.initialChecked})}function Jc(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=En(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function ed(e,t){t=t.checked,t!=null&&Au(e,"checked",t,!1)}function Xu(e,t){ed(e,t);var n=En(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?qu(e,t.type,n):t.hasOwnProperty("defaultValue")&&qu(e,t.type,En(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function td(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function qu(e,t,n){(t!=="number"||zi(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Io=Array.isArray;function Dr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+En(n),t=null,o=0;o<e.length;o++){if(e[o].value===n){e[o].selected=!0,r&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function Zu(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(T(91));return ue({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function nd(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(T(92));if(Io(n)){if(1<n.length)throw Error(T(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:En(n)}}function rd(e,t){var n=En(t.value),r=En(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function od(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function id(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ju(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?id(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Hi,ad=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Hi=Hi||document.createElement("div"),Hi.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Hi.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function To(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var bo={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Kh=["Webkit","ms","Moz","O"];Object.keys(bo).forEach(function(e){Kh.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),bo[t]=bo[e]})});function ud(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||bo.hasOwnProperty(e)&&bo[e]?(""+t).trim():t+"px"}function ld(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=ud(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}var jh=ue({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function el(e,t){if(t){if(jh[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(T(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(T(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(T(61))}if(t.style!=null&&typeof t.style!="object")throw Error(T(62))}}function tl(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var nl=null;function rl(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var ol=null,Nr=null,Br=null;function sd(e){if(e=Xo(e)){if(typeof ol!="function")throw Error(T(280));var t=e.stateNode;t&&(t=sa(t),ol(e.stateNode,e.type,t))}}function cd(e){Nr?Br?Br.push(e):Br=[e]:Nr=e}function dd(){if(Nr){var e=Nr,t=Br;if(Br=Nr=null,sd(e),t)for(e=0;e<t.length;e++)sd(t[e])}}function fd(e,t){return e(t)}function pd(){}var il=!1;function vd(e,t,n){if(il)return e(t,n);il=!0;try{return fd(e,t,n)}finally{il=!1,(Nr!==null||Br!==null)&&(pd(),dd())}}function Mo(e,t){var n=e.stateNode;if(n===null)return null;var r=sa(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(T(231,t,typeof n));return n}var al=!1;if(Jt)try{var Po={};Object.defineProperty(Po,"passive",{get:function(){al=!0}}),window.addEventListener("test",Po,Po),window.removeEventListener("test",Po,Po)}catch{al=!1}function Vh(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(d){this.onError(d)}}var Do=!1,Ui=null,Wi=!1,ul=null,$h={onError:function(e){Do=!0,Ui=e}};function Gh(e,t,n,r,o,i,a,u,l){Do=!1,Ui=null,Vh.apply($h,arguments)}function Qh(e,t,n,r,o,i,a,u,l){if(Gh.apply(this,arguments),Do){if(Do){var s=Ui;Do=!1,Ui=null}else throw Error(T(198));Wi||(Wi=!0,ul=s)}}function er(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&4098)!==0&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function md(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function hd(e){if(er(e)!==e)throw Error(T(188))}function Yh(e){var t=e.alternate;if(!t){if(t=er(e),t===null)throw Error(T(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(o===null)break;var i=o.alternate;if(i===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return hd(o),e;if(i===r)return hd(o),t;i=i.sibling}throw Error(T(188))}if(n.return!==r.return)n=o,r=i;else{for(var a=!1,u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}if(!a)throw Error(T(189))}}if(n.alternate!==r)throw Error(T(190))}if(n.tag!==3)throw Error(T(188));return n.stateNode.current===n?e:t}function gd(e){return e=Yh(e),e!==null?yd(e):null}function yd(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=yd(e);if(t!==null)return t;e=e.sibling}return null}var _d=it.unstable_scheduleCallback,Cd=it.unstable_cancelCallback,Xh=it.unstable_shouldYield,qh=it.unstable_requestPaint,ve=it.unstable_now,Zh=it.unstable_getCurrentPriorityLevel,ll=it.unstable_ImmediatePriority,kd=it.unstable_UserBlockingPriority,Ki=it.unstable_NormalPriority,Jh=it.unstable_LowPriority,Ed=it.unstable_IdlePriority,ji=null,Ut=null;function eg(e){if(Ut&&typeof Ut.onCommitFiberRoot=="function")try{Ut.onCommitFiberRoot(ji,e,void 0,(e.current.flags&128)===128)}catch{}}var Pt=Math.clz32?Math.clz32:rg,tg=Math.log,ng=Math.LN2;function rg(e){return e>>>=0,e===0?32:31-(tg(e)/ng|0)|0}var Vi=64,$i=4194304;function No(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Gi(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=n&268435455;if(a!==0){var u=a&~o;u!==0?r=No(u):(i&=a,i!==0&&(r=No(i)))}else a=n&~o,a!==0?r=No(a):i!==0&&(r=No(i));if(r===0)return 0;if(t!==0&&t!==r&&(t&o)===0&&(o=r&-r,i=t&-t,o>=i||o===16&&(i&4194240)!==0))return t;if((r&4)!==0&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Pt(t),o=1<<n,r|=e[n],t&=~o;return r}function og(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function ig(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-Pt(i),u=1<<a,l=o[a];l===-1?((u&n)===0||(u&r)!==0)&&(o[a]=og(u,t)):l<=t&&(e.expiredLanes|=u),i&=~u}}function sl(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function xd(){var e=Vi;return Vi<<=1,(Vi&4194240)===0&&(Vi=64),e}function cl(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bo(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Pt(t),e[t]=n}function ag(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-Pt(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}function dl(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Pt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var V=0;function Sd(e){return e&=-e,1<e?4<e?(e&268435455)!==0?16:536870912:4:1}var wd,fl,Id,Td,bd,pl=!1,Qi=[],xn=null,Sn=null,wn=null,Ro=new Map,Lo=new Map,In=[],ug="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Md(e,t){switch(e){case"focusin":case"focusout":xn=null;break;case"dragenter":case"dragleave":Sn=null;break;case"mouseover":case"mouseout":wn=null;break;case"pointerover":case"pointerout":Ro.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lo.delete(t.pointerId)}}function Fo(e,t,n,r,o,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},t!==null&&(t=Xo(t),t!==null&&fl(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function lg(e,t,n,r,o){switch(t){case"focusin":return xn=Fo(xn,e,t,n,r,o),!0;case"dragenter":return Sn=Fo(Sn,e,t,n,r,o),!0;case"mouseover":return wn=Fo(wn,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Ro.set(i,Fo(Ro.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Lo.set(i,Fo(Lo.get(i)||null,e,t,n,r,o)),!0}return!1}function Pd(e){var t=tr(e.target);if(t!==null){var n=er(t);if(n!==null){if(t=n.tag,t===13){if(t=md(n),t!==null){e.blockedOn=t,bd(e.priority,function(){Id(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Yi(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=ml(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);nl=r,n.target.dispatchEvent(r),nl=null}else return t=Xo(n),t!==null&&fl(t),e.blockedOn=n,!1;t.shift()}return!0}function Dd(e,t,n){Yi(e)&&n.delete(t)}function sg(){pl=!1,xn!==null&&Yi(xn)&&(xn=null),Sn!==null&&Yi(Sn)&&(Sn=null),wn!==null&&Yi(wn)&&(wn=null),Ro.forEach(Dd),Lo.forEach(Dd)}function Oo(e,t){e.blockedOn===t&&(e.blockedOn=null,pl||(pl=!0,it.unstable_scheduleCallback(it.unstable_NormalPriority,sg)))}function Ao(e){function t(o){return Oo(o,e)}if(0<Qi.length){Oo(Qi[0],e);for(var n=1;n<Qi.length;n++){var r=Qi[n];r.blockedOn===e&&(r.blockedOn=null)}}for(xn!==null&&Oo(xn,e),Sn!==null&&Oo(Sn,e),wn!==null&&Oo(wn,e),Ro.forEach(t),Lo.forEach(t),n=0;n<In.length;n++)r=In[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<In.length&&(n=In[0],n.blockedOn===null);)Pd(n),n.blockedOn===null&&In.shift()}var Rr=en.ReactCurrentBatchConfig,Xi=!0;function cg(e,t,n,r){var o=V,i=Rr.transition;Rr.transition=null;try{V=1,vl(e,t,n,r)}finally{V=o,Rr.transition=i}}function dg(e,t,n,r){var o=V,i=Rr.transition;Rr.transition=null;try{V=4,vl(e,t,n,r)}finally{V=o,Rr.transition=i}}function vl(e,t,n,r){if(Xi){var o=ml(e,t,n,r);if(o===null)Nl(e,t,r,qi,n),Md(e,r);else if(lg(o,e,t,n,r))r.stopPropagation();else if(Md(e,r),t&4&&-1<ug.indexOf(e)){for(;o!==null;){var i=Xo(o);if(i!==null&&wd(i),i=ml(e,t,n,r),i===null&&Nl(e,t,r,qi,n),i===o)break;o=i}o!==null&&r.stopPropagation()}else Nl(e,t,r,null,n)}}var qi=null;function ml(e,t,n,r){if(qi=null,e=rl(r),e=tr(e),e!==null)if(t=er(e),t===null)e=null;else if(n=t.tag,n===13){if(e=md(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qi=e,null}function Nd(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Zh()){case ll:return 1;case kd:return 4;case Ki:case Jh:return 16;case Ed:return 536870912;default:return 16}default:return 16}}var Tn=null,hl=null,Zi=null;function Bd(){if(Zi)return Zi;var e,t=hl,n=t.length,r,o="value"in Tn?Tn.value:Tn.textContent,i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===o[i-r];r++);return Zi=o.slice(e,1<r?1-r:void 0)}function Ji(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function ea(){return!0}function Rd(){return!1}function at(e){function t(n,r,o,i,a){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=i,this.target=a,this.currentTarget=null;for(var u in e)e.hasOwnProperty(u)&&(n=e[u],this[u]=n?n(i):i[u]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?ea:Rd,this.isPropagationStopped=Rd,this}return ue(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=ea)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=ea)},persist:function(){},isPersistent:ea}),t}var Lr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},gl=at(Lr),zo=ue({},Lr,{view:0,detail:0}),fg=at(zo),yl,_l,Ho,ta=ue({},zo,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kl,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Ho&&(Ho&&e.type==="mousemove"?(yl=e.screenX-Ho.screenX,_l=e.screenY-Ho.screenY):_l=yl=0,Ho=e),yl)},movementY:function(e){return"movementY"in e?e.movementY:_l}}),Ld=at(ta),pg=ue({},ta,{dataTransfer:0}),vg=at(pg),mg=ue({},zo,{relatedTarget:0}),Cl=at(mg),hg=ue({},Lr,{animationName:0,elapsedTime:0,pseudoElement:0}),gg=at(hg),yg=ue({},Lr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_g=at(yg),Cg=ue({},Lr,{data:0}),Fd=at(Cg),kg={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Eg={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xg={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sg(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=xg[e])?!!t[e]:!1}function kl(){return Sg}var wg=ue({},zo,{key:function(e){if(e.key){var t=kg[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Ji(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Eg[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kl,charCode:function(e){return e.type==="keypress"?Ji(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Ji(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Ig=at(wg),Tg=ue({},ta,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Od=at(Tg),bg=ue({},zo,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kl}),Mg=at(bg),Pg=ue({},Lr,{propertyName:0,elapsedTime:0,pseudoElement:0}),Dg=at(Pg),Ng=ue({},ta,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Bg=at(Ng),Rg=[9,13,27,32],El=Jt&&"CompositionEvent"in window,Uo=null;Jt&&"documentMode"in document&&(Uo=document.documentMode);var Lg=Jt&&"TextEvent"in window&&!Uo,Ad=Jt&&(!El||Uo&&8<Uo&&11>=Uo),zd=String.fromCharCode(32),Hd=!1;function Ud(e,t){switch(e){case"keyup":return Rg.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wd(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Fr=!1;function Fg(e,t){switch(e){case"compositionend":return Wd(t);case"keypress":return t.which!==32?null:(Hd=!0,zd);case"textInput":return e=t.data,e===zd&&Hd?null:e;default:return null}}function Og(e,t){if(Fr)return e==="compositionend"||!El&&Ud(e,t)?(e=Bd(),Zi=hl=Tn=null,Fr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ad&&t.locale!=="ko"?null:t.data;default:return null}}var Ag={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kd(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!Ag[e.type]:t==="textarea"}function jd(e,t,n,r){cd(r),t=aa(t,"onChange"),0<t.length&&(n=new gl("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wo=null,Ko=null;function zg(e){sf(e,0)}function na(e){var t=Ur(e);if(Zc(t))return e}function Hg(e,t){if(e==="change")return t}var Vd=!1;if(Jt){var xl;if(Jt){var Sl="oninput"in document;if(!Sl){var $d=document.createElement("div");$d.setAttribute("oninput","return;"),Sl=typeof $d.oninput=="function"}xl=Sl}else xl=!1;Vd=xl&&(!document.documentMode||9<document.documentMode)}function Gd(){Wo&&(Wo.detachEvent("onpropertychange",Qd),Ko=Wo=null)}function Qd(e){if(e.propertyName==="value"&&na(Ko)){var t=[];jd(t,Ko,e,rl(e)),vd(zg,t)}}function Ug(e,t,n){e==="focusin"?(Gd(),Wo=t,Ko=n,Wo.attachEvent("onpropertychange",Qd)):e==="focusout"&&Gd()}function Wg(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return na(Ko)}function Kg(e,t){if(e==="click")return na(t)}function jg(e,t){if(e==="input"||e==="change")return na(t)}function Vg(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Dt=typeof Object.is=="function"?Object.is:Vg;function jo(e,t){if(Dt(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!Lu.call(t,o)||!Dt(e[o],t[o]))return!1}return!0}function Yd(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xd(e,t){var n=Yd(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Yd(n)}}function qd(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?qd(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Zd(){for(var e=window,t=zi();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=zi(e.document)}return t}function wl(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function $g(e){var t=Zd(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&qd(n.ownerDocument.documentElement,n)){if(r!==null&&wl(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=r.end===void 0?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Xd(n,i);var a=Xd(n,r);o&&a&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Gg=Jt&&"documentMode"in document&&11>=document.documentMode,Or=null,Il=null,Vo=null,Tl=!1;function Jd(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Tl||Or==null||Or!==zi(r)||(r=Or,"selectionStart"in r&&wl(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),Vo&&jo(Vo,r)||(Vo=r,r=aa(Il,"onSelect"),0<r.length&&(t=new gl("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Or)))}function ra(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ar={animationend:ra("Animation","AnimationEnd"),animationiteration:ra("Animation","AnimationIteration"),animationstart:ra("Animation","AnimationStart"),transitionend:ra("Transition","TransitionEnd")},bl={},ef={};Jt&&(ef=document.createElement("div").style,"AnimationEvent"in window||(delete Ar.animationend.animation,delete Ar.animationiteration.animation,delete Ar.animationstart.animation),"TransitionEvent"in window||delete Ar.transitionend.transition);function oa(e){if(bl[e])return bl[e];if(!Ar[e])return e;var t=Ar[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in ef)return bl[e]=t[n];return e}var tf=oa("animationend"),nf=oa("animationiteration"),rf=oa("animationstart"),of=oa("transitionend"),af=new Map,uf="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function bn(e,t){af.set(e,t),Jn(t,[e])}for(var Ml=0;Ml<uf.length;Ml++){var Pl=uf[Ml],Qg=Pl.toLowerCase(),Yg=Pl[0].toUpperCase()+Pl.slice(1);bn(Qg,"on"+Yg)}bn(tf,"onAnimationEnd"),bn(nf,"onAnimationIteration"),bn(rf,"onAnimationStart"),bn("dblclick","onDoubleClick"),bn("focusin","onFocus"),bn("focusout","onBlur"),bn(of,"onTransitionEnd"),br("onMouseEnter",["mouseout","mouseover"]),br("onMouseLeave",["mouseout","mouseover"]),br("onPointerEnter",["pointerout","pointerover"]),br("onPointerLeave",["pointerout","pointerover"]),Jn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Jn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Jn("onBeforeInput",["compositionend","keypress","textInput","paste"]),Jn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Jn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Jn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var $o="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xg=new Set("cancel close invalid load scroll toggle".split(" ").concat($o));function lf(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,Qh(r,t,void 0,e),e.currentTarget=null}function sf(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;lf(o,u,s),i=l}else for(a=0;a<r.length;a++){if(u=r[a],l=u.instance,s=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;lf(o,u,s),i=l}}}if(Wi)throw e=ul,Wi=!1,ul=null,e}function ne(e,t){var n=t[Al];n===void 0&&(n=t[Al]=new Set);var r=e+"__bubble";n.has(r)||(cf(t,e,2,!1),n.add(r))}function Dl(e,t,n){var r=0;t&&(r|=4),cf(n,e,r,t)}var ia="_reactListening"+Math.random().toString(36).slice(2);function Go(e){if(!e[ia]){e[ia]=!0,jc.forEach(function(n){n!=="selectionchange"&&(Xg.has(n)||Dl(n,!1,e),Dl(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[ia]||(t[ia]=!0,Dl("selectionchange",!1,t))}}function cf(e,t,n,r){switch(Nd(t)){case 1:var o=cg;break;case 4:o=dg;break;default:o=vl}n=o.bind(null,t,n,e),o=void 0,!al||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),r?o!==void 0?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):o!==void 0?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nl(e,t,n,r,o){var i=r;if((t&1)===0&&(t&2)===0&&r!==null)e:for(;;){if(r===null)return;var a=r.tag;if(a===3||a===4){var u=r.stateNode.containerInfo;if(u===o||u.nodeType===8&&u.parentNode===o)break;if(a===4)for(a=r.return;a!==null;){var l=a.tag;if((l===3||l===4)&&(l=a.stateNode.containerInfo,l===o||l.nodeType===8&&l.parentNode===o))return;a=a.return}for(;u!==null;){if(a=tr(u),a===null)return;if(l=a.tag,l===5||l===6){r=i=a;continue e}u=u.parentNode}}r=r.return}vd(function(){var s=i,d=rl(n),c=[];e:{var f=af.get(e);if(f!==void 0){var m=gl,y=e;switch(e){case"keypress":if(Ji(n)===0)break e;case"keydown":case"keyup":m=Ig;break;case"focusin":y="focus",m=Cl;break;case"focusout":y="blur",m=Cl;break;case"beforeblur":case"afterblur":m=Cl;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":m=Ld;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":m=vg;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":m=Mg;break;case tf:case nf:case rf:m=gg;break;case of:m=Dg;break;case"scroll":m=fg;break;case"wheel":m=Bg;break;case"copy":case"cut":case"paste":m=_g;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":m=Od}var C=(t&4)!==0,E=!C&&e==="scroll",v=C?f!==null?f+"Capture":null:f;C=[];for(var p=s,h;p!==null;){h=p;var _=h.stateNode;if(h.tag===5&&_!==null&&(h=_,v!==null&&(_=Mo(p,v),_!=null&&C.push(Qo(p,_,h)))),E)break;p=p.return}0<C.length&&(f=new m(f,y,null,n,d),c.push({event:f,listeners:C}))}}if((t&7)===0){e:{if(f=e==="mouseover"||e==="pointerover",m=e==="mouseout"||e==="pointerout",f&&n!==nl&&(y=n.relatedTarget||n.fromElement)&&(tr(y)||y[tn]))break e;if((m||f)&&(f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window,m?(y=n.relatedTarget||n.toElement,m=s,y=y?tr(y):null,y!==null&&(E=er(y),y!==E||y.tag!==5&&y.tag!==6)&&(y=null)):(m=null,y=s),m!==y)){if(C=Ld,_="onMouseLeave",v="onMouseEnter",p="mouse",(e==="pointerout"||e==="pointerover")&&(C=Od,_="onPointerLeave",v="onPointerEnter",p="pointer"),E=m==null?f:Ur(m),h=y==null?f:Ur(y),f=new C(_,p+"leave",m,n,d),f.target=E,f.relatedTarget=h,_=null,tr(d)===s&&(C=new C(v,p+"enter",y,n,d),C.target=h,C.relatedTarget=E,_=C),E=_,m&&y)t:{for(C=m,v=y,p=0,h=C;h;h=zr(h))p++;for(h=0,_=v;_;_=zr(_))h++;for(;0<p-h;)C=zr(C),p--;for(;0<h-p;)v=zr(v),h--;for(;p--;){if(C===v||v!==null&&C===v.alternate)break t;C=zr(C),v=zr(v)}C=null}else C=null;m!==null&&df(c,f,m,C,!1),y!==null&&E!==null&&df(c,E,y,C,!0)}}e:{if(f=s?Ur(s):window,m=f.nodeName&&f.nodeName.toLowerCase(),m==="select"||m==="input"&&f.type==="file")var S=Hg;else if(Kd(f))if(Vd)S=jg;else{S=Wg;var w=Ug}else(m=f.nodeName)&&m.toLowerCase()==="input"&&(f.type==="checkbox"||f.type==="radio")&&(S=Kg);if(S&&(S=S(e,s))){jd(c,S,n,d);break e}w&&w(e,f,s),e==="focusout"&&(w=f._wrapperState)&&w.controlled&&f.type==="number"&&qu(f,"number",f.value)}switch(w=s?Ur(s):window,e){case"focusin":(Kd(w)||w.contentEditable==="true")&&(Or=w,Il=s,Vo=null);break;case"focusout":Vo=Il=Or=null;break;case"mousedown":Tl=!0;break;case"contextmenu":case"mouseup":case"dragend":Tl=!1,Jd(c,n,d);break;case"selectionchange":if(Gg)break;case"keydown":case"keyup":Jd(c,n,d)}var k;if(El)e:{switch(e){case"compositionstart":var I="onCompositionStart";break e;case"compositionend":I="onCompositionEnd";break e;case"compositionupdate":I="onCompositionUpdate";break e}I=void 0}else Fr?Ud(e,n)&&(I="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(I="onCompositionStart");I&&(Ad&&n.locale!=="ko"&&(Fr||I!=="onCompositionStart"?I==="onCompositionEnd"&&Fr&&(k=Bd()):(Tn=d,hl="value"in Tn?Tn.value:Tn.textContent,Fr=!0)),w=aa(s,I),0<w.length&&(I=new Fd(I,e,null,n,d),c.push({event:I,listeners:w}),k?I.data=k:(k=Wd(n),k!==null&&(I.data=k)))),(k=Lg?Fg(e,n):Og(e,n))&&(s=aa(s,"onBeforeInput"),0<s.length&&(d=new Fd("onBeforeInput","beforeinput",null,n,d),c.push({event:d,listeners:s}),d.data=k))}sf(c,t)})}function Qo(e,t,n){return{instance:e,listener:t,currentTarget:n}}function aa(e,t){for(var n=t+"Capture",r=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=Mo(e,n),i!=null&&r.unshift(Qo(e,i,o)),i=Mo(e,t),i!=null&&r.push(Qo(e,i,o))),e=e.return}return r}function zr(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function df(e,t,n,r,o){for(var i=t._reactName,a=[];n!==null&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(l!==null&&l===r)break;u.tag===5&&s!==null&&(u=s,o?(l=Mo(n,i),l!=null&&a.unshift(Qo(n,l,u))):o||(l=Mo(n,i),l!=null&&a.push(Qo(n,l,u)))),n=n.return}a.length!==0&&e.push({event:t,listeners:a})}var qg=/\r\n?/g,Zg=/\u0000|\uFFFD/g;function ff(e){return(typeof e=="string"?e:""+e).replace(qg,`
`).replace(Zg,"")}function ua(e,t,n){if(t=ff(t),ff(e)!==t&&n)throw Error(T(425))}function la(){}var Bl=null,Rl=null;function Ll(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Fl=typeof setTimeout=="function"?setTimeout:void 0,Jg=typeof clearTimeout=="function"?clearTimeout:void 0,pf=typeof Promise=="function"?Promise:void 0,ey=typeof queueMicrotask=="function"?queueMicrotask:typeof pf<"u"?function(e){return pf.resolve(null).then(e).catch(ty)}:Fl;function ty(e){setTimeout(function(){throw e})}function Ol(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){e.removeChild(o),Ao(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);Ao(t)}function Mn(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function vf(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Hr=Math.random().toString(36).slice(2),Wt="__reactFiber$"+Hr,Yo="__reactProps$"+Hr,tn="__reactContainer$"+Hr,Al="__reactEvents$"+Hr,ny="__reactListeners$"+Hr,ry="__reactHandles$"+Hr;function tr(e){var t=e[Wt];if(t)return t;for(var n=e.parentNode;n;){if(t=n[tn]||n[Wt]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=vf(e);e!==null;){if(n=e[Wt])return n;e=vf(e)}return t}e=n,n=e.parentNode}return null}function Xo(e){return e=e[Wt]||e[tn],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Ur(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(T(33))}function sa(e){return e[Yo]||null}var zl=[],Wr=-1;function Pn(e){return{current:e}}function re(e){0>Wr||(e.current=zl[Wr],zl[Wr]=null,Wr--)}function J(e,t){Wr++,zl[Wr]=e.current,e.current=t}var Dn={},Pe=Pn(Dn),$e=Pn(!1),nr=Dn;function Kr(e,t){var n=e.type.contextTypes;if(!n)return Dn;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in n)o[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ge(e){return e=e.childContextTypes,e!=null}function ca(){re($e),re(Pe)}function mf(e,t,n){if(Pe.current!==Dn)throw Error(T(168));J(Pe,t),J($e,n)}function hf(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in t))throw Error(T(108,Uh(e)||"Unknown",o));return ue({},n,r)}function da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Dn,nr=Pe.current,J(Pe,e),J($e,$e.current),!0}function gf(e,t,n){var r=e.stateNode;if(!r)throw Error(T(169));n?(e=hf(e,t,nr),r.__reactInternalMemoizedMergedChildContext=e,re($e),re(Pe),J(Pe,e)):re($e),J($e,n)}var nn=null,fa=!1,Hl=!1;function yf(e){nn===null?nn=[e]:nn.push(e)}function oy(e){fa=!0,yf(e)}function Nn(){if(!Hl&&nn!==null){Hl=!0;var e=0,t=V;try{var n=nn;for(V=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}nn=null,fa=!1}catch(o){throw nn!==null&&(nn=nn.slice(e+1)),_d(ll,Nn),o}finally{V=t,Hl=!1}}return null}var jr=[],Vr=0,pa=null,va=0,_t=[],Ct=0,rr=null,rn=1,on="";function or(e,t){jr[Vr++]=va,jr[Vr++]=pa,pa=e,va=t}function _f(e,t,n){_t[Ct++]=rn,_t[Ct++]=on,_t[Ct++]=rr,rr=e;var r=rn;e=on;var o=32-Pt(r)-1;r&=~(1<<o),n+=1;var i=32-Pt(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,rn=1<<32-Pt(t)+o|n<<o|r,on=i+e}else rn=1<<i|n<<o|r,on=e}function Ul(e){e.return!==null&&(or(e,1),_f(e,1,0))}function Wl(e){for(;e===pa;)pa=jr[--Vr],jr[Vr]=null,va=jr[--Vr],jr[Vr]=null;for(;e===rr;)rr=_t[--Ct],_t[Ct]=null,on=_t[--Ct],_t[Ct]=null,rn=_t[--Ct],_t[Ct]=null}var ut=null,lt=null,oe=!1,Nt=null;function Cf(e,t){var n=St(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function kf(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,ut=e,lt=Mn(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,ut=e,lt=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=rr!==null?{id:rn,overflow:on}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=St(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,ut=e,lt=null,!0):!1;default:return!1}}function Kl(e){return(e.mode&1)!==0&&(e.flags&128)===0}function jl(e){if(oe){var t=lt;if(t){var n=t;if(!kf(e,t)){if(Kl(e))throw Error(T(418));t=Mn(n.nextSibling);var r=ut;t&&kf(e,t)?Cf(r,n):(e.flags=e.flags&-4097|2,oe=!1,ut=e)}}else{if(Kl(e))throw Error(T(418));e.flags=e.flags&-4097|2,oe=!1,ut=e}}}function Ef(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;ut=e}function ma(e){if(e!==ut)return!1;if(!oe)return Ef(e),oe=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!Ll(e.type,e.memoizedProps)),t&&(t=lt)){if(Kl(e))throw xf(),Error(T(418));for(;t;)Cf(e,t),t=Mn(t.nextSibling)}if(Ef(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(T(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){lt=Mn(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}lt=null}}else lt=ut?Mn(e.stateNode.nextSibling):null;return!0}function xf(){for(var e=lt;e;)e=Mn(e.nextSibling)}function $r(){lt=ut=null,oe=!1}function Vl(e){Nt===null?Nt=[e]:Nt.push(e)}var iy=en.ReactCurrentBatchConfig;function Bt(e,t){if(e&&e.defaultProps){t=ue({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var ha=Pn(null),ga=null,Gr=null,$l=null;function Gl(){$l=Gr=ga=null}function Ql(e){var t=ha.current;re(ha),e._currentValue=t}function Yl(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Qr(e,t){ga=e,$l=Gr=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!==0&&(Qe=!0),e.firstContext=null)}function kt(e){var t=e._currentValue;if($l!==e)if(e={context:e,memoizedValue:t,next:null},Gr===null){if(ga===null)throw Error(T(308));Gr=e,ga.dependencies={lanes:0,firstContext:e}}else Gr=Gr.next=e;return t}var ir=null;function Xl(e){ir===null?ir=[e]:ir.push(e)}function Sf(e,t,n,r){var o=t.interleaved;return o===null?(n.next=n,Xl(t)):(n.next=o.next,o.next=n),t.interleaved=n,an(e,r)}function an(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Bn=!1;function ql(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function wf(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function un(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Rn(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,(K&2)!==0){var o=r.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),r.pending=t,an(e,n)}return o=r.interleaved,o===null?(t.next=t,Xl(r)):(t.next=o.next,o.next=t),r.interleaved=t,an(e,n)}function ya(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,dl(e,n)}}function If(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?o=i=a:i=i.next=a,n=n.next}while(n!==null);i===null?o=i=t:i=i.next=t}else o=i=t;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function _a(e,t,n,r){var o=e.updateQueue;Bn=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,u=o.shared.pending;if(u!==null){o.shared.pending=null;var l=u,s=l.next;l.next=null,a===null?i=s:a.next=s,a=l;var d=e.alternate;d!==null&&(d=d.updateQueue,u=d.lastBaseUpdate,u!==a&&(u===null?d.firstBaseUpdate=s:u.next=s,d.lastBaseUpdate=l))}if(i!==null){var c=o.baseState;a=0,d=s=l=null,u=i;do{var f=u.lane,m=u.eventTime;if((r&f)===f){d!==null&&(d=d.next={eventTime:m,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var y=e,C=u;switch(f=t,m=n,C.tag){case 1:if(y=C.payload,typeof y=="function"){c=y.call(m,c,f);break e}c=y;break e;case 3:y.flags=y.flags&-65537|128;case 0:if(y=C.payload,f=typeof y=="function"?y.call(m,c,f):y,f==null)break e;c=ue({},c,f);break e;case 2:Bn=!0}}u.callback!==null&&u.lane!==0&&(e.flags|=64,f=o.effects,f===null?o.effects=[u]:f.push(u))}else m={eventTime:m,lane:f,tag:u.tag,payload:u.payload,callback:u.callback,next:null},d===null?(s=d=m,l=c):d=d.next=m,a|=f;if(u=u.next,u===null){if(u=o.shared.pending,u===null)break;f=u,u=f.next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}while(1);if(d===null&&(l=c),o.baseState=l,o.firstBaseUpdate=s,o.lastBaseUpdate=d,t=o.shared.interleaved,t!==null){o=t;do a|=o.lane,o=o.next;while(o!==t)}else i===null&&(o.shared.lanes=0);lr|=a,e.lanes=a,e.memoizedState=c}}function Tf(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(T(191,o));o.call(r)}}}var bf=new Kc.Component().refs;function Zl(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:ue({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Ca={isMounted:function(e){return(e=e._reactInternals)?er(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ze(),o=An(e),i=un(r,o);i.payload=t,n!=null&&(i.callback=n),t=Rn(e,i,o),t!==null&&(Ft(t,e,o,r),ya(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ze(),o=An(e),i=un(r,o);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=Rn(e,i,o),t!==null&&(Ft(t,e,o,r),ya(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ze(),r=An(e),o=un(n,r);o.tag=2,t!=null&&(o.callback=t),t=Rn(e,o,r),t!==null&&(Ft(t,e,r,n),ya(t,e,r))}};function Mf(e,t,n,r,o,i,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,i,a):t.prototype&&t.prototype.isPureReactComponent?!jo(n,r)||!jo(o,i):!0}function Pf(e,t,n){var r=!1,o=Dn,i=t.contextType;return typeof i=="object"&&i!==null?i=kt(i):(o=Ge(t)?nr:Pe.current,r=t.contextTypes,i=(r=r!=null)?Kr(e,o):Dn),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Ca,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Df(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ca.enqueueReplaceState(t,t.state,null)}function Jl(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=bf,ql(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=kt(i):(i=Ge(t)?nr:Pe.current,o.context=Kr(e,i)),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(Zl(e,t,i,n),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&Ca.enqueueReplaceState(o,o.state,null),_a(e,n,o,r),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function qo(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(T(309));var r=n.stateNode}if(!r)throw Error(T(147,e));var o=r,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(a){var u=o.refs;u===bf&&(u=o.refs={}),a===null?delete u[i]:u[i]=a},t._stringRef=i,t)}if(typeof e!="string")throw Error(T(284));if(!n._owner)throw Error(T(290,e))}return e}function ka(e,t){throw e=Object.prototype.toString.call(t),Error(T(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Nf(e){var t=e._init;return t(e._payload)}function Bf(e){function t(v,p){if(e){var h=v.deletions;h===null?(v.deletions=[p],v.flags|=16):h.push(p)}}function n(v,p){if(!e)return null;for(;p!==null;)t(v,p),p=p.sibling;return null}function r(v,p){for(v=new Map;p!==null;)p.key!==null?v.set(p.key,p):v.set(p.index,p),p=p.sibling;return v}function o(v,p){return v=Hn(v,p),v.index=0,v.sibling=null,v}function i(v,p,h){return v.index=h,e?(h=v.alternate,h!==null?(h=h.index,h<p?(v.flags|=2,p):h):(v.flags|=2,p)):(v.flags|=1048576,p)}function a(v){return e&&v.alternate===null&&(v.flags|=2),v}function u(v,p,h,_){return p===null||p.tag!==6?(p=Fs(h,v.mode,_),p.return=v,p):(p=o(p,h),p.return=v,p)}function l(v,p,h,_){var S=h.type;return S===Pr?d(v,p,h.props.children,_,h.key):p!==null&&(p.elementType===S||typeof S=="object"&&S!==null&&S.$$typeof===kn&&Nf(S)===p.type)?(_=o(p,h.props),_.ref=qo(v,p,h),_.return=v,_):(_=Ha(h.type,h.key,h.props,null,v.mode,_),_.ref=qo(v,p,h),_.return=v,_)}function s(v,p,h,_){return p===null||p.tag!==4||p.stateNode.containerInfo!==h.containerInfo||p.stateNode.implementation!==h.implementation?(p=Os(h,v.mode,_),p.return=v,p):(p=o(p,h.children||[]),p.return=v,p)}function d(v,p,h,_,S){return p===null||p.tag!==7?(p=fr(h,v.mode,_,S),p.return=v,p):(p=o(p,h),p.return=v,p)}function c(v,p,h){if(typeof p=="string"&&p!==""||typeof p=="number")return p=Fs(""+p,v.mode,h),p.return=v,p;if(typeof p=="object"&&p!==null){switch(p.$$typeof){case Oi:return h=Ha(p.type,p.key,p.props,null,v.mode,h),h.ref=qo(v,null,p),h.return=v,h;case Mr:return p=Os(p,v.mode,h),p.return=v,p;case kn:var _=p._init;return c(v,_(p._payload),h)}if(Io(p)||So(p))return p=fr(p,v.mode,h,null),p.return=v,p;ka(v,p)}return null}function f(v,p,h,_){var S=p!==null?p.key:null;if(typeof h=="string"&&h!==""||typeof h=="number")return S!==null?null:u(v,p,""+h,_);if(typeof h=="object"&&h!==null){switch(h.$$typeof){case Oi:return h.key===S?l(v,p,h,_):null;case Mr:return h.key===S?s(v,p,h,_):null;case kn:return S=h._init,f(v,p,S(h._payload),_)}if(Io(h)||So(h))return S!==null?null:d(v,p,h,_,null);ka(v,h)}return null}function m(v,p,h,_,S){if(typeof _=="string"&&_!==""||typeof _=="number")return v=v.get(h)||null,u(p,v,""+_,S);if(typeof _=="object"&&_!==null){switch(_.$$typeof){case Oi:return v=v.get(_.key===null?h:_.key)||null,l(p,v,_,S);case Mr:return v=v.get(_.key===null?h:_.key)||null,s(p,v,_,S);case kn:var w=_._init;return m(v,p,h,w(_._payload),S)}if(Io(_)||So(_))return v=v.get(h)||null,d(p,v,_,S,null);ka(p,_)}return null}function y(v,p,h,_){for(var S=null,w=null,k=p,I=p=0,b=null;k!==null&&I<h.length;I++){k.index>I?(b=k,k=null):b=k.sibling;var D=f(v,k,h[I],_);if(D===null){k===null&&(k=b);break}e&&k&&D.alternate===null&&t(v,k),p=i(D,p,I),w===null?S=D:w.sibling=D,w=D,k=b}if(I===h.length)return n(v,k),oe&&or(v,I),S;if(k===null){for(;I<h.length;I++)k=c(v,h[I],_),k!==null&&(p=i(k,p,I),w===null?S=k:w.sibling=k,w=k);return oe&&or(v,I),S}for(k=r(v,k);I<h.length;I++)b=m(k,v,I,h[I],_),b!==null&&(e&&b.alternate!==null&&k.delete(b.key===null?I:b.key),p=i(b,p,I),w===null?S=b:w.sibling=b,w=b);return e&&k.forEach(function(j){return t(v,j)}),oe&&or(v,I),S}function C(v,p,h,_){var S=So(h);if(typeof S!="function")throw Error(T(150));if(h=S.call(h),h==null)throw Error(T(151));for(var w=S=null,k=p,I=p=0,b=null,D=h.next();k!==null&&!D.done;I++,D=h.next()){k.index>I?(b=k,k=null):b=k.sibling;var j=f(v,k,D.value,_);if(j===null){k===null&&(k=b);break}e&&k&&j.alternate===null&&t(v,k),p=i(j,p,I),w===null?S=j:w.sibling=j,w=j,k=b}if(D.done)return n(v,k),oe&&or(v,I),S;if(k===null){for(;!D.done;I++,D=h.next())D=c(v,D.value,_),D!==null&&(p=i(D,p,I),w===null?S=D:w.sibling=D,w=D);return oe&&or(v,I),S}for(k=r(v,k);!D.done;I++,D=h.next())D=m(k,v,I,D.value,_),D!==null&&(e&&D.alternate!==null&&k.delete(D.key===null?I:D.key),p=i(D,p,I),w===null?S=D:w.sibling=D,w=D);return e&&k.forEach(function(U){return t(v,U)}),oe&&or(v,I),S}function E(v,p,h,_){if(typeof h=="object"&&h!==null&&h.type===Pr&&h.key===null&&(h=h.props.children),typeof h=="object"&&h!==null){switch(h.$$typeof){case Oi:e:{for(var S=h.key,w=p;w!==null;){if(w.key===S){if(S=h.type,S===Pr){if(w.tag===7){n(v,w.sibling),p=o(w,h.props.children),p.return=v,v=p;break e}}else if(w.elementType===S||typeof S=="object"&&S!==null&&S.$$typeof===kn&&Nf(S)===w.type){n(v,w.sibling),p=o(w,h.props),p.ref=qo(v,w,h),p.return=v,v=p;break e}n(v,w);break}else t(v,w);w=w.sibling}h.type===Pr?(p=fr(h.props.children,v.mode,_,h.key),p.return=v,v=p):(_=Ha(h.type,h.key,h.props,null,v.mode,_),_.ref=qo(v,p,h),_.return=v,v=_)}return a(v);case Mr:e:{for(w=h.key;p!==null;){if(p.key===w)if(p.tag===4&&p.stateNode.containerInfo===h.containerInfo&&p.stateNode.implementation===h.implementation){n(v,p.sibling),p=o(p,h.children||[]),p.return=v,v=p;break e}else{n(v,p);break}else t(v,p);p=p.sibling}p=Os(h,v.mode,_),p.return=v,v=p}return a(v);case kn:return w=h._init,E(v,p,w(h._payload),_)}if(Io(h))return y(v,p,h,_);if(So(h))return C(v,p,h,_);ka(v,h)}return typeof h=="string"&&h!==""||typeof h=="number"?(h=""+h,p!==null&&p.tag===6?(n(v,p.sibling),p=o(p,h),p.return=v,v=p):(n(v,p),p=Fs(h,v.mode,_),p.return=v,v=p),a(v)):n(v,p)}return E}var Yr=Bf(!0),Rf=Bf(!1),Zo={},Kt=Pn(Zo),Jo=Pn(Zo),ei=Pn(Zo);function ar(e){if(e===Zo)throw Error(T(174));return e}function es(e,t){switch(J(ei,t),J(Jo,e),J(Kt,Zo),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ju(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Ju(t,e)}re(Kt),J(Kt,t)}function Xr(){re(Kt),re(Jo),re(ei)}function Lf(e){ar(ei.current);var t=ar(Kt.current),n=Ju(t,e.type);t!==n&&(J(Jo,e),J(Kt,n))}function ts(e){Jo.current===e&&(re(Kt),re(Jo))}var le=Pn(0);function Ea(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ns=[];function rs(){for(var e=0;e<ns.length;e++)ns[e]._workInProgressVersionPrimary=null;ns.length=0}var xa=en.ReactCurrentDispatcher,os=en.ReactCurrentBatchConfig,ur=0,se=null,_e=null,ke=null,Sa=!1,ti=!1,ni=0,ay=0;function De(){throw Error(T(321))}function is(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Dt(e[n],t[n]))return!1;return!0}function as(e,t,n,r,o,i){if(ur=i,se=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,xa.current=e===null||e.memoizedState===null?cy:dy,e=n(r,o),ti){i=0;do{if(ti=!1,ni=0,25<=i)throw Error(T(301));i+=1,ke=_e=null,t.updateQueue=null,xa.current=fy,e=n(r,o)}while(ti)}if(xa.current=Ta,t=_e!==null&&_e.next!==null,ur=0,ke=_e=se=null,Sa=!1,t)throw Error(T(300));return e}function us(){var e=ni!==0;return ni=0,e}function jt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ke===null?se.memoizedState=ke=e:ke=ke.next=e,ke}function Et(){if(_e===null){var e=se.alternate;e=e!==null?e.memoizedState:null}else e=_e.next;var t=ke===null?se.memoizedState:ke.next;if(t!==null)ke=t,_e=e;else{if(e===null)throw Error(T(310));_e=e,e={memoizedState:_e.memoizedState,baseState:_e.baseState,baseQueue:_e.baseQueue,queue:_e.queue,next:null},ke===null?se.memoizedState=ke=e:ke=ke.next=e}return ke}function ri(e,t){return typeof t=="function"?t(e):t}function ls(e){var t=Et(),n=t.queue;if(n===null)throw Error(T(311));n.lastRenderedReducer=e;var r=_e,o=r.baseQueue,i=n.pending;if(i!==null){if(o!==null){var a=o.next;o.next=i.next,i.next=a}r.baseQueue=o=i,n.pending=null}if(o!==null){i=o.next,r=r.baseState;var u=a=null,l=null,s=i;do{var d=s.lane;if((ur&d)===d)l!==null&&(l=l.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var c={lane:d,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};l===null?(u=l=c,a=r):l=l.next=c,se.lanes|=d,lr|=d}s=s.next}while(s!==null&&s!==i);l===null?a=r:l.next=u,Dt(r,t.memoizedState)||(Qe=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}if(e=n.interleaved,e!==null){o=e;do i=o.lane,se.lanes|=i,lr|=i,o=o.next;while(o!==e)}else o===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ss(e){var t=Et(),n=t.queue;if(n===null)throw Error(T(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(o!==null){n.pending=null;var a=o=o.next;do i=e(i,a.action),a=a.next;while(a!==o);Dt(i,t.memoizedState)||(Qe=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ff(){}function Of(e,t){var n=se,r=Et(),o=t(),i=!Dt(r.memoizedState,o);if(i&&(r.memoizedState=o,Qe=!0),r=r.queue,cs(Hf.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||ke!==null&&ke.memoizedState.tag&1){if(n.flags|=2048,oi(9,zf.bind(null,n,r,o,t),void 0,null),Ee===null)throw Error(T(349));(ur&30)!==0||Af(n,t,o)}return o}function Af(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=se.updateQueue,t===null?(t={lastEffect:null,stores:null},se.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function zf(e,t,n,r){t.value=n,t.getSnapshot=r,Uf(t)&&Wf(e)}function Hf(e,t,n){return n(function(){Uf(t)&&Wf(e)})}function Uf(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Dt(e,n)}catch{return!0}}function Wf(e){var t=an(e,1);t!==null&&Ft(t,e,1,-1)}function Kf(e){var t=jt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ri,lastRenderedState:e},t.queue=e,e=e.dispatch=sy.bind(null,se,e),[t.memoizedState,e]}function oi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=se.updateQueue,t===null?(t={lastEffect:null,stores:null},se.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function jf(){return Et().memoizedState}function wa(e,t,n,r){var o=jt();se.flags|=e,o.memoizedState=oi(1|t,n,void 0,r===void 0?null:r)}function Ia(e,t,n,r){var o=Et();r=r===void 0?null:r;var i=void 0;if(_e!==null){var a=_e.memoizedState;if(i=a.destroy,r!==null&&is(r,a.deps)){o.memoizedState=oi(t,n,i,r);return}}se.flags|=e,o.memoizedState=oi(1|t,n,i,r)}function Vf(e,t){return wa(8390656,8,e,t)}function cs(e,t){return Ia(2048,8,e,t)}function $f(e,t){return Ia(4,2,e,t)}function Gf(e,t){return Ia(4,4,e,t)}function Qf(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Yf(e,t,n){return n=n!=null?n.concat([e]):null,Ia(4,4,Qf.bind(null,t,e),n)}function ds(){}function Xf(e,t){var n=Et();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&is(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function qf(e,t){var n=Et();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&is(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Zf(e,t,n){return(ur&21)===0?(e.baseState&&(e.baseState=!1,Qe=!0),e.memoizedState=n):(Dt(n,t)||(n=xd(),se.lanes|=n,lr|=n,e.baseState=!0),t)}function uy(e,t){var n=V;V=n!==0&&4>n?n:4,e(!0);var r=os.transition;os.transition={};try{e(!1),t()}finally{V=n,os.transition=r}}function Jf(){return Et().memoizedState}function ly(e,t,n){var r=An(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ep(e))tp(t,n);else if(n=Sf(e,t,n,r),n!==null){var o=ze();Ft(n,e,r,o),np(n,t,r)}}function sy(e,t,n){var r=An(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ep(e))tp(t,o);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var a=t.lastRenderedState,u=i(a,n);if(o.hasEagerState=!0,o.eagerState=u,Dt(u,a)){var l=t.interleaved;l===null?(o.next=o,Xl(t)):(o.next=l.next,l.next=o),t.interleaved=o;return}}catch{}finally{}n=Sf(e,t,o,r),n!==null&&(o=ze(),Ft(n,e,r,o),np(n,t,r))}}function ep(e){var t=e.alternate;return e===se||t!==null&&t===se}function tp(e,t){ti=Sa=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function np(e,t,n){if((n&4194240)!==0){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,dl(e,n)}}var Ta={readContext:kt,useCallback:De,useContext:De,useEffect:De,useImperativeHandle:De,useInsertionEffect:De,useLayoutEffect:De,useMemo:De,useReducer:De,useRef:De,useState:De,useDebugValue:De,useDeferredValue:De,useTransition:De,useMutableSource:De,useSyncExternalStore:De,useId:De,unstable_isNewReconciler:!1},cy={readContext:kt,useCallback:function(e,t){return jt().memoizedState=[e,t===void 0?null:t],e},useContext:kt,useEffect:Vf,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,wa(4194308,4,Qf.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wa(4194308,4,e,t)},useInsertionEffect:function(e,t){return wa(4,2,e,t)},useMemo:function(e,t){var n=jt();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=jt();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ly.bind(null,se,e),[r.memoizedState,e]},useRef:function(e){var t=jt();return e={current:e},t.memoizedState=e},useState:Kf,useDebugValue:ds,useDeferredValue:function(e){return jt().memoizedState=e},useTransition:function(){var e=Kf(!1),t=e[0];return e=uy.bind(null,e[1]),jt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=se,o=jt();if(oe){if(n===void 0)throw Error(T(407));n=n()}else{if(n=t(),Ee===null)throw Error(T(349));(ur&30)!==0||Af(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Vf(Hf.bind(null,r,i,e),[e]),r.flags|=2048,oi(9,zf.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=jt(),t=Ee.identifierPrefix;if(oe){var n=on,r=rn;n=(r&~(1<<32-Pt(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=ni++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=ay++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},dy={readContext:kt,useCallback:Xf,useContext:kt,useEffect:cs,useImperativeHandle:Yf,useInsertionEffect:$f,useLayoutEffect:Gf,useMemo:qf,useReducer:ls,useRef:jf,useState:function(){return ls(ri)},useDebugValue:ds,useDeferredValue:function(e){var t=Et();return Zf(t,_e.memoizedState,e)},useTransition:function(){var e=ls(ri)[0],t=Et().memoizedState;return[e,t]},useMutableSource:Ff,useSyncExternalStore:Of,useId:Jf,unstable_isNewReconciler:!1},fy={readContext:kt,useCallback:Xf,useContext:kt,useEffect:cs,useImperativeHandle:Yf,useInsertionEffect:$f,useLayoutEffect:Gf,useMemo:qf,useReducer:ss,useRef:jf,useState:function(){return ss(ri)},useDebugValue:ds,useDeferredValue:function(e){var t=Et();return _e===null?t.memoizedState=e:Zf(t,_e.memoizedState,e)},useTransition:function(){var e=ss(ri)[0],t=Et().memoizedState;return[e,t]},useMutableSource:Ff,useSyncExternalStore:Of,useId:Jf,unstable_isNewReconciler:!1};function qr(e,t){try{var n="",r=t;do n+=Hh(r),r=r.return;while(r);var o=n}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o,digest:null}}function fs(e,t,n){return{value:e,source:null,stack:n!=null?n:null,digest:t!=null?t:null}}function ps(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var py=typeof WeakMap=="function"?WeakMap:Map;function rp(e,t,n){n=un(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ra||(Ra=!0,bs=r),ps(e,t)},n}function op(e,t,n){n=un(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){ps(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){ps(e,t),typeof r!="function"&&(Fn===null?Fn=new Set([this]):Fn.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),n}function ip(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new py;var o=new Set;r.set(t,o)}else o=r.get(t),o===void 0&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ty.bind(null,e,t,n),t.then(e,e))}function ap(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function up(e,t,n,r,o){return(e.mode&1)===0?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=un(-1,1),t.tag=2,Rn(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var vy=en.ReactCurrentOwner,Qe=!1;function Ae(e,t,n,r){t.child=e===null?Rf(t,null,n,r):Yr(t,e.child,n,r)}function lp(e,t,n,r,o){n=n.render;var i=t.ref;return Qr(t,o),r=as(e,t,n,r,i,o),n=us(),e!==null&&!Qe?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ln(e,t,o)):(oe&&n&&Ul(t),t.flags|=1,Ae(e,t,r,o),t.child)}function sp(e,t,n,r,o){if(e===null){var i=n.type;return typeof i=="function"&&!Ls(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,cp(e,t,i,r,o)):(e=Ha(n.type,null,r,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,(e.lanes&o)===0){var a=i.memoizedProps;if(n=n.compare,n=n!==null?n:jo,n(a,r)&&e.ref===t.ref)return ln(e,t,o)}return t.flags|=1,e=Hn(i,r),e.ref=t.ref,e.return=t,t.child=e}function cp(e,t,n,r,o){if(e!==null){var i=e.memoizedProps;if(jo(i,r)&&e.ref===t.ref)if(Qe=!1,t.pendingProps=r=i,(e.lanes&o)!==0)(e.flags&131072)!==0&&(Qe=!0);else return t.lanes=e.lanes,ln(e,t,o)}return vs(e,t,n,r,o)}function dp(e,t,n){var r=t.pendingProps,o=r.children,i=e!==null?e.memoizedState:null;if(r.mode==="hidden")if((t.mode&1)===0)t.memoizedState={baseLanes:0,cachePool:null,transitions:null},J(Jr,st),st|=n;else{if((n&1073741824)===0)return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,J(Jr,st),st|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,J(Jr,st),st|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,J(Jr,st),st|=r;return Ae(e,t,o,n),t.child}function fp(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function vs(e,t,n,r,o){var i=Ge(n)?nr:Pe.current;return i=Kr(t,i),Qr(t,o),n=as(e,t,n,r,i,o),r=us(),e!==null&&!Qe?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ln(e,t,o)):(oe&&r&&Ul(t),t.flags|=1,Ae(e,t,n,o),t.child)}function pp(e,t,n,r,o){if(Ge(n)){var i=!0;da(t)}else i=!1;if(Qr(t,o),t.stateNode===null)Ma(e,t),Pf(t,n,r),Jl(t,n,r,o),r=!0;else if(e===null){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;typeof s=="object"&&s!==null?s=kt(s):(s=Ge(n)?nr:Pe.current,s=Kr(t,s));var d=n.getDerivedStateFromProps,c=typeof d=="function"||typeof a.getSnapshotBeforeUpdate=="function";c||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(u!==r||l!==s)&&Df(t,a,r,s),Bn=!1;var f=t.memoizedState;a.state=f,_a(t,r,a,o),l=t.memoizedState,u!==r||f!==l||$e.current||Bn?(typeof d=="function"&&(Zl(t,n,d,r),l=t.memoizedState),(u=Bn||Mf(t,n,u,r,f,l,s))?(c||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,wf(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Bt(t.type,u),a.props=s,c=t.pendingProps,f=a.context,l=n.contextType,typeof l=="object"&&l!==null?l=kt(l):(l=Ge(n)?nr:Pe.current,l=Kr(t,l));var m=n.getDerivedStateFromProps;(d=typeof m=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(u!==c||f!==l)&&Df(t,a,r,l),Bn=!1,f=t.memoizedState,a.state=f,_a(t,r,a,o);var y=t.memoizedState;u!==c||f!==y||$e.current||Bn?(typeof m=="function"&&(Zl(t,n,m,r),y=t.memoizedState),(s=Bn||Mf(t,n,s,r,f,y,l)||!1)?(d||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(r,y,l),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(r,y,l)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=y),a.props=r,a.state=y,a.context=l,r=s):(typeof a.componentDidUpdate!="function"||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return ms(e,t,n,r,i,o)}function ms(e,t,n,r,o,i){fp(e,t);var a=(t.flags&128)!==0;if(!r&&!a)return o&&gf(t,n,!1),ln(e,t,i);r=t.stateNode,vy.current=t;var u=a&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&a?(t.child=Yr(t,e.child,null,i),t.child=Yr(t,null,u,i)):Ae(e,t,u,i),t.memoizedState=r.state,o&&gf(t,n,!0),t.child}function vp(e){var t=e.stateNode;t.pendingContext?mf(e,t.pendingContext,t.pendingContext!==t.context):t.context&&mf(e,t.context,!1),es(e,t.containerInfo)}function mp(e,t,n,r,o){return $r(),Vl(o),t.flags|=256,Ae(e,t,n,r),t.child}var hs={dehydrated:null,treeContext:null,retryLane:0};function gs(e){return{baseLanes:e,cachePool:null,transitions:null}}function hp(e,t,n){var r=t.pendingProps,o=le.current,i=!1,a=(t.flags&128)!==0,u;if((u=a)||(u=e!==null&&e.memoizedState===null?!1:(o&2)!==0),u?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),J(le,o&1),e===null)return jl(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?((t.mode&1)===0?t.lanes=1:e.data==="$!"?t.lanes=8:t.lanes=1073741824,null):(a=r.children,e=r.fallback,i?(r=t.mode,i=t.child,a={mode:"hidden",children:a},(r&1)===0&&i!==null?(i.childLanes=0,i.pendingProps=a):i=Ua(a,r,0,null),e=fr(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=gs(n),t.memoizedState=hs,e):ys(t,a));if(o=e.memoizedState,o!==null&&(u=o.dehydrated,u!==null))return my(e,t,a,r,u,o,n);if(i){i=r.fallback,a=t.mode,o=e.child,u=o.sibling;var l={mode:"hidden",children:r.children};return(a&1)===0&&t.child!==o?(r=t.child,r.childLanes=0,r.pendingProps=l,t.deletions=null):(r=Hn(o,l),r.subtreeFlags=o.subtreeFlags&14680064),u!==null?i=Hn(u,i):(i=fr(i,a,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,a=e.child.memoizedState,a=a===null?gs(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},i.memoizedState=a,i.childLanes=e.childLanes&~n,t.memoizedState=hs,r}return i=e.child,e=i.sibling,r=Hn(i,{mode:"visible",children:r.children}),(t.mode&1)===0&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function ys(e,t){return t=Ua({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function ba(e,t,n,r){return r!==null&&Vl(r),Yr(t,e.child,null,n),e=ys(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function my(e,t,n,r,o,i,a){if(n)return t.flags&256?(t.flags&=-257,r=fs(Error(T(422))),ba(e,t,a,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Ua({mode:"visible",children:r.children},o,0,null),i=fr(i,o,a,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,(t.mode&1)!==0&&Yr(t,e.child,null,a),t.child.memoizedState=gs(a),t.memoizedState=hs,i);if((t.mode&1)===0)return ba(e,t,a,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var u=r.dgst;return r=u,i=Error(T(419)),r=fs(i,r,void 0),ba(e,t,a,r)}if(u=(a&e.childLanes)!==0,Qe||u){if(r=Ee,r!==null){switch(a&-a){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=(o&(r.suspendedLanes|a))!==0?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,an(e,o),Ft(r,e,o,-1))}return Rs(),r=fs(Error(T(421))),ba(e,t,a,r)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=by.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,lt=Mn(o.nextSibling),ut=t,oe=!0,Nt=null,e!==null&&(_t[Ct++]=rn,_t[Ct++]=on,_t[Ct++]=rr,rn=e.id,on=e.overflow,rr=t),t=ys(t,r.children),t.flags|=4096,t)}function gp(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),Yl(e.return,t,n)}function _s(e,t,n,r,o){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function yp(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ae(e,t,r.children,n),r=le.current,(r&2)!==0)r=r&1|2,t.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&gp(e,n,t);else if(e.tag===19)gp(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(J(le,r),(t.mode&1)===0)t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;n!==null;)e=n.alternate,e!==null&&Ea(e)===null&&(o=n),n=n.sibling;n=o,n===null?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),_s(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&Ea(e)===null){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}_s(t,!0,n,null,i);break;case"together":_s(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ma(e,t){(t.mode&1)===0&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ln(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),lr|=t.lanes,(n&t.childLanes)===0)return null;if(e!==null&&t.child!==e.child)throw Error(T(153));if(t.child!==null){for(e=t.child,n=Hn(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Hn(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function hy(e,t,n){switch(t.tag){case 3:vp(t),$r();break;case 5:Lf(t);break;case 1:Ge(t.type)&&da(t);break;case 4:es(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;J(ha,r._currentValue),r._currentValue=o;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(J(le,le.current&1),t.flags|=128,null):(n&t.child.childLanes)!==0?hp(e,t,n):(J(le,le.current&1),e=ln(e,t,n),e!==null?e.sibling:null);J(le,le.current&1);break;case 19:if(r=(n&t.childLanes)!==0,(e.flags&128)!==0){if(r)return yp(e,t,n);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),J(le,le.current),r)break;return null;case 22:case 23:return t.lanes=0,dp(e,t,n)}return ln(e,t,n)}var _p,Cs,Cp,kp;_p=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Cs=function(){},Cp=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ar(Kt.current);var i=null;switch(n){case"input":o=Yu(e,o),r=Yu(e,r),i=[];break;case"select":o=ue({},o,{value:void 0}),r=ue({},r,{value:void 0}),i=[];break;case"textarea":o=Zu(e,o),r=Zu(e,r),i=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=la)}el(n,r);var a;n=null;for(s in o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&o[s]!=null)if(s==="style"){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else s!=="dangerouslySetInnerHTML"&&s!=="children"&&s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(xo.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var l=r[s];if(u=o!=null?o[s]:void 0,r.hasOwnProperty(s)&&l!==u&&(l!=null||u!=null))if(s==="style")if(u){for(a in u)!u.hasOwnProperty(a)||l&&l.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in l)l.hasOwnProperty(a)&&u[a]!==l[a]&&(n||(n={}),n[a]=l[a])}else n||(i||(i=[]),i.push(s,n)),n=l;else s==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,u=u?u.__html:void 0,l!=null&&u!==l&&(i=i||[]).push(s,l)):s==="children"?typeof l!="string"&&typeof l!="number"||(i=i||[]).push(s,""+l):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&(xo.hasOwnProperty(s)?(l!=null&&s==="onScroll"&&ne("scroll",e),i||u===l||(i=[])):(i=i||[]).push(s,l))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},kp=function(e,t,n,r){n!==r&&(t.flags|=4)};function ii(e,t){if(!oe)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ne(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function gy(e,t,n){var r=t.pendingProps;switch(Wl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ne(t),null;case 1:return Ge(t.type)&&ca(),Ne(t),null;case 3:return r=t.stateNode,Xr(),re($e),re(Pe),rs(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(ma(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,Nt!==null&&(Ds(Nt),Nt=null))),Cs(e,t),Ne(t),null;case 5:ts(t);var o=ar(ei.current);if(n=t.type,e!==null&&t.stateNode!=null)Cp(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(T(166));return Ne(t),null}if(e=ar(Kt.current),ma(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[Wt]=t,r[Yo]=i,e=(t.mode&1)!==0,n){case"dialog":ne("cancel",r),ne("close",r);break;case"iframe":case"object":case"embed":ne("load",r);break;case"video":case"audio":for(o=0;o<$o.length;o++)ne($o[o],r);break;case"source":ne("error",r);break;case"img":case"image":case"link":ne("error",r),ne("load",r);break;case"details":ne("toggle",r);break;case"input":Jc(r,i),ne("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},ne("invalid",r);break;case"textarea":nd(r,i),ne("invalid",r)}el(n,i),o=null;for(var a in i)if(i.hasOwnProperty(a)){var u=i[a];a==="children"?typeof u=="string"?r.textContent!==u&&(i.suppressHydrationWarning!==!0&&ua(r.textContent,u,e),o=["children",u]):typeof u=="number"&&r.textContent!==""+u&&(i.suppressHydrationWarning!==!0&&ua(r.textContent,u,e),o=["children",""+u]):xo.hasOwnProperty(a)&&u!=null&&a==="onScroll"&&ne("scroll",r)}switch(n){case"input":Ai(r),td(r,i,!0);break;case"textarea":Ai(r),od(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=la)}r=o,t.updateQueue=r,r!==null&&(t.flags|=4)}else{a=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=id(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=a.createElement(n,{is:r.is}):(e=a.createElement(n),n==="select"&&(a=e,r.multiple?a.multiple=!0:r.size&&(a.size=r.size))):e=a.createElementNS(e,n),e[Wt]=t,e[Yo]=r,_p(e,t,!1,!1),t.stateNode=e;e:{switch(a=tl(n,r),n){case"dialog":ne("cancel",e),ne("close",e),o=r;break;case"iframe":case"object":case"embed":ne("load",e),o=r;break;case"video":case"audio":for(o=0;o<$o.length;o++)ne($o[o],e);o=r;break;case"source":ne("error",e),o=r;break;case"img":case"image":case"link":ne("error",e),ne("load",e),o=r;break;case"details":ne("toggle",e),o=r;break;case"input":Jc(e,r),o=Yu(e,r),ne("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=ue({},r,{value:void 0}),ne("invalid",e);break;case"textarea":nd(e,r),o=Zu(e,r),ne("invalid",e);break;default:o=r}el(n,o),u=o;for(i in u)if(u.hasOwnProperty(i)){var l=u[i];i==="style"?ld(e,l):i==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&ad(e,l)):i==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&To(e,l):typeof l=="number"&&To(e,""+l):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(xo.hasOwnProperty(i)?l!=null&&i==="onScroll"&&ne("scroll",e):l!=null&&Au(e,i,l,a))}switch(n){case"input":Ai(e),td(e,r,!1);break;case"textarea":Ai(e),od(e);break;case"option":r.value!=null&&e.setAttribute("value",""+En(r.value));break;case"select":e.multiple=!!r.multiple,i=r.value,i!=null?Dr(e,!!r.multiple,i,!1):r.defaultValue!=null&&Dr(e,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=la)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Ne(t),null;case 6:if(e&&t.stateNode!=null)kp(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(T(166));if(n=ar(ei.current),ar(Kt.current),ma(t)){if(r=t.stateNode,n=t.memoizedProps,r[Wt]=t,(i=r.nodeValue!==n)&&(e=ut,e!==null))switch(e.tag){case 3:ua(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&ua(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[Wt]=t,t.stateNode=r}return Ne(t),null;case 13:if(re(le),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(oe&&lt!==null&&(t.mode&1)!==0&&(t.flags&128)===0)xf(),$r(),t.flags|=98560,i=!1;else if(i=ma(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(T(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(T(317));i[Wt]=t}else $r(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;Ne(t),i=!1}else Nt!==null&&(Ds(Nt),Nt=null),i=!0;if(!i)return t.flags&65536?t:null}return(t.flags&128)!==0?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,(t.mode&1)!==0&&(e===null||(le.current&1)!==0?Ce===0&&(Ce=3):Rs())),t.updateQueue!==null&&(t.flags|=4),Ne(t),null);case 4:return Xr(),Cs(e,t),e===null&&Go(t.stateNode.containerInfo),Ne(t),null;case 10:return Ql(t.type._context),Ne(t),null;case 17:return Ge(t.type)&&ca(),Ne(t),null;case 19:if(re(le),i=t.memoizedState,i===null)return Ne(t),null;if(r=(t.flags&128)!==0,a=i.rendering,a===null)if(r)ii(i,!1);else{if(Ce!==0||e!==null&&(e.flags&128)!==0)for(e=t.child;e!==null;){if(a=Ea(e),a!==null){for(t.flags|=128,ii(i,!1),r=a.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,a=i.alternate,a===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,e=a.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return J(le,le.current&1|2),t.child}e=e.sibling}i.tail!==null&&ve()>eo&&(t.flags|=128,r=!0,ii(i,!1),t.lanes=4194304)}else{if(!r)if(e=Ea(a),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),ii(i,!0),i.tail===null&&i.tailMode==="hidden"&&!a.alternate&&!oe)return Ne(t),null}else 2*ve()-i.renderingStartTime>eo&&n!==1073741824&&(t.flags|=128,r=!0,ii(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(n=i.last,n!==null?n.sibling=a:t.child=a,i.last=a)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ve(),t.sibling=null,n=le.current,J(le,r?n&1|2:n&1),t):(Ne(t),null);case 22:case 23:return Bs(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&(t.mode&1)!==0?(st&1073741824)!==0&&(Ne(t),t.subtreeFlags&6&&(t.flags|=8192)):Ne(t),null;case 24:return null;case 25:return null}throw Error(T(156,t.tag))}function yy(e,t){switch(Wl(t),t.tag){case 1:return Ge(t.type)&&ca(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Xr(),re($e),re(Pe),rs(),e=t.flags,(e&65536)!==0&&(e&128)===0?(t.flags=e&-65537|128,t):null;case 5:return ts(t),null;case 13:if(re(le),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(T(340));$r()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return re(le),null;case 4:return Xr(),null;case 10:return Ql(t.type._context),null;case 22:case 23:return Bs(),null;case 24:return null;default:return null}}var Pa=!1,Be=!1,_y=typeof WeakSet=="function"?WeakSet:Set,N=null;function Zr(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){fe(e,t,r)}else n.current=null}function ks(e,t,n){try{n()}catch(r){fe(e,t,r)}}var Ep=!1;function Cy(e,t){if(Bl=Xi,e=Zd(),wl(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var a=0,u=-1,l=-1,s=0,d=0,c=e,f=null;t:for(;;){for(var m;c!==n||o!==0&&c.nodeType!==3||(u=a+o),c!==i||r!==0&&c.nodeType!==3||(l=a+r),c.nodeType===3&&(a+=c.nodeValue.length),(m=c.firstChild)!==null;)f=c,c=m;for(;;){if(c===e)break t;if(f===n&&++s===o&&(u=a),f===i&&++d===r&&(l=a),(m=c.nextSibling)!==null)break;c=f,f=c.parentNode}c=m}n=u===-1||l===-1?null:{start:u,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(Rl={focusedElem:e,selectionRange:n},Xi=!1,N=t;N!==null;)if(t=N,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,N=e;else for(;N!==null;){t=N;try{var y=t.alternate;if((t.flags&1024)!==0)switch(t.tag){case 0:case 11:case 15:break;case 1:if(y!==null){var C=y.memoizedProps,E=y.memoizedState,v=t.stateNode,p=v.getSnapshotBeforeUpdate(t.elementType===t.type?C:Bt(t.type,C),E);v.__reactInternalSnapshotBeforeUpdate=p}break;case 3:var h=t.stateNode.containerInfo;h.nodeType===1?h.textContent="":h.nodeType===9&&h.documentElement&&h.removeChild(h.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(T(163))}}catch(_){fe(t,t.return,_)}if(e=t.sibling,e!==null){e.return=t.return,N=e;break}N=t.return}return y=Ep,Ep=!1,y}function ai(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,i!==void 0&&ks(t,n,i)}o=o.next}while(o!==r)}}function Da(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Es(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function xp(e){var t=e.alternate;t!==null&&(e.alternate=null,xp(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Wt],delete t[Yo],delete t[Al],delete t[ny],delete t[ry])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Sp(e){return e.tag===5||e.tag===3||e.tag===4}function wp(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Sp(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function xs(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=la));else if(r!==4&&(e=e.child,e!==null))for(xs(e,t,n),e=e.sibling;e!==null;)xs(e,t,n),e=e.sibling}function Ss(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Ss(e,t,n),e=e.sibling;e!==null;)Ss(e,t,n),e=e.sibling}var Te=null,Rt=!1;function Ln(e,t,n){for(n=n.child;n!==null;)Ip(e,t,n),n=n.sibling}function Ip(e,t,n){if(Ut&&typeof Ut.onCommitFiberUnmount=="function")try{Ut.onCommitFiberUnmount(ji,n)}catch{}switch(n.tag){case 5:Be||Zr(n,t);case 6:var r=Te,o=Rt;Te=null,Ln(e,t,n),Te=r,Rt=o,Te!==null&&(Rt?(e=Te,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):Te.removeChild(n.stateNode));break;case 18:Te!==null&&(Rt?(e=Te,n=n.stateNode,e.nodeType===8?Ol(e.parentNode,n):e.nodeType===1&&Ol(e,n),Ao(e)):Ol(Te,n.stateNode));break;case 4:r=Te,o=Rt,Te=n.stateNode.containerInfo,Rt=!0,Ln(e,t,n),Te=r,Rt=o;break;case 0:case 11:case 14:case 15:if(!Be&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,a!==void 0&&((i&2)!==0||(i&4)!==0)&&ks(n,t,a),o=o.next}while(o!==r)}Ln(e,t,n);break;case 1:if(!Be&&(Zr(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(u){fe(n,t,u)}Ln(e,t,n);break;case 21:Ln(e,t,n);break;case 22:n.mode&1?(Be=(r=Be)||n.memoizedState!==null,Ln(e,t,n),Be=r):Ln(e,t,n);break;default:Ln(e,t,n)}}function Tp(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new _y),t.forEach(function(r){var o=My.bind(null,e,r);n.has(r)||(n.add(r),r.then(o,o))})}}function Lt(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,a=t,u=a;e:for(;u!==null;){switch(u.tag){case 5:Te=u.stateNode,Rt=!1;break e;case 3:Te=u.stateNode.containerInfo,Rt=!0;break e;case 4:Te=u.stateNode.containerInfo,Rt=!0;break e}u=u.return}if(Te===null)throw Error(T(160));Ip(i,a,o),Te=null,Rt=!1;var l=o.alternate;l!==null&&(l.return=null),o.return=null}catch(s){fe(o,t,s)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)bp(t,e),t=t.sibling}function bp(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Lt(t,e),Vt(e),r&4){try{ai(3,e,e.return),Da(3,e)}catch(C){fe(e,e.return,C)}try{ai(5,e,e.return)}catch(C){fe(e,e.return,C)}}break;case 1:Lt(t,e),Vt(e),r&512&&n!==null&&Zr(n,n.return);break;case 5:if(Lt(t,e),Vt(e),r&512&&n!==null&&Zr(n,n.return),e.flags&32){var o=e.stateNode;try{To(o,"")}catch(C){fe(e,e.return,C)}}if(r&4&&(o=e.stateNode,o!=null)){var i=e.memoizedProps,a=n!==null?n.memoizedProps:i,u=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{u==="input"&&i.type==="radio"&&i.name!=null&&ed(o,i),tl(u,a);var s=tl(u,i);for(a=0;a<l.length;a+=2){var d=l[a],c=l[a+1];d==="style"?ld(o,c):d==="dangerouslySetInnerHTML"?ad(o,c):d==="children"?To(o,c):Au(o,d,c,s)}switch(u){case"input":Xu(o,i);break;case"textarea":rd(o,i);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var m=i.value;m!=null?Dr(o,!!i.multiple,m,!1):f!==!!i.multiple&&(i.defaultValue!=null?Dr(o,!!i.multiple,i.defaultValue,!0):Dr(o,!!i.multiple,i.multiple?[]:"",!1))}o[Yo]=i}catch(C){fe(e,e.return,C)}}break;case 6:if(Lt(t,e),Vt(e),r&4){if(e.stateNode===null)throw Error(T(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(C){fe(e,e.return,C)}}break;case 3:if(Lt(t,e),Vt(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Ao(t.containerInfo)}catch(C){fe(e,e.return,C)}break;case 4:Lt(t,e),Vt(e);break;case 13:Lt(t,e),Vt(e),o=e.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(Ts=ve())),r&4&&Tp(e);break;case 22:if(d=n!==null&&n.memoizedState!==null,e.mode&1?(Be=(s=Be)||d,Lt(t,e),Be=s):Lt(t,e),Vt(e),r&8192){if(s=e.memoizedState!==null,(e.stateNode.isHidden=s)&&!d&&(e.mode&1)!==0)for(N=e,d=e.child;d!==null;){for(c=N=d;N!==null;){switch(f=N,m=f.child,f.tag){case 0:case 11:case 14:case 15:ai(4,f,f.return);break;case 1:Zr(f,f.return);var y=f.stateNode;if(typeof y.componentWillUnmount=="function"){r=f,n=f.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(C){fe(r,n,C)}}break;case 5:Zr(f,f.return);break;case 22:if(f.memoizedState!==null){Dp(c);continue}}m!==null?(m.return=f,N=m):Dp(c)}d=d.sibling}e:for(d=null,c=e;;){if(c.tag===5){if(d===null){d=c;try{o=c.stateNode,s?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(u=c.stateNode,l=c.memoizedProps.style,a=l!=null&&l.hasOwnProperty("display")?l.display:null,u.style.display=ud("display",a))}catch(C){fe(e,e.return,C)}}}else if(c.tag===6){if(d===null)try{c.stateNode.nodeValue=s?"":c.memoizedProps}catch(C){fe(e,e.return,C)}}else if((c.tag!==22&&c.tag!==23||c.memoizedState===null||c===e)&&c.child!==null){c.child.return=c,c=c.child;continue}if(c===e)break e;for(;c.sibling===null;){if(c.return===null||c.return===e)break e;d===c&&(d=null),c=c.return}d===c&&(d=null),c.sibling.return=c.return,c=c.sibling}}break;case 19:Lt(t,e),Vt(e),r&4&&Tp(e);break;case 21:break;default:Lt(t,e),Vt(e)}}function Vt(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Sp(n)){var r=n;break e}n=n.return}throw Error(T(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(To(o,""),r.flags&=-33);var i=wp(e);Ss(e,i,o);break;case 3:case 4:var a=r.stateNode.containerInfo,u=wp(e);xs(e,u,a);break;default:throw Error(T(161))}}catch(l){fe(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function ky(e,t,n){N=e,Mp(e)}function Mp(e,t,n){for(var r=(e.mode&1)!==0;N!==null;){var o=N,i=o.child;if(o.tag===22&&r){var a=o.memoizedState!==null||Pa;if(!a){var u=o.alternate,l=u!==null&&u.memoizedState!==null||Be;u=Pa;var s=Be;if(Pa=a,(Be=l)&&!s)for(N=o;N!==null;)a=N,l=a.child,a.tag===22&&a.memoizedState!==null?Np(o):l!==null?(l.return=a,N=l):Np(o);for(;i!==null;)N=i,Mp(i),i=i.sibling;N=o,Pa=u,Be=s}Pp(e)}else(o.subtreeFlags&8772)!==0&&i!==null?(i.return=o,N=i):Pp(e)}}function Pp(e){for(;N!==null;){var t=N;if((t.flags&8772)!==0){var n=t.alternate;try{if((t.flags&8772)!==0)switch(t.tag){case 0:case 11:case 15:Be||Da(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!Be)if(n===null)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Bt(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&Tf(t,i,r);break;case 3:var a=t.updateQueue;if(a!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Tf(t,a,n)}break;case 5:var u=t.stateNode;if(n===null&&t.flags&4){n=u;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var s=t.alternate;if(s!==null){var d=s.memoizedState;if(d!==null){var c=d.dehydrated;c!==null&&Ao(c)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(T(163))}Be||t.flags&512&&Es(t)}catch(f){fe(t,t.return,f)}}if(t===e){N=null;break}if(n=t.sibling,n!==null){n.return=t.return,N=n;break}N=t.return}}function Dp(e){for(;N!==null;){var t=N;if(t===e){N=null;break}var n=t.sibling;if(n!==null){n.return=t.return,N=n;break}N=t.return}}function Np(e){for(;N!==null;){var t=N;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Da(4,t)}catch(l){fe(t,n,l)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var o=t.return;try{r.componentDidMount()}catch(l){fe(t,o,l)}}var i=t.return;try{Es(t)}catch(l){fe(t,i,l)}break;case 5:var a=t.return;try{Es(t)}catch(l){fe(t,a,l)}}}catch(l){fe(t,t.return,l)}if(t===e){N=null;break}var u=t.sibling;if(u!==null){u.return=t.return,N=u;break}N=t.return}}var Ey=Math.ceil,Na=en.ReactCurrentDispatcher,ws=en.ReactCurrentOwner,xt=en.ReactCurrentBatchConfig,K=0,Ee=null,me=null,be=0,st=0,Jr=Pn(0),Ce=0,ui=null,lr=0,Ba=0,Is=0,li=null,Ye=null,Ts=0,eo=1/0,sn=null,Ra=!1,bs=null,Fn=null,La=!1,On=null,Fa=0,si=0,Ms=null,Oa=-1,Aa=0;function ze(){return(K&6)!==0?ve():Oa!==-1?Oa:Oa=ve()}function An(e){return(e.mode&1)===0?1:(K&2)!==0&&be!==0?be&-be:iy.transition!==null?(Aa===0&&(Aa=xd()),Aa):(e=V,e!==0||(e=window.event,e=e===void 0?16:Nd(e.type)),e)}function Ft(e,t,n,r){if(50<si)throw si=0,Ms=null,Error(T(185));Bo(e,n,r),((K&2)===0||e!==Ee)&&(e===Ee&&((K&2)===0&&(Ba|=n),Ce===4&&zn(e,be)),Xe(e,r),n===1&&K===0&&(t.mode&1)===0&&(eo=ve()+500,fa&&Nn()))}function Xe(e,t){var n=e.callbackNode;ig(e,t);var r=Gi(e,e===Ee?be:0);if(r===0)n!==null&&Cd(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&Cd(n),t===1)e.tag===0?oy(Rp.bind(null,e)):yf(Rp.bind(null,e)),ey(function(){(K&6)===0&&Nn()}),n=null;else{switch(Sd(r)){case 1:n=ll;break;case 4:n=kd;break;case 16:n=Ki;break;case 536870912:n=Ed;break;default:n=Ki}n=Wp(n,Bp.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Bp(e,t){if(Oa=-1,Aa=0,(K&6)!==0)throw Error(T(327));var n=e.callbackNode;if(to()&&e.callbackNode!==n)return null;var r=Gi(e,e===Ee?be:0);if(r===0)return null;if((r&30)!==0||(r&e.expiredLanes)!==0||t)t=za(e,r);else{t=r;var o=K;K|=2;var i=Fp();(Ee!==e||be!==t)&&(sn=null,eo=ve()+500,cr(e,t));do try{wy();break}catch(u){Lp(e,u)}while(1);Gl(),Na.current=i,K=o,me!==null?t=0:(Ee=null,be=0,t=Ce)}if(t!==0){if(t===2&&(o=sl(e),o!==0&&(r=o,t=Ps(e,o))),t===1)throw n=ui,cr(e,0),zn(e,r),Xe(e,ve()),n;if(t===6)zn(e,r);else{if(o=e.current.alternate,(r&30)===0&&!xy(o)&&(t=za(e,r),t===2&&(i=sl(e),i!==0&&(r=i,t=Ps(e,i))),t===1))throw n=ui,cr(e,0),zn(e,r),Xe(e,ve()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(T(345));case 2:dr(e,Ye,sn);break;case 3:if(zn(e,r),(r&130023424)===r&&(t=Ts+500-ve(),10<t)){if(Gi(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){ze(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Fl(dr.bind(null,e,Ye,sn),t);break}dr(e,Ye,sn);break;case 4:if(zn(e,r),(r&4194240)===r)break;for(t=e.eventTimes,o=-1;0<r;){var a=31-Pt(r);i=1<<a,a=t[a],a>o&&(o=a),r&=~i}if(r=o,r=ve()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ey(r/1960))-r,10<r){e.timeoutHandle=Fl(dr.bind(null,e,Ye,sn),r);break}dr(e,Ye,sn);break;case 5:dr(e,Ye,sn);break;default:throw Error(T(329))}}}return Xe(e,ve()),e.callbackNode===n?Bp.bind(null,e):null}function Ps(e,t){var n=li;return e.current.memoizedState.isDehydrated&&(cr(e,t).flags|=256),e=za(e,t),e!==2&&(t=Ye,Ye=n,t!==null&&Ds(t)),e}function Ds(e){Ye===null?Ye=e:Ye.push.apply(Ye,e)}function xy(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!Dt(i(),o))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function zn(e,t){for(t&=~Is,t&=~Ba,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Pt(t),r=1<<n;e[n]=-1,t&=~r}}function Rp(e){if((K&6)!==0)throw Error(T(327));to();var t=Gi(e,0);if((t&1)===0)return Xe(e,ve()),null;var n=za(e,t);if(e.tag!==0&&n===2){var r=sl(e);r!==0&&(t=r,n=Ps(e,r))}if(n===1)throw n=ui,cr(e,0),zn(e,t),Xe(e,ve()),n;if(n===6)throw Error(T(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,dr(e,Ye,sn),Xe(e,ve()),null}function Ns(e,t){var n=K;K|=1;try{return e(t)}finally{K=n,K===0&&(eo=ve()+500,fa&&Nn())}}function sr(e){On!==null&&On.tag===0&&(K&6)===0&&to();var t=K;K|=1;var n=xt.transition,r=V;try{if(xt.transition=null,V=1,e)return e()}finally{V=r,xt.transition=n,K=t,(K&6)===0&&Nn()}}function Bs(){st=Jr.current,re(Jr)}function cr(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,Jg(n)),me!==null)for(n=me.return;n!==null;){var r=n;switch(Wl(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&ca();break;case 3:Xr(),re($e),re(Pe),rs();break;case 5:ts(r);break;case 4:Xr();break;case 13:re(le);break;case 19:re(le);break;case 10:Ql(r.type._context);break;case 22:case 23:Bs()}n=n.return}if(Ee=e,me=e=Hn(e.current,null),be=st=t,Ce=0,ui=null,Is=Ba=lr=0,Ye=li=null,ir!==null){for(t=0;t<ir.length;t++)if(n=ir[t],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,i=n.pending;if(i!==null){var a=i.next;i.next=o,r.next=a}n.pending=r}ir=null}return e}function Lp(e,t){do{var n=me;try{if(Gl(),xa.current=Ta,Sa){for(var r=se.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}Sa=!1}if(ur=0,ke=_e=se=null,ti=!1,ni=0,ws.current=null,n===null||n.return===null){Ce=1,ui=t,me=null;break}e:{var i=e,a=n.return,u=n,l=t;if(t=be,u.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var s=l,d=u,c=d.tag;if((d.mode&1)===0&&(c===0||c===11||c===15)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=ap(a);if(m!==null){m.flags&=-257,up(m,a,u,i,t),m.mode&1&&ip(i,s,t),t=m,l=s;var y=t.updateQueue;if(y===null){var C=new Set;C.add(l),t.updateQueue=C}else y.add(l);break e}else{if((t&1)===0){ip(i,s,t),Rs();break e}l=Error(T(426))}}else if(oe&&u.mode&1){var E=ap(a);if(E!==null){(E.flags&65536)===0&&(E.flags|=256),up(E,a,u,i,t),Vl(qr(l,u));break e}}i=l=qr(l,u),Ce!==4&&(Ce=2),li===null?li=[i]:li.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var v=rp(i,l,t);If(i,v);break e;case 1:u=l;var p=i.type,h=i.stateNode;if((i.flags&128)===0&&(typeof p.getDerivedStateFromError=="function"||h!==null&&typeof h.componentDidCatch=="function"&&(Fn===null||!Fn.has(h)))){i.flags|=65536,t&=-t,i.lanes|=t;var _=op(i,u,t);If(i,_);break e}}i=i.return}while(i!==null)}Ap(n)}catch(S){t=S,me===n&&n!==null&&(me=n=n.return);continue}break}while(1)}function Fp(){var e=Na.current;return Na.current=Ta,e===null?Ta:e}function Rs(){(Ce===0||Ce===3||Ce===2)&&(Ce=4),Ee===null||(lr&268435455)===0&&(Ba&268435455)===0||zn(Ee,be)}function za(e,t){var n=K;K|=2;var r=Fp();(Ee!==e||be!==t)&&(sn=null,cr(e,t));do try{Sy();break}catch(o){Lp(e,o)}while(1);if(Gl(),K=n,Na.current=r,me!==null)throw Error(T(261));return Ee=null,be=0,Ce}function Sy(){for(;me!==null;)Op(me)}function wy(){for(;me!==null&&!Xh();)Op(me)}function Op(e){var t=Up(e.alternate,e,st);e.memoizedProps=e.pendingProps,t===null?Ap(e):me=t,ws.current=null}function Ap(e){var t=e;do{var n=t.alternate;if(e=t.return,(t.flags&32768)===0){if(n=gy(n,t,st),n!==null){me=n;return}}else{if(n=yy(n,t),n!==null){n.flags&=32767,me=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Ce=6,me=null;return}}if(t=t.sibling,t!==null){me=t;return}me=t=e}while(t!==null);Ce===0&&(Ce=5)}function dr(e,t,n){var r=V,o=xt.transition;try{xt.transition=null,V=1,Iy(e,t,n,r)}finally{xt.transition=o,V=r}return null}function Iy(e,t,n,r){do to();while(On!==null);if((K&6)!==0)throw Error(T(327));n=e.finishedWork;var o=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(T(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(ag(e,i),e===Ee&&(me=Ee=null,be=0),(n.subtreeFlags&2064)===0&&(n.flags&2064)===0||La||(La=!0,Wp(Ki,function(){return to(),null})),i=(n.flags&15990)!==0,(n.subtreeFlags&15990)!==0||i){i=xt.transition,xt.transition=null;var a=V;V=1;var u=K;K|=4,ws.current=null,Cy(e,n),bp(n,e),$g(Rl),Xi=!!Bl,Rl=Bl=null,e.current=n,ky(n),qh(),K=u,V=a,xt.transition=i}else e.current=n;if(La&&(La=!1,On=e,Fa=o),i=e.pendingLanes,i===0&&(Fn=null),eg(n.stateNode),Xe(e,ve()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(Ra)throw Ra=!1,e=bs,bs=null,e;return(Fa&1)!==0&&e.tag!==0&&to(),i=e.pendingLanes,(i&1)!==0?e===Ms?si++:(si=0,Ms=e):si=0,Nn(),null}function to(){if(On!==null){var e=Sd(Fa),t=xt.transition,n=V;try{if(xt.transition=null,V=16>e?16:e,On===null)var r=!1;else{if(e=On,On=null,Fa=0,(K&6)!==0)throw Error(T(331));var o=K;for(K|=4,N=e.current;N!==null;){var i=N,a=i.child;if((N.flags&16)!==0){var u=i.deletions;if(u!==null){for(var l=0;l<u.length;l++){var s=u[l];for(N=s;N!==null;){var d=N;switch(d.tag){case 0:case 11:case 15:ai(8,d,i)}var c=d.child;if(c!==null)c.return=d,N=c;else for(;N!==null;){d=N;var f=d.sibling,m=d.return;if(xp(d),d===s){N=null;break}if(f!==null){f.return=m,N=f;break}N=m}}}var y=i.alternate;if(y!==null){var C=y.child;if(C!==null){y.child=null;do{var E=C.sibling;C.sibling=null,C=E}while(C!==null)}}N=i}}if((i.subtreeFlags&2064)!==0&&a!==null)a.return=i,N=a;else e:for(;N!==null;){if(i=N,(i.flags&2048)!==0)switch(i.tag){case 0:case 11:case 15:ai(9,i,i.return)}var v=i.sibling;if(v!==null){v.return=i.return,N=v;break e}N=i.return}}var p=e.current;for(N=p;N!==null;){a=N;var h=a.child;if((a.subtreeFlags&2064)!==0&&h!==null)h.return=a,N=h;else e:for(a=p;N!==null;){if(u=N,(u.flags&2048)!==0)try{switch(u.tag){case 0:case 11:case 15:Da(9,u)}}catch(S){fe(u,u.return,S)}if(u===a){N=null;break e}var _=u.sibling;if(_!==null){_.return=u.return,N=_;break e}N=u.return}}if(K=o,Nn(),Ut&&typeof Ut.onPostCommitFiberRoot=="function")try{Ut.onPostCommitFiberRoot(ji,e)}catch{}r=!0}return r}finally{V=n,xt.transition=t}}return!1}function zp(e,t,n){t=qr(n,t),t=rp(e,t,1),e=Rn(e,t,1),t=ze(),e!==null&&(Bo(e,1,t),Xe(e,t))}function fe(e,t,n){if(e.tag===3)zp(e,e,n);else for(;t!==null;){if(t.tag===3){zp(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Fn===null||!Fn.has(r))){e=qr(n,e),e=op(t,e,1),t=Rn(t,e,1),e=ze(),t!==null&&(Bo(t,1,e),Xe(t,e));break}}t=t.return}}function Ty(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ze(),e.pingedLanes|=e.suspendedLanes&n,Ee===e&&(be&n)===n&&(Ce===4||Ce===3&&(be&130023424)===be&&500>ve()-Ts?cr(e,0):Is|=n),Xe(e,t)}function Hp(e,t){t===0&&((e.mode&1)===0?t=1:(t=$i,$i<<=1,($i&130023424)===0&&($i=4194304)));var n=ze();e=an(e,t),e!==null&&(Bo(e,t,n),Xe(e,n))}function by(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Hp(e,n)}function My(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(T(314))}r!==null&&r.delete(t),Hp(e,n)}var Up;Up=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||$e.current)Qe=!0;else{if((e.lanes&n)===0&&(t.flags&128)===0)return Qe=!1,hy(e,t,n);Qe=(e.flags&131072)!==0}else Qe=!1,oe&&(t.flags&1048576)!==0&&_f(t,va,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ma(e,t),e=t.pendingProps;var o=Kr(t,Pe.current);Qr(t,n),o=as(null,t,r,e,o,n);var i=us();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ge(r)?(i=!0,da(t)):i=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,ql(t),o.updater=Ca,t.stateNode=o,o._reactInternals=t,Jl(t,r,e,n),t=ms(null,t,r,!0,i,n)):(t.tag=0,oe&&i&&Ul(t),Ae(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ma(e,t),e=t.pendingProps,o=r._init,r=o(r._payload),t.type=r,o=t.tag=Dy(r),e=Bt(r,e),o){case 0:t=vs(null,t,r,e,n);break e;case 1:t=pp(null,t,r,e,n);break e;case 11:t=lp(null,t,r,e,n);break e;case 14:t=sp(null,t,r,Bt(r.type,e),n);break e}throw Error(T(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Bt(r,o),vs(e,t,r,o,n);case 1:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Bt(r,o),pp(e,t,r,o,n);case 3:e:{if(vp(t),e===null)throw Error(T(387));r=t.pendingProps,i=t.memoizedState,o=i.element,wf(e,t),_a(t,r,null,n);var a=t.memoizedState;if(r=a.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){o=qr(Error(T(423)),t),t=mp(e,t,r,n,o);break e}else if(r!==o){o=qr(Error(T(424)),t),t=mp(e,t,r,n,o);break e}else for(lt=Mn(t.stateNode.containerInfo.firstChild),ut=t,oe=!0,Nt=null,n=Rf(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if($r(),r===o){t=ln(e,t,n);break e}Ae(e,t,r,n)}t=t.child}return t;case 5:return Lf(t),e===null&&jl(t),r=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,a=o.children,Ll(r,o)?a=null:i!==null&&Ll(r,i)&&(t.flags|=32),fp(e,t),Ae(e,t,a,n),t.child;case 6:return e===null&&jl(t),null;case 13:return hp(e,t,n);case 4:return es(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Yr(t,null,r,n):Ae(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Bt(r,o),lp(e,t,r,o,n);case 7:return Ae(e,t,t.pendingProps,n),t.child;case 8:return Ae(e,t,t.pendingProps.children,n),t.child;case 12:return Ae(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=o.value,J(ha,r._currentValue),r._currentValue=a,i!==null)if(Dt(i.value,a)){if(i.children===o.children&&!$e.current){t=ln(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var u=i.dependencies;if(u!==null){a=i.child;for(var l=u.firstContext;l!==null;){if(l.context===r){if(i.tag===1){l=un(-1,n&-n),l.tag=2;var s=i.updateQueue;if(s!==null){s=s.shared;var d=s.pending;d===null?l.next=l:(l.next=d.next,d.next=l),s.pending=l}}i.lanes|=n,l=i.alternate,l!==null&&(l.lanes|=n),Yl(i.return,n,t),u.lanes|=n;break}l=l.next}}else if(i.tag===10)a=i.type===t.type?null:i.child;else if(i.tag===18){if(a=i.return,a===null)throw Error(T(341));a.lanes|=n,u=a.alternate,u!==null&&(u.lanes|=n),Yl(a,n,t),a=i.sibling}else a=i.child;if(a!==null)a.return=i;else for(a=i;a!==null;){if(a===t){a=null;break}if(i=a.sibling,i!==null){i.return=a.return,a=i;break}a=a.return}i=a}Ae(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Qr(t,n),o=kt(o),r=r(o),t.flags|=1,Ae(e,t,r,n),t.child;case 14:return r=t.type,o=Bt(r,t.pendingProps),o=Bt(r.type,o),sp(e,t,r,o,n);case 15:return cp(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Bt(r,o),Ma(e,t),t.tag=1,Ge(r)?(e=!0,da(t)):e=!1,Qr(t,n),Pf(t,r,o),Jl(t,r,o,n),ms(null,t,r,!0,e,n);case 19:return yp(e,t,n);case 22:return dp(e,t,n)}throw Error(T(156,t.tag))};function Wp(e,t){return _d(e,t)}function Py(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function St(e,t,n,r){return new Py(e,t,n,r)}function Ls(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Dy(e){if(typeof e=="function")return Ls(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Uu)return 11;if(e===ju)return 14}return 2}function Hn(e,t){var n=e.alternate;return n===null?(n=St(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ha(e,t,n,r,o,i){var a=2;if(r=e,typeof e=="function")Ls(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case Pr:return fr(n.children,o,i,t);case zu:a=8,o|=8;break;case Hu:return e=St(12,n,t,o|2),e.elementType=Hu,e.lanes=i,e;case Wu:return e=St(13,n,t,o),e.elementType=Wu,e.lanes=i,e;case Ku:return e=St(19,n,t,o),e.elementType=Ku,e.lanes=i,e;case Yc:return Ua(n,o,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Gc:a=10;break e;case Qc:a=9;break e;case Uu:a=11;break e;case ju:a=14;break e;case kn:a=16,r=null;break e}throw Error(T(130,e==null?e:typeof e,""))}return t=St(a,n,t,o),t.elementType=e,t.type=r,t.lanes=i,t}function fr(e,t,n,r){return e=St(7,e,r,t),e.lanes=n,e}function Ua(e,t,n,r){return e=St(22,e,r,t),e.elementType=Yc,e.lanes=n,e.stateNode={isHidden:!1},e}function Fs(e,t,n){return e=St(6,e,null,t),e.lanes=n,e}function Os(e,t,n){return t=St(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ny(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=cl(0),this.expirationTimes=cl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=cl(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function As(e,t,n,r,o,i,a,u,l){return e=new Ny(e,t,n,u,l),t===1?(t=1,i===!0&&(t|=8)):t=0,i=St(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},ql(i),e}function By(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Mr,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function Kp(e){if(!e)return Dn;e=e._reactInternals;e:{if(er(e)!==e||e.tag!==1)throw Error(T(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ge(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(T(171))}if(e.tag===1){var n=e.type;if(Ge(n))return hf(e,n,t)}return t}function jp(e,t,n,r,o,i,a,u,l){return e=As(n,r,!0,e,o,i,a,u,l),e.context=Kp(null),n=e.current,r=ze(),o=An(n),i=un(r,o),i.callback=t!=null?t:null,Rn(n,i,o),e.current.lanes=o,Bo(e,o,r),Xe(e,r),e}function Wa(e,t,n,r){var o=t.current,i=ze(),a=An(o);return n=Kp(n),t.context===null?t.context=n:t.pendingContext=n,t=un(i,a),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=Rn(o,t,a),e!==null&&(Ft(e,o,a,i),ya(e,o,a)),a}function Ka(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Vp(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function zs(e,t){Vp(e,t),(e=e.alternate)&&Vp(e,t)}function Ry(){return null}var $p=typeof reportError=="function"?reportError:function(e){console.error(e)};function Hs(e){this._internalRoot=e}ja.prototype.render=Hs.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(T(409));Wa(e,t,null,null)},ja.prototype.unmount=Hs.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;sr(function(){Wa(null,e,null,null)}),t[tn]=null}};function ja(e){this._internalRoot=e}ja.prototype.unstable_scheduleHydration=function(e){if(e){var t=Td();e={blockedOn:null,target:e,priority:t};for(var n=0;n<In.length&&t!==0&&t<In[n].priority;n++);In.splice(n,0,e),n===0&&Pd(e)}};function Us(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Va(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Gp(){}function Ly(e,t,n,r,o){if(o){if(typeof r=="function"){var i=r;r=function(){var s=Ka(a);i.call(s)}}var a=jp(t,r,e,0,null,!1,!1,"",Gp);return e._reactRootContainer=a,e[tn]=a.current,Go(e.nodeType===8?e.parentNode:e),sr(),a}for(;o=e.lastChild;)e.removeChild(o);if(typeof r=="function"){var u=r;r=function(){var s=Ka(l);u.call(s)}}var l=As(e,0,!1,null,null,!1,!1,"",Gp);return e._reactRootContainer=l,e[tn]=l.current,Go(e.nodeType===8?e.parentNode:e),sr(function(){Wa(t,l,n,r)}),l}function $a(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if(typeof o=="function"){var u=o;o=function(){var l=Ka(a);u.call(l)}}Wa(t,a,e,o)}else a=Ly(n,t,e,o,r);return Ka(a)}wd=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=No(t.pendingLanes);n!==0&&(dl(t,n|1),Xe(t,ve()),(K&6)===0&&(eo=ve()+500,Nn()))}break;case 13:sr(function(){var r=an(e,1);if(r!==null){var o=ze();Ft(r,e,1,o)}}),zs(e,1)}},fl=function(e){if(e.tag===13){var t=an(e,134217728);if(t!==null){var n=ze();Ft(t,e,134217728,n)}zs(e,134217728)}},Id=function(e){if(e.tag===13){var t=An(e),n=an(e,t);if(n!==null){var r=ze();Ft(n,e,t,r)}zs(e,t)}},Td=function(){return V},bd=function(e,t){var n=V;try{return V=e,t()}finally{V=n}},ol=function(e,t,n){switch(t){case"input":if(Xu(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=sa(r);if(!o)throw Error(T(90));Zc(r),Xu(r,o)}}}break;case"textarea":rd(e,n);break;case"select":t=n.value,t!=null&&Dr(e,!!n.multiple,t,!1)}},fd=Ns,pd=sr;var Fy={usingClientEntryPoint:!1,Events:[Xo,Ur,sa,cd,dd,Ns]},ci={findFiberByHostInstance:tr,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},Oy={bundleType:ci.bundleType,version:ci.version,rendererPackageName:ci.rendererPackageName,rendererConfig:ci.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:en.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=gd(e),e===null?null:e.stateNode},findFiberByHostInstance:ci.findFiberByHostInstance||Ry,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Ga=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ga.isDisabled&&Ga.supportsFiber)try{ji=Ga.inject(Oy),Ut=Ga}catch{}}ot.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Fy,ot.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Us(t))throw Error(T(200));return By(e,t,null,n)},ot.createRoot=function(e,t){if(!Us(e))throw Error(T(299));var n=!1,r="",o=$p;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=As(e,1,!1,null,null,n,!1,r,o),e[tn]=t.current,Go(e.nodeType===8?e.parentNode:e),new Hs(t)},ot.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(T(188)):(e=Object.keys(e).join(","),Error(T(268,e)));return e=gd(t),e=e===null?null:e.stateNode,e},ot.flushSync=function(e){return sr(e)},ot.hydrate=function(e,t,n){if(!Va(t))throw Error(T(200));return $a(null,e,t,!0,n)},ot.hydrateRoot=function(e,t,n){if(!Us(e))throw Error(T(405));var r=n!=null&&n.hydratedSources||null,o=!1,i="",a=$p;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),t=jp(t,null,e,1,n!=null?n:null,o,!1,i,a),e[tn]=t.current,Go(e),r)for(e=0;e<r.length;e++)n=r[e],o=n._getVersion,o=o(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new ja(t)},ot.render=function(e,t,n){if(!Va(t))throw Error(T(200));return $a(null,e,t,!1,n)},ot.unmountComponentAtNode=function(e){if(!Va(e))throw Error(T(40));return e._reactRootContainer?(sr(function(){$a(null,null,e,!1,function(){e._reactRootContainer=null,e[tn]=null})}),!0):!1},ot.unstable_batchedUpdates=Ns,ot.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Va(n))throw Error(T(200));if(e==null||e._reactInternals===void 0)throw Error(T(38));return $a(e,t,n,!1,r)},ot.version="18.2.0-next-9e3b772b8-20220608",function(e){function t(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(n){console.error(n)}}t(),e.exports=ot}(Ru);var Qp,Yp=Ru.exports;Qp=Yp.createRoot,Yp.hydrateRoot;var Xp={},Qa=void 0;try{Qa=window}catch{}function qp(e,t){if(typeof Qa<"u"){var n=Qa.__packages__=Qa.__packages__||{};if(!n[e]||!Xp[e]){Xp[e]=t;var r=n[e]=n[e]||[];r.push(t)}}}qp("@fluentui/set-version","6.0.0");var Ws=function(e,t){return Ws=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(n[o]=r[o])},Ws(e,t)};function ct(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");Ws(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}var x=function(){return x=Object.assign||function(t){for(var n,r=1,o=arguments.length;r<o;r++){n=arguments[r];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},x.apply(this,arguments)};function no(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]]);return n}function Zp(e,t,n,r){var o=arguments.length,i=o<3?t:r===null?r=Object.getOwnPropertyDescriptor(t,n):r,a;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")i=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(a=e[u])&&(i=(o<3?a(i):o>3?a(t,n,i):a(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}function cn(e,t,n){if(n||arguments.length===2)for(var r=0,o=t.length,i;r<o;r++)(i||!(r in t))&&(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}var di={none:0,insertNode:1,appendChild:2},Jp="__stylesheet__",Ay=typeof navigator<"u"&&/rv:11.0/.test(navigator.userAgent),ro={};try{ro=window||{}}catch{}var oo,wt=function(){function e(t,n){var r,o,i,a,u,l;this._rules=[],this._preservedRules=[],this._counter=0,this._keyToClassName={},this._onInsertRuleCallbacks=[],this._onResetCallbacks=[],this._classNameToArgs={},this._config=x({injectionMode:typeof document>"u"?di.none:di.insertNode,defaultPrefix:"css",namespace:void 0,cspSettings:void 0},t),this._classNameToArgs=(r=n==null?void 0:n.classNameToArgs)!==null&&r!==void 0?r:this._classNameToArgs,this._counter=(o=n==null?void 0:n.counter)!==null&&o!==void 0?o:this._counter,this._keyToClassName=(a=(i=this._config.classNameCache)!==null&&i!==void 0?i:n==null?void 0:n.keyToClassName)!==null&&a!==void 0?a:this._keyToClassName,this._preservedRules=(u=n==null?void 0:n.preservedRules)!==null&&u!==void 0?u:this._preservedRules,this._rules=(l=n==null?void 0:n.rules)!==null&&l!==void 0?l:this._rules}return e.getInstance=function(){if(oo=ro[Jp],!oo||oo._lastStyleElement&&oo._lastStyleElement.ownerDocument!==document){var t=(ro==null?void 0:ro.FabricConfig)||{},n=new e(t.mergeStyles,t.serializedStylesheet);oo=n,ro[Jp]=n}return oo},e.prototype.serialize=function(){return JSON.stringify({classNameToArgs:this._classNameToArgs,counter:this._counter,keyToClassName:this._keyToClassName,preservedRules:this._preservedRules,rules:this._rules})},e.prototype.setConfig=function(t){this._config=x(x({},this._config),t)},e.prototype.onReset=function(t){var n=this;return this._onResetCallbacks.push(t),function(){n._onResetCallbacks=n._onResetCallbacks.filter(function(r){return r!==t})}},e.prototype.onInsertRule=function(t){var n=this;return this._onInsertRuleCallbacks.push(t),function(){n._onInsertRuleCallbacks=n._onInsertRuleCallbacks.filter(function(r){return r!==t})}},e.prototype.getClassName=function(t){var n=this._config.namespace,r=t||this._config.defaultPrefix;return(n?n+"-":"")+r+"-"+this._counter++},e.prototype.cacheClassName=function(t,n,r,o){this._keyToClassName[n]=t,this._classNameToArgs[t]={args:r,rules:o}},e.prototype.classNameFromKey=function(t){return this._keyToClassName[t]},e.prototype.getClassNameCache=function(){return this._keyToClassName},e.prototype.argsFromClassName=function(t){var n=this._classNameToArgs[t];return n&&n.args},e.prototype.insertedRulesFromClassName=function(t){var n=this._classNameToArgs[t];return n&&n.rules},e.prototype.insertRule=function(t,n){var r=this._config.injectionMode,o=r!==di.none?this._getStyleElement():void 0;if(n&&this._preservedRules.push(t),o)switch(r){case di.insertNode:var i=o.sheet;try{i.insertRule(t,i.cssRules.length)}catch{}break;case di.appendChild:o.appendChild(document.createTextNode(t));break}else this._rules.push(t);this._config.onInsertRule&&this._config.onInsertRule(t),this._onInsertRuleCallbacks.forEach(function(a){return a()})},e.prototype.getRules=function(t){return(t?this._preservedRules.join(""):"")+this._rules.join("")},e.prototype.reset=function(){this._rules=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach(function(t){return t()})},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var t=this;return!this._styleElement&&typeof document<"u"&&(this._styleElement=this._createStyleElement(),Ay||window.requestAnimationFrame(function(){t._styleElement=void 0})),this._styleElement},e.prototype._createStyleElement=function(){var t=document.head,n=document.createElement("style"),r=null;n.setAttribute("data-merge-styles","true");var o=this._config.cspSettings;if(o&&o.nonce&&n.setAttribute("nonce",o.nonce),this._lastStyleElement)r=this._lastStyleElement.nextElementSibling;else{var i=this._findPlaceholderStyleTag();i?r=i.nextElementSibling:r=t.childNodes[0]}return t.insertBefore(n,t.contains(r)?r:null),this._lastStyleElement=n,n},e.prototype._findPlaceholderStyleTag=function(){var t=document.head;return t?t.querySelector("style[data-merge-styles]"):null},e}();function ev(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],r=[],o=wt.getInstance();function i(a){for(var u=0,l=a;u<l.length;u++){var s=l[u];if(s)if(typeof s=="string")if(s.indexOf(" ")>=0)i(s.split(" "));else{var d=o.argsFromClassName(s);d?i(d):n.indexOf(s)===-1&&n.push(s)}else Array.isArray(s)?i(s):typeof s=="object"&&r.push(s)}}return i(e),{classes:n,objects:r}}function tv(e){io!==e&&(io=e)}function nv(){return io===void 0&&(io=typeof document<"u"&&!!document.documentElement&&document.documentElement.getAttribute("dir")==="rtl"),io}var io;io=nv();function Ya(){return{rtl:nv()}}var rv={};function zy(e,t){var n=e[t];n.charAt(0)!=="-"&&(e[t]=rv[n]=rv[n]||n.replace(/([A-Z])/g,"-$1").toLowerCase())}var Xa;function Hy(){var e;if(!Xa){var t=typeof document<"u"?document:void 0,n=typeof navigator<"u"?navigator:void 0,r=(e=n==null?void 0:n.userAgent)===null||e===void 0?void 0:e.toLowerCase();t?Xa={isWebkit:!!(t&&"WebkitAppearance"in t.documentElement.style),isMoz:!!(r&&r.indexOf("firefox")>-1),isOpera:!!(r&&r.indexOf("opera")>-1),isMs:!!(n&&(/rv:11.0/i.test(n.userAgent)||/Edge\/\d./i.test(navigator.userAgent)))}:Xa={isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return Xa}var ov={"user-select":1};function Uy(e,t){var n=Hy(),r=e[t];if(ov[r]){var o=e[t+1];ov[r]&&(n.isWebkit&&e.push("-webkit-"+r,o),n.isMoz&&e.push("-moz-"+r,o),n.isMs&&e.push("-ms-"+r,o),n.isOpera&&e.push("-o-"+r,o))}}var Wy=["column-count","font-weight","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function Ky(e,t){var n=e[t],r=e[t+1];if(typeof r=="number"){var o=Wy.indexOf(n)>-1,i=n.indexOf("--")>-1,a=o||i?"":"px";e[t+1]=""+r+a}}var qa,Un="left",Wn="right",jy="@noflip",iv=(qa={},qa[Un]=Wn,qa[Wn]=Un,qa),av={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"};function Vy(e,t,n){if(e.rtl){var r=t[n];if(!r)return;var o=t[n+1];if(typeof o=="string"&&o.indexOf(jy)>=0)t[n+1]=o.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(r.indexOf(Un)>=0)t[n]=r.replace(Un,Wn);else if(r.indexOf(Wn)>=0)t[n]=r.replace(Wn,Un);else if(String(o).indexOf(Un)>=0)t[n+1]=o.replace(Un,Wn);else if(String(o).indexOf(Wn)>=0)t[n+1]=o.replace(Wn,Un);else if(iv[r])t[n]=iv[r];else if(av[o])t[n+1]=av[o];else switch(r){case"margin":case"padding":t[n+1]=Gy(o);break;case"box-shadow":t[n+1]=$y(o,0);break}}}function $y(e,t){var n=e.split(" "),r=parseInt(n[t],10);return n[0]=n[0].replace(String(r),String(r*-1)),n.join(" ")}function Gy(e){if(typeof e=="string"){var t=e.split(" ");if(t.length===4)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}function Qy(e){for(var t=[],n=0,r=0,o=0;o<e.length;o++)switch(e[o]){case"(":r++;break;case")":r&&r--;break;case"	":case" ":r||(o>n&&t.push(e.substring(n,o)),n=o+1);break}return n<e.length&&t.push(e.substring(n)),t}var Yy="displayName";function Xy(e){var t=e&&e["&"];return t?t.displayName:void 0}var uv=/\:global\((.+?)\)/g;function qy(e){if(!uv.test(e))return e;for(var t=[],n=/\:global\((.+?)\)/g,r=null;r=n.exec(e);)r[1].indexOf(",")>-1&&t.push([r.index,r.index+r[0].length,r[1].split(",").map(function(o){return":global("+o.trim()+")"}).join(", ")]);return t.reverse().reduce(function(o,i){var a=i[0],u=i[1],l=i[2],s=o.slice(0,a),d=o.slice(u);return s+l+d},e)}function lv(e,t){return e.indexOf(":global(")>=0?e.replace(uv,"$1"):e.indexOf(":")===0?t+e:e.indexOf("&")<0?t+" "+e:e}function sv(e,t,n,r){t===void 0&&(t={__order:[]}),n.indexOf("@")===0?(n=n+"{"+e,ao([r],t,n)):n.indexOf(",")>-1?qy(n).split(",").map(function(o){return o.trim()}).forEach(function(o){return ao([r],t,lv(o,e))}):ao([r],t,lv(n,e))}function ao(e,t,n){t===void 0&&(t={__order:[]}),n===void 0&&(n="&");var r=wt.getInstance(),o=t[n];o||(o={},t[n]=o,t.__order.push(n));for(var i=0,a=e;i<a.length;i++){var u=a[i];if(typeof u=="string"){var l=r.argsFromClassName(u);l&&ao(l,t,n)}else if(Array.isArray(u))ao(u,t,n);else for(var s in u)if(u.hasOwnProperty(s)){var d=u[s];if(s==="selectors"){var c=u.selectors;for(var f in c)c.hasOwnProperty(f)&&sv(n,t,f,c[f])}else typeof d=="object"?d!==null&&sv(n,t,s,d):d!==void 0&&(s==="margin"||s==="padding"?Zy(o,s,d):o[s]=d)}}return t}function Zy(e,t,n){var r=typeof n=="string"?Qy(n):[n];r.length===0&&r.push(n),r[r.length-1]==="!important"&&(r=r.slice(0,-1).map(function(o){return o+" !important"})),e[t+"Top"]=r[0],e[t+"Right"]=r[1]||r[0],e[t+"Bottom"]=r[2]||r[0],e[t+"Left"]=r[3]||r[1]||r[0]}function Jy(e,t){for(var n=[e.rtl?"rtl":"ltr"],r=!1,o=0,i=t.__order;o<i.length;o++){var a=i[o];n.push(a);var u=t[a];for(var l in u)u.hasOwnProperty(l)&&u[l]!==void 0&&(r=!0,n.push(l,u[l]))}return r?n.join(""):void 0}function cv(e,t){return t<=0?"":t===1?e:e+cv(e,t-1)}function Ks(e,t){if(!t)return"";var n=[];for(var r in t)t.hasOwnProperty(r)&&r!==Yy&&t[r]!==void 0&&n.push(r,t[r]);for(var o=0;o<n.length;o+=2)zy(n,o),Ky(n,o),Vy(e,n,o),Uy(n,o);for(var o=1;o<n.length;o+=4)n.splice(o,1,":",n[o],";");return n.join("")}function dv(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=ao(t),o=Jy(e,r);if(o){var i=wt.getInstance(),a={className:i.classNameFromKey(o),key:o,args:t};if(!a.className){a.className=i.getClassName(Xy(r));for(var u=[],l=0,s=r.__order;l<s.length;l++){var d=s[l];u.push(d,Ks(e,r[d]))}a.rulesToInsert=u}return a}}function fv(e,t){t===void 0&&(t=1);var n=wt.getInstance(),r=e.className,o=e.key,i=e.args,a=e.rulesToInsert;if(a){for(var u=0;u<a.length;u+=2){var l=a[u+1];if(l){var s=a[u];s=s.replace(/&/g,cv("."+e.className,t));var d=s+"{"+l+"}"+(s.indexOf("@")===0?"}":"");n.insertRule(d)}}n.cacheClassName(r,o,i,a)}}function e0(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=dv.apply(void 0,cn([e],t));return r?(fv(r,e.specificityMultiplier),r.className):""}function dn(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return t0(e,Ya())}function t0(e,t){var n=e instanceof Array?e:[e],r=ev(n),o=r.classes,i=r.objects;return i.length&&o.push(e0(t||{},i)),o.join(" ")}function pr(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e&&e.length===1&&e[0]&&!e[0].subComponentStyles)return e[0];for(var n={},r={},o=0,i=e;o<i.length;o++){var a=i[o];if(a){for(var u in a)if(a.hasOwnProperty(u)){if(u==="subComponentStyles"&&a.subComponentStyles!==void 0){var l=a.subComponentStyles;for(var s in l)l.hasOwnProperty(s)&&(r.hasOwnProperty(s)?r[s].push(l[s]):r[s]=[l[s]]);continue}var d=n[u],c=a[u];d===void 0?n[u]=c:n[u]=cn(cn([],Array.isArray(d)?d:[d]),Array.isArray(c)?c:[c])}}}if(Object.keys(r).length>0){n.subComponentStyles={};var f=n.subComponentStyles,m=function(y){if(r.hasOwnProperty(y)){var C=r[y];f[y]=function(E){return pr.apply(void 0,C.map(function(v){return typeof v=="function"?v(E):v}))}}};for(var s in r)m(s)}return n}function fi(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return pv(e,Ya())}function pv(e,t){var n={subComponentStyles:{}},r=e[0];if(!r&&e.length<=1)return{subComponentStyles:{}};var o=pr.apply(void 0,e),i=[];for(var a in o)if(o.hasOwnProperty(a)){if(a==="subComponentStyles"){n.subComponentStyles=o.subComponentStyles||{};continue}var u=o[a],l=ev(u),s=l.classes,d=l.objects;if(d!=null&&d.length){var c=dv(t||{},{displayName:a},d);c&&(i.push(c),n[a]=s.concat([c.className]).join(" "))}else n[a]=s.join(" ")}for(var f=0,m=i;f<m.length;f++){var c=m[f];c&&fv(c,t==null?void 0:t.specificityMultiplier)}return n}function vv(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=[],o=0,i=t;o<i.length;o++){var a=i[o];a&&r.push(typeof a=="function"?a(e):a)}return r.length===1?r[0]:r.length?pr.apply(void 0,r):{}}function mv(e){var t=wt.getInstance(),n=Ks(Ya(),e),r=t.classNameFromKey(n);if(!r){var o=t.getClassName();t.insertRule("@font-face{"+n+"}",!0),t.cacheClassName(o,n,[],["font-face",n])}}function It(e){var t=wt.getInstance(),n=[];for(var r in e)e.hasOwnProperty(r)&&n.push(r,"{",Ks(Ya(),e[r]),"}");var o=n.join(""),i=t.classNameFromKey(o);if(i)return i;var a=t.getClassName();return t.insertRule("@keyframes "+a+"{"+o+"}",!0),t.cacheClassName(a,o,[],["keyframes",o]),a}function n0(e){var t={},n=function(o){if(e.hasOwnProperty(o)){var i;Object.defineProperty(t,o,{get:function(){return i===void 0&&(i=dn(e[o]).toString()),i},enumerable:!0,configurable:!0})}};for(var r in e)n(r);return t}function js(){return typeof window<"u"&&!!(window.document&&window.document.createElement)}var Vs=void 0;try{Vs=window}catch{}function he(e){if(!(!js()||typeof Vs>"u")){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:Vs}}var Za=function(){function e(t,n){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=t||null,this._onErrorHandler=n,this._noop=function(){}}return e.prototype.dispose=function(){var t;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(t in this._timeoutIds)this._timeoutIds.hasOwnProperty(t)&&this.clearTimeout(parseInt(t,10));this._timeoutIds=null}if(this._immediateIds){for(t in this._immediateIds)this._immediateIds.hasOwnProperty(t)&&this.clearImmediate(parseInt(t,10));this._immediateIds=null}if(this._intervalIds){for(t in this._intervalIds)this._intervalIds.hasOwnProperty(t)&&this.clearInterval(parseInt(t,10));this._intervalIds=null}if(this._animationFrameIds){for(t in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(t)&&this.cancelAnimationFrame(parseInt(t,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(t,n){var r=this,o=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),o=setTimeout(function(){try{r._timeoutIds&&delete r._timeoutIds[o],t.apply(r._parent)}catch(i){r._logError(i)}},n),this._timeoutIds[o]=!0),o},e.prototype.clearTimeout=function(t){this._timeoutIds&&this._timeoutIds[t]&&(clearTimeout(t),delete this._timeoutIds[t])},e.prototype.setImmediate=function(t,n){var r=this,o=0,i=he(n);if(!this._isDisposed){this._immediateIds||(this._immediateIds={});var a=function(){try{r._immediateIds&&delete r._immediateIds[o],t.apply(r._parent)}catch(u){r._logError(u)}};o=i.setTimeout(a,0),this._immediateIds[o]=!0}return o},e.prototype.clearImmediate=function(t,n){var r=he(n);this._immediateIds&&this._immediateIds[t]&&(r.clearTimeout(t),delete this._immediateIds[t])},e.prototype.setInterval=function(t,n){var r=this,o=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),o=setInterval(function(){try{t.apply(r._parent)}catch(i){r._logError(i)}},n),this._intervalIds[o]=!0),o},e.prototype.clearInterval=function(t){this._intervalIds&&this._intervalIds[t]&&(clearInterval(t),delete this._intervalIds[t])},e.prototype.throttle=function(t,n,r){var o=this;if(this._isDisposed)return this._noop;var i=n||0,a=!0,u=!0,l=0,s,d,c=null;r&&typeof r.leading=="boolean"&&(a=r.leading),r&&typeof r.trailing=="boolean"&&(u=r.trailing);var f=function(y){var C=Date.now(),E=C-l,v=a?i-E:i;return E>=i&&(!y||a)?(l=C,c&&(o.clearTimeout(c),c=null),s=t.apply(o._parent,d)):c===null&&u&&(c=o.setTimeout(f,v)),s},m=function(){for(var y=[],C=0;C<arguments.length;C++)y[C]=arguments[C];return d=y,f(!0)};return m},e.prototype.debounce=function(t,n,r){var o=this;if(this._isDisposed){var i=function(){};return i.cancel=function(){},i.flush=function(){return null},i.pending=function(){return!1},i}var a=n||0,u=!1,l=!0,s=null,d=0,c=Date.now(),f,m,y=null;r&&typeof r.leading=="boolean"&&(u=r.leading),r&&typeof r.trailing=="boolean"&&(l=r.trailing),r&&typeof r.maxWait=="number"&&!isNaN(r.maxWait)&&(s=r.maxWait);var C=function(w){y&&(o.clearTimeout(y),y=null),c=w},E=function(w){C(w),f=t.apply(o._parent,m)},v=function(w){var k=Date.now(),I=!1;w&&(u&&k-d>=a&&(I=!0),d=k);var b=k-d,D=a-b,j=k-c,U=!1;return s!==null&&(j>=s&&y?U=!0:D=Math.min(D,s-j)),b>=a||U||I?E(k):(y===null||!w)&&l&&(y=o.setTimeout(v,D)),f},p=function(){return!!y},h=function(){p()&&C(Date.now())},_=function(){return p()&&E(Date.now()),f},S=function(){for(var w=[],k=0;k<arguments.length;k++)w[k]=arguments[k];return m=w,v(!0)};return S.cancel=h,S.flush=_,S.pending=p,S},e.prototype.requestAnimationFrame=function(t,n){var r=this,o=0,i=he(n);if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var a=function(){try{r._animationFrameIds&&delete r._animationFrameIds[o],t.apply(r._parent)}catch(u){r._logError(u)}};o=i.requestAnimationFrame?i.requestAnimationFrame(a):i.setTimeout(a,0),this._animationFrameIds[o]=!0}return o},e.prototype.cancelAnimationFrame=function(t,n){var r=he(n);this._animationFrameIds&&this._animationFrameIds[t]&&(r.cancelAnimationFrame?r.cancelAnimationFrame(t):r.clearTimeout(t),delete this._animationFrameIds[t])},e.prototype._logError=function(t){this._onErrorHandler&&this._onErrorHandler(t)},e}();function $s(e,t){if(!e||!t)return!e&&!t;for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(var n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}function vr(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return r0.apply(this,[null,e].concat(t))}function r0(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];t=t||{};for(var o=0,i=n;o<i.length;o++){var a=i[o];if(a)for(var u in a)a.hasOwnProperty(u)&&(!e||e(u))&&(t[u]=a[u])}return t}var fn=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,r,o){var i;if(e._isElement(t)){if(typeof document<"u"&&document.createEvent){var a=document.createEvent("HTMLEvents");a.initEvent(n,o||!1,!0),vr(a,r),i=t.dispatchEvent(a)}else if(typeof document<"u"&&document.createEventObject){var u=document.createEventObject(r);t.fireEvent("on"+n,u)}}else for(;t&&i!==!1;){var l=t.__events__,s=l?l[n]:null;if(s){for(var d in s)if(s.hasOwnProperty(d))for(var c=s[d],f=0;i!==!1&&f<c.length;f++){var m=c[f];m.objectCallback&&(i=m.objectCallback.call(m.parent,r))}}t=o?t.parent:null}return i},e.isObserved=function(t,n){var r=t&&t.__events__;return!!r&&!!r[n]},e.isDeclared=function(t,n){var r=t&&t.__declaredEvents;return!!r&&!!r[n]},e.stopPropagation=function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},e._isElement=function(t){return!!t&&(!!t.addEventListener||typeof HTMLElement<"u"&&t instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(t,n,r){for(var o in n)n.hasOwnProperty(o)&&this.on(t,o,n[o],r)},e.prototype.on=function(t,n,r,o){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),u=0;u<a.length;u++)this.on(t,a[u],r,o);else{var l=this._parent,s={target:t,eventName:n,parent:l,callback:r,options:o},a=t.__events__=t.__events__||{};if(a[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(s),a[n].count++,e._isElement(t)){var d=function(){for(var m=[],y=0;y<arguments.length;y++)m[y]=arguments[y];if(!i._isDisposed){var C;try{if(C=r.apply(l,m),C===!1&&m[0]){var E=m[0];E.preventDefault&&E.preventDefault(),E.stopPropagation&&E.stopPropagation(),E.cancelBubble=!0}}catch{}return C}};s.elementCallback=d,t.addEventListener?t.addEventListener(n,d,o):t.attachEvent&&t.attachEvent("on"+n,d)}else{var c=function(){for(var m=[],y=0;y<arguments.length;y++)m[y]=arguments[y];if(!i._isDisposed)return r.apply(l,m)};s.objectCallback=c}this._eventRecords.push(s)}},e.prototype.off=function(t,n,r,o){for(var i=0;i<this._eventRecords.length;i++){var a=this._eventRecords[i];if((!t||t===a.target)&&(!n||n===a.eventName)&&(!r||r===a.callback)&&(typeof o!="boolean"||o===a.options)){var u=a.target.__events__,l=u[a.eventName],s=l?l[this._id]:null;s&&(s.length===1||!r?(l.count-=s.length,delete u[a.eventName][this._id]):(l.count--,s.splice(s.indexOf(a),1)),l.count||delete u[a.eventName]),a.elementCallback&&(a.target.removeEventListener?a.target.removeEventListener(a.eventName,a.elementCallback,a.options):a.target.detachEvent&&a.target.detachEvent("on"+a.eventName,a.elementCallback)),this._eventRecords.splice(i--,1)}}},e.prototype.raise=function(t,n,r){return e.raise(this._parent,t,n,r)},e.prototype.declare=function(t){var n=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if(typeof t=="string")n[t]=!0;else for(var r=0;r<t.length;r++)n[t[r]]=!0},e._uniqueId=0,e}();function dt(e){if(!(!js()||typeof document>"u")){var t=e;return t&&t.ownerDocument?t.ownerDocument:document}}var Gs;dn({overflow:"hidden !important"});var hv="data-is-scrollable";function o0(){if(Gs===void 0){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),Gs=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return Gs}function i0(e){for(var t=e,n=dt(e);t&&t!==n.body;){if(t.getAttribute(hv)==="true")return t;t=t.parentElement}for(t=e;t&&t!==n.body;){if(t.getAttribute(hv)!=="false"){var r=getComputedStyle(t),o=r?r.getPropertyValue("overflow-y"):"";if(o&&(o==="scroll"||o==="auto"))return t}t=t.parentElement}return(!t||t===n.body)&&(t=he(e)),t}var a0=void 0;function u0(e){console&&console.warn&&console.warn(e)}function gv(e,t,n,r,o){if(o===!0&&!1)for(var i,a;i<a.length;i++)var u}function UE(e,t,n){}function WE(e,t,n){}(function(e){ct(t,e);function t(n,r){var o=e.call(this,n,r)||this;return l0(o,t.prototype,["componentDidMount","shouldComponentUpdate","getSnapshotBeforeUpdate","render","componentDidUpdate","componentWillUnmount"]),o}return t.prototype.componentDidUpdate=function(n,r){this._updateComponentRef(n,this.props)},t.prototype.componentDidMount=function(){this._setComponentRef(this.props.componentRef,this)},t.prototype.componentWillUnmount=function(){if(this._setComponentRef(this.props.componentRef,null),this.__disposables){for(var n=0,r=this._disposables.length;n<r;n++){var o=this.__disposables[n];o.dispose&&o.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var n=/function (.{1,})\(/,r=n.exec(this.constructor.toString());this.__className=r&&r.length>1?r[1]:""}return this.__className},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new Za(this),this._disposables.push(this.__async)),this.__async},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new fn(this),this._disposables.push(this.__events)),this.__events},enumerable:!1,configurable:!0}),t.prototype._resolveRef=function(n){var r=this;return this.__resolves||(this.__resolves={}),this.__resolves[n]||(this.__resolves[n]=function(o){return r[n]=o}),this.__resolves[n]},t.prototype._updateComponentRef=function(n,r){r===void 0&&(r={}),n&&r&&n.componentRef!==r.componentRef&&(this._setComponentRef(n.componentRef,null),this._setComponentRef(r.componentRef,this))},t.prototype._warnDeprecations=function(n){this.className,this.props},t.prototype._warnMutuallyExclusive=function(n){this.className,this.props},t.prototype._warnConditionallyRequiredProps=function(n,r,o){gv(this.className,this.props,n,r,o)},t.prototype._setComponentRef=function(n,r){!this._skipComponentRefResolution&&n&&(typeof n=="function"&&n(r),typeof n=="object"&&(n.current=r))},t})(g.exports.Component);function l0(e,t,n){for(var r=0,o=n.length;r<o;r++)s0(e,t,n[r])}function s0(e,t,n){var r=e[n],o=t[n];(r||o)&&(e[n]=function(){for(var i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var u;return o&&(u=o.apply(this,i)),r!==o&&(u=r.apply(this,i)),u})}function Qs(){return null}var Ys="__globalSettings__",Xs="__callbacks__",c0=0,yv=function(){function e(){}return e.getValue=function(t,n){var r=qs();return r[t]===void 0&&(r[t]=typeof n=="function"?n():n),r[t]},e.setValue=function(t,n){var r=qs(),o=r[Xs],i=r[t];if(n!==i){r[t]=n;var a={oldValue:i,value:n,key:t};for(var u in o)o.hasOwnProperty(u)&&o[u](a)}return n},e.addChangeListener=function(t){var n=t.__id__,r=_v();n||(n=t.__id__=String(c0++)),r[n]=t},e.removeChangeListener=function(t){var n=_v();delete n[t.__id__]},e}();function qs(){var e,t=he(),n=t||{};return n[Ys]||(n[Ys]=(e={},e[Xs]={},e)),n[Ys]}function _v(){var e=qs();return e[Xs]}var F={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pauseBreak:19,capslock:20,escape:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,del:46,zero:48,one:49,two:50,three:51,four:52,five:53,six:54,seven:55,eight:56,nine:57,colon:58,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftWindow:91,rightWindow:92,select:93,zero_numpad:96,one_numpad:97,two_numpad:98,three_numpad:99,four_numpad:100,five_numpad:101,six_numpad:102,seven_numpad:103,eight_numpad:104,nine_numpad:105,multiply:106,add:107,subtract:109,decimalPoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrollLock:145,semicolon:186,equalSign:187,comma:188,dash:189,period:190,forwardSlash:191,graveAccent:192,openBracket:219,backSlash:220,closeBracket:221,singleQuote:222},$t=function(){function e(t,n,r,o){t===void 0&&(t=0),n===void 0&&(n=0),r===void 0&&(r=0),o===void 0&&(o=0),this.top=r,this.bottom=o,this.left=t,this.right=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!1,configurable:!0}),e.prototype.equals=function(t){return parseFloat(this.top.toFixed(4))===parseFloat(t.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(t.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(t.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(t.right.toFixed(4))},e}();function d0(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.length<2?t[0]:function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t.forEach(function(i){return i&&i.apply(e,r)})}}function pi(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter(function(r){return r}).join(" ").trim();return n===""?void 0:n}function f0(e,t,n){var r=e.slice();return r.splice(t,0,n),r}function p0(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function Cv(e){var t=null;try{var n=he();t=n?n.sessionStorage.getItem(e):null}catch{}return t}function v0(e,t){var n;try{(n=he())===null||n===void 0||n.sessionStorage.setItem(e,t)}catch{}}var kv="isRTL",pn;function qe(e){if(e===void 0&&(e={}),e.rtl!==void 0)return e.rtl;if(pn===void 0){var t=Cv(kv);t!==null&&(pn=t==="1",m0(pn));var n=dt();pn===void 0&&n&&(pn=(n.body&&n.body.getAttribute("dir")||n.documentElement.getAttribute("dir"))==="rtl",tv(pn))}return!!pn}function m0(e,t){t===void 0&&(t=!1);var n=dt();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr"),t&&v0(kv,e?"1":"0"),pn=e,tv(pn)}function h0(e){return e&&!!e._virtual}function g0(e){var t;return e&&h0(e)&&(t=e._virtual.parent),t}function Gt(e,t){return t===void 0&&(t=!0),e&&(t&&g0(e)||e.parentNode&&e.parentNode)}function Kn(e,t,n){n===void 0&&(n=!0);var r=!1;if(e&&t)if(n)if(e===t)r=!0;else for(r=!1;t;){var o=Gt(t);if(o===e){r=!0;break}t=o}else e.contains&&(r=e.contains(t));return r}function Zs(e,t){return!e||e===document.body?null:t(e)?e:Zs(Gt(e),t)}function y0(e,t){var n=Zs(e,function(r){return r.hasAttribute(t)});return n&&n.getAttribute(t)}var Js="data-portal-element";function _0(e){e.setAttribute(Js,"true")}function Ev(e,t){var n=Zs(e,function(r){return t===r||r.hasAttribute(Js)});return n!==null&&n.hasAttribute(Js)}function C0(e,t){var n=e,r=t;n._virtual||(n._virtual={children:[]});var o=n._virtual.parent;if(o&&o!==t){var i=o._virtual.children.indexOf(n);i>-1&&o._virtual.children.splice(i,1)}n._virtual.parent=r||void 0,r&&(r._virtual||(r._virtual={children:[]}),r._virtual.children.push(n))}var k0="data-is-focusable",E0="data-is-visible",x0="data-focuszone-id",S0="data-is-sub-focuszone";function w0(e,t,n){return pt(e,t,!0,!1,!1,n)}function I0(e,t,n){return ft(e,t,!0,!1,!0,n)}function T0(e,t){var n=pt(e,e,!0,!1,!1,!0,void 0,void 0,t);return n?(M0(n),!0):!1}function ft(e,t,n,r,o,i,a,u){if(!t||!a&&t===e)return null;var l=Ja(t);if(o&&l&&(i||!(vn(t)||ec(t)))){var s=ft(e,t.lastElementChild,!0,!0,!0,i,a,u);if(s){if(u&&Qt(s,!0)||!u)return s;var d=ft(e,s.previousElementSibling,!0,!0,!0,i,a,u);if(d)return d;for(var c=s.parentElement;c&&c!==t;){var f=ft(e,c.previousElementSibling,!0,!0,!0,i,a,u);if(f)return f;c=c.parentElement}}}if(n&&l&&Qt(t,u))return t;var m=ft(e,t.previousElementSibling,!0,!0,!0,i,a,u);return m||(r?null:ft(e,t.parentElement,!0,!1,!1,i,a,u))}function pt(e,t,n,r,o,i,a,u,l){if(!t||t===e&&o&&!a)return null;var s=l?xv:Ja,d=s(t);if(n&&d&&Qt(t,u))return t;if(!o&&d&&(i||!(vn(t)||ec(t)))){var c=pt(e,t.firstElementChild,!0,!0,!1,i,a,u,l);if(c)return c}if(t===e)return null;var f=pt(e,t.nextElementSibling,!0,!0,!1,i,a,u,l);return f||(r?null:pt(e,t.parentElement,!1,!1,!0,i,a,u,l))}function Ja(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute(E0);return t!=null?t==="true":e.offsetHeight!==0||e.offsetParent!==null||e.isVisible===!0}function xv(e){return!!e&&Ja(e)&&!e.hidden&&window.getComputedStyle(e).visibility!=="hidden"}function Qt(e,t){if(!e||e.disabled)return!1;var n=0,r=null;e&&e.getAttribute&&(r=e.getAttribute("tabIndex"),r&&(n=parseInt(r,10)));var o=e.getAttribute?e.getAttribute(k0):null,i=r!==null&&n>=0,a=!!e&&o!=="false"&&(e.tagName==="A"||e.tagName==="BUTTON"||e.tagName==="INPUT"||e.tagName==="TEXTAREA"||e.tagName==="SELECT"||o==="true"||i);return t?n!==-1&&a:a}function vn(e){return!!(e&&e.getAttribute&&!!e.getAttribute(x0))}function ec(e){return!!(e&&e.getAttribute&&e.getAttribute(S0)==="true")}function b0(e){var t=dt(e),n=t&&t.activeElement;return!!(n&&Kn(e,n))}function Sv(e,t){return y0(e,t)!=="true"}var uo=void 0;function M0(e){if(e){if(uo){uo=e;return}uo=e;var t=he(e);t&&t.requestAnimationFrame(function(){uo&&uo.focus(),uo=void 0})}}function P0(e,t){for(var n=e,r=0,o=t;r<o.length;r++){var i=o[r],a=n.children[Math.min(i,n.children.length-1)];if(!a)break;n=a}return n=Qt(n)&&Ja(n)?n:pt(e,n,!0)||ft(e,n),n}function D0(e,t){for(var n=[];t&&e&&t!==e;){var r=Gt(t,!0);if(r===null)return[];n.unshift(Array.prototype.indexOf.call(r.children,t)),t=r}return n}function lo(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}var N0=50,B0=5,eu=0,tc=wt.getInstance();tc&&tc.onReset&&tc.onReset(function(){return eu++});var tu="__retval__";function jn(e){e===void 0&&(e={});var t=new Map,n=0,r=0,o=eu,i=function(a,u){var l;if(u===void 0&&(u={}),e.useStaticStyles&&typeof a=="function"&&a.__noStyleOverride__)return a(u);r++;var s=t,d=u.theme,c=d&&d.rtl!==void 0?d.rtl:qe(),f=e.disableCaching;if(o!==eu&&(o=eu,t=new Map,n=0),e.disableCaching||(s=wv(t,a),s=wv(s,u)),(f||!s[tu])&&(a===void 0?s[tu]={}:s[tu]=pv([typeof a=="function"?a(u):a],{rtl:!!c,specificityMultiplier:e.useStaticStyles?B0:void 0}),f||n++),n>(e.cacheSize||N0)){var m=he();!((l=m==null?void 0:m.FabricConfig)===null||l===void 0)&&l.enableClassNameCacheFullWarning&&(console.warn("Styles are being recalculated too frequently. Cache miss rate is "+n+"/"+r+"."),console.trace()),t.clear(),n=0,e.disableCaching=!0}return s[tu]};return i}function nc(e,t){return t=R0(t),e.has(t)||e.set(t,new Map),e.get(t)}function wv(e,t){if(typeof t=="function"){var n=t.__cachedInputs__;if(n)for(var r=0,o=t.__cachedInputs__;r<o.length;r++){var i=o[r];e=nc(e,i)}else e=nc(e,t)}else if(typeof t=="object")for(var a in t)t.hasOwnProperty(a)&&(e=nc(e,t[a]));return e}function R0(e){switch(e){case void 0:return"__undefined__";case null:return"__null__";default:return e}}var Iv=!1,nu=0,L0={empty:!0},rc={},vi=typeof WeakMap>"u"?null:WeakMap;function F0(){nu++}function xe(e,t,n){if(t===void 0&&(t=100),n===void 0&&(n=!1),!vi)return e;if(!Iv){var r=wt.getInstance();r&&r.onReset&&wt.getInstance().onReset(F0),Iv=!0}var o,i=0,a=nu;return function(){for(var l=[],s=0;s<arguments.length;s++)l[s]=arguments[s];var d=o;(o===void 0||a!==nu||t>0&&i>t)&&(o=Tv(),i=0,a=nu),d=o;for(var c=0;c<l.length;c++){var f=O0(l[c]);d.map.has(f)||d.map.set(f,Tv()),d=d.map.get(f)}return d.hasOwnProperty("value")||(d.value=e.apply(void 0,l),i++),n&&(d.value===null||d.value===void 0)&&(d.value=e.apply(void 0,l)),d.value}}function so(e){if(!vi)return e;var t=new vi;function n(r){if(!r||typeof r!="function"&&typeof r!="object")return e(r);if(t.has(r))return t.get(r);var o=e(r);return t.set(r,o),o}return n}function O0(e){if(e){if(typeof e=="object"||typeof e=="function")return e;rc[e]||(rc[e]={val:e})}else return L0;return rc[e]}function Tv(){return{map:vi?new vi:null}}function A0(e){var t=e,n=so(function(r){if(e===r)throw new Error("Attempted to compose a component with itself.");var o=r,i=so(function(u){var l=function(s){return g.exports.createElement(o,x({},s,{defaultRender:u}))};return l}),a=function(u){var l=u.defaultRender;return g.exports.createElement(t,x({},u,{defaultRender:l?i(l):o}))};return a});return n}var z0=so(A0);function H0(e,t){return z0(e)(t)}function Ot(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],r=0,o=e;r<o.length;r++){var i=o[r];if(i)if(typeof i=="string")n.push(i);else if(i.hasOwnProperty("toString")&&typeof i.toString=="function")n.push(i.toString());else for(var a in i)i[a]&&n.push(a)}return n.join(" ")}var U0="customizations",W0={settings:{},scopedSettings:{},inCustomizerContext:!1},Vn=yv.getValue(U0,{settings:{},scopedSettings:{},inCustomizerContext:!1}),ru=[],At=function(){function e(){}return e.reset=function(){Vn.settings={},Vn.scopedSettings={}},e.applySettings=function(t){Vn.settings=x(x({},Vn.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){Vn.scopedSettings[t]=x(x({},Vn.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(t,n,r){r===void 0&&(r=W0);for(var o={},i=n&&r.scopedSettings[n]||{},a=n&&Vn.scopedSettings[n]||{},u=0,l=t;u<l.length;u++){var s=l[u];o[s]=i[s]||r.settings[s]||a[s]||Vn.settings[s]}return o},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch{}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(t){ru.push(t)},e.unobserve=function(t){ru=ru.filter(function(n){return n!==t})},e._raiseChange=function(){e._suppressUpdates||ru.forEach(function(t){return t()})},e}(),ou=g.exports.createContext({customizations:{inCustomizerContext:!1,settings:{},scopedSettings:{}}});function K0(e,t){e===void 0&&(e={});var n=bv(t)?t:V0(t);return n(e)}function j0(e,t){e===void 0&&(e={});var n=bv(t)?t:$0(t);return n(e)}function bv(e){return typeof e=="function"}function V0(e){return function(t){return e?x(x({},t),e):t}}function $0(e){return e===void 0&&(e={}),function(t){var n=x({},t);for(var r in e)e.hasOwnProperty(r)&&(n[r]=x(x({},t[r]),e[r]));return n}}function G0(e,t){var n=(t||{}).customizations,r=n===void 0?{settings:{},scopedSettings:{}}:n;return{customizations:{settings:K0(r.settings,e.settings),scopedSettings:j0(r.scopedSettings,e.scopedSettings),inCustomizerContext:!0}}}var Q0=function(e){ct(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n._onCustomizationChange=function(){return n.forceUpdate()},n}return t.prototype.componentDidMount=function(){At.observe(this._onCustomizationChange)},t.prototype.componentWillUnmount=function(){At.unobserve(this._onCustomizationChange)},t.prototype.render=function(){var n=this,r=this.props.contextTransform;return g.exports.createElement(ou.Consumer,null,function(o){var i=G0(n.props,o);return r&&(i=r(i)),g.exports.createElement(ou.Provider,{value:i},n.props.children)})},t}(g.exports.Component);function Y0(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function Mv(e,t,n){return function(o){var i,a=(i=function(u){ct(l,u);function l(s){var d=u.call(this,s)||this;return d._styleCache={},d._onSettingChanged=d._onSettingChanged.bind(d),d}return l.prototype.componentDidMount=function(){At.observe(this._onSettingChanged)},l.prototype.componentWillUnmount=function(){At.unobserve(this._onSettingChanged)},l.prototype.render=function(){var s=this;return g.exports.createElement(ou.Consumer,null,function(d){var c=At.getSettings(t,e,d.customizations),f=s.props;if(c.styles&&typeof c.styles=="function"&&(c.styles=c.styles(x(x({},c),f))),n&&c.styles){if(s._styleCache.default!==c.styles||s._styleCache.component!==f.styles){var m=pr(c.styles,f.styles);s._styleCache.default=c.styles,s._styleCache.component=f.styles,s._styleCache.merged=m}return g.exports.createElement(o,x({},c,f,{styles:s._styleCache.merged}))}return g.exports.createElement(o,x({},c,f))})},l.prototype._onSettingChanged=function(){this.forceUpdate()},l}(g.exports.Component),i.displayName="Customized"+e,i);return Y0(o,a)}}function X0(e,t){var n=q0(),r=g.exports.useContext(ou).customizations,o=r.inCustomizerContext;return g.exports.useEffect(function(){return o||At.observe(n),function(){o||At.unobserve(n)}},[o]),At.getSettings(e,t,r)}function q0(){var e=g.exports.useState(0),t=e[1];return function(){return t(function(n){return++n})}}function Z0(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=d0(e,e[n],t[n]))}var iu="__currentId__",J0="id__",au=he()||{};au[iu]===void 0&&(au[iu]=0);var Pv=!1;function mn(e){if(!Pv){var t=wt.getInstance();t&&t.onReset&&t.onReset(e_),Pv=!0}var n=au[iu]++;return(e===void 0?J0:e)+n}function e_(e){e===void 0&&(e=0),au[iu]=e}var pe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},r=0,o=e;r<o.length;r++)for(var i=o[r],a=Array.isArray(i)?i:Object.keys(i),u=0,l=a;u<l.length;u++){var s=l[u];n[s]=1}return n},t_=pe(["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onPointerCancel","onPointerDown","onPointerEnter","onPointerLeave","onPointerMove","onPointerOut","onPointerOver","onPointerUp","onGotPointerCapture","onLostPointerCapture"]),n_=pe(["accessKey","children","className","contentEditable","dir","draggable","hidden","htmlFor","id","lang","ref","role","style","tabIndex","title","translate","spellCheck","name"]),ge=pe(n_,t_);pe(ge,["form"]);var r_=pe(ge,["height","loop","muted","preload","src","width"]);pe(r_,["poster"]),pe(ge,["start"]),pe(ge,["value"]);var Dv=pe(ge,["download","href","hrefLang","media","rel","target","type"]),mr=pe(ge,["autoFocus","disabled","form","formAction","formEncType","formMethod","formNoValidate","formTarget","type","value"]);pe(mr,["accept","alt","autoCapitalize","autoComplete","checked","dirname","form","height","inputMode","list","max","maxLength","min","minLength","multiple","pattern","placeholder","readOnly","required","src","step","size","type","value","width"]),pe(mr,["autoCapitalize","cols","dirname","form","maxLength","minLength","placeholder","readOnly","required","rows","wrap"]),pe(mr,["form","multiple","required"]),pe(ge,["selected","value"]),pe(ge,["cellPadding","cellSpacing"]),pe(ge,["rowSpan","scope"]),pe(ge,["colSpan","headers","rowSpan","scope"]),pe(ge,["span"]),pe(ge,["span"]),pe(ge,["acceptCharset","action","encType","encType","method","noValidate","target"]),pe(ge,["allow","allowFullScreen","allowPaymentRequest","allowTransparency","csp","height","importance","referrerPolicy","sandbox","src","srcDoc","width"]);var o_=pe(ge,["alt","crossOrigin","height","src","srcSet","useMap","width"]),uu=ge;function He(e,t,n){for(var r=Array.isArray(t),o={},i=Object.keys(e),a=0,u=i;a<u.length;a++){var l=u[a],s=!r&&t[l]||r&&t.indexOf(l)>=0||l.indexOf("data-")===0||l.indexOf("aria-")===0;s&&(!n||(n==null?void 0:n.indexOf(l))===-1)&&(o[l]=e[l])}return o}function lu(e){Z0(e,{componentDidMount:i_,componentDidUpdate:a_,componentWillUnmount:u_})}function i_(){su(this.props.componentRef,this)}function a_(e){e.componentRef!==this.props.componentRef&&(su(e.componentRef,null),su(this.props.componentRef,this))}function u_(){su(this.props.componentRef,null)}function su(e,t){e&&(typeof e=="object"?e.current=t:typeof e=="function"&&e(t))}var zt,l_=(zt={},zt[F.up]=1,zt[F.down]=1,zt[F.left]=1,zt[F.right]=1,zt[F.home]=1,zt[F.end]=1,zt[F.tab]=1,zt[F.pageUp]=1,zt[F.pageDown]=1,zt);function Nv(e){return!!l_[e]}var Ue="ms-Fabric--isFocusVisible",Bv="ms-Fabric--isFocusHidden";function Rv(e,t){e&&(e.classList.add(t?Ue:Bv),e.classList.remove(t?Bv:Ue))}function hr(e,t,n){var r;n?n.forEach(function(o){return Rv(o.current,e)}):Rv((r=he(t))===null||r===void 0?void 0:r.document.body,e)}var Lv=new WeakMap,Fv=new WeakMap;function Ov(e,t){var n,r=Lv.get(e);return r?n=r+t:n=1,Lv.set(e,n),n}function s_(e){var t=Fv.get(e);if(t)return t;var n=function(a){return zv(a,e.registeredProviders)},r=function(a){return Hv(a,e.registeredProviders)},o=function(a){return Uv(a,e.registeredProviders)},i=function(a){return Wv(a,e.registeredProviders)};return t={onMouseDown:n,onPointerDown:r,onKeyDown:o,onKeyUp:i},Fv.set(e,t),t}var cu=g.exports.createContext(void 0);function c_(e){var t=g.exports.useContext(cu);g.exports.useEffect(function(){var n,r,o=he(e==null?void 0:e.current);if(!(!o||((n=o.FabricConfig)===null||n===void 0?void 0:n.disableFocusRects)===!0)){var i=o,a,u,l,s;if(!((r=t==null?void 0:t.providerRef)===null||r===void 0)&&r.current){i=t.providerRef.current;var d=s_(t);a=d.onMouseDown,u=d.onPointerDown,l=d.onKeyDown,s=d.onKeyUp}else a=zv,u=Hv,l=Uv,s=Wv;var c=Ov(i,1);return c<=1&&(i.addEventListener("mousedown",a,!0),i.addEventListener("pointerdown",u,!0),i.addEventListener("keydown",l,!0),i.addEventListener("keyup",s,!0)),function(){var f;!o||((f=o.FabricConfig)===null||f===void 0?void 0:f.disableFocusRects)===!0||(c=Ov(i,-1),c===0&&(i.removeEventListener("mousedown",a,!0),i.removeEventListener("pointerdown",u,!0),i.removeEventListener("keydown",l,!0),i.removeEventListener("keyup",s,!0)))}}},[t,e])}var Av=function(e){return c_(e.rootRef),null};function zv(e,t){hr(!1,e.target,t)}function Hv(e,t){e.pointerType!=="mouse"&&hr(!1,e.target,t)}function Uv(e,t){Nv(e.which)&&hr(!0,e.target,t)}function Wv(e,t){Nv(e.which)&&hr(!0,e.target,t)}var Kv=function(e){var t=e.providerRef,n=e.layerRoot,r=g.exports.useState([])[0],o=g.exports.useContext(cu),i=o!==void 0&&!n,a=g.exports.useMemo(function(){return i?void 0:{providerRef:t,registeredProviders:r,registerProvider:function(u){r.push(u),o==null||o.registerProvider(u)},unregisterProvider:function(u){o==null||o.unregisterProvider(u);var l=r.indexOf(u);l>=0&&r.splice(l,1)}}},[t,r,o,i]);return g.exports.useEffect(function(){if(a)return a.registerProvider(a.providerRef),function(){return a.unregisterProvider(a.providerRef)}},[a]),a?g.exports.createElement(cu.Provider,{value:a},e.children):g.exports.createElement(g.exports.Fragment,null,e.children)};function d_(e){var t=null;try{var n=he();t=n?n.localStorage.getItem(e):null}catch{}return t}var gr,jv="language";function f_(e){if(e===void 0&&(e="sessionStorage"),gr===void 0){var t=dt(),n=e==="localStorage"?d_(jv):e==="sessionStorage"?Cv(jv):void 0;n&&(gr=n),gr===void 0&&t&&(gr=t.documentElement.getAttribute("lang")),gr===void 0&&(gr="en")}return gr}function Vv(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=t;r<o.length;r++){var i=o[r];$v(e||{},i)}return e}function $v(e,t,n){n===void 0&&(n=[]),n.push(t);for(var r in t)if(t.hasOwnProperty(r)&&r!=="__proto__"&&r!=="constructor"&&r!=="prototype"){var o=t[r];if(typeof o=="object"&&o!==null&&!Array.isArray(o)){var i=n.indexOf(o)>-1;e[r]=i?o:$v(e[r]||{},o,n)}else e[r]=o}return n.pop(),e}var Gv=function(){return!window||!window.navigator||!window.navigator.userAgent?!1:/iPad|iPhone|iPod/i.test(window.navigator.userAgent)},p_=["TEMPLATE","STYLE","SCRIPT"];function v_(e){var t=dt(e);if(!t)return function(){};for(var n=[];e!==t.body&&e.parentElement;){for(var r=0,o=e.parentElement.children;r<o.length;r++){var i=o[r],a=i.getAttribute("aria-hidden");i!==e&&(a==null?void 0:a.toLowerCase())!=="true"&&p_.indexOf(i.tagName)===-1&&n.push([i,a])}e=e.parentElement}return n.forEach(function(u){var l=u[0];l.setAttribute("aria-hidden","true")}),function(){m_(n),n=[]}}function m_(e){e.forEach(function(t){var n=t[0],r=t[1];r?n.setAttribute("aria-hidden",r):n.removeAttribute("aria-hidden")})}var oc;function Qv(e){var t;if(typeof oc>"u"||e){var n=he(),r=(t=n==null?void 0:n.navigator)===null||t===void 0?void 0:t.userAgent;oc=!!r&&r.indexOf("Macintosh")!==-1}return!!oc}function h_(e){var t=so(function(n){var r=so(function(o){return function(i){return n(i,o)}});return function(o,i){return e(o,i?r(i):n)}});return t}var g_=so(h_);function y_(e,t){return g_(e)(t)}var __=["theme","styles"];function $n(e,t,n,r,o){r=r||{scope:"",fields:void 0};var i=r.scope,a=r.fields,u=a===void 0?__:a,l=g.exports.forwardRef(function(d,c){var f=g.exports.useRef(),m=X0(u,i),y=m.styles;m.dir;var C=no(m,["styles","dir"]),E=n?n(d):void 0,v=f.current&&f.current.__cachedInputs__||[],p=d.styles;if(!f.current||y!==v[1]||p!==v[2]){var h=function(_){return vv(_,t,y,p)};h.__cachedInputs__=[t,y,p],h.__noStyleOverride__=!y&&!p,f.current=h}return g.exports.createElement(e,x({ref:c},C,E,d,{styles:f.current}))});l.displayName="Styled"+(e.displayName||e.name);var s=o?g.exports.memo(l):l;return l.displayName&&(s.displayName=l.displayName),s}function ic(e,t){for(var n=x({},t),r=0,o=Object.keys(e);r<o.length;r++){var i=o[r];n[i]===void 0&&(n[i]=e[i])}return n}var C_=function(e){return function(t){for(var n=0,r=e.refs;n<r.length;n++){var o=r[n];typeof o=="function"?o(t):o&&(o.current=t)}}},Yv=function(e){var t={refs:[]};return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(!t.resolver||!p0(t.refs,n))&&(t.resolver=C_(t)),t.refs=n,t.resolver}},mi=js()?g.exports.useLayoutEffect:g.exports.useEffect,k_="icons",yr=yv.getValue(k_,{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}}),ac=wt.getInstance();ac&&ac.onReset&&ac.onReset(function(){for(var e in yr)yr.hasOwnProperty(e)&&!!yr[e].subset&&(yr[e].subset.className=void 0)});var E_=function(e){return e.toLowerCase()};function x_(e){var t=void 0,n=yr.__options;if(e=e?E_(e):"",e=yr.__remapped[e]||e,e)if(t=yr[e],t){var r=t.subset;r&&r.fontFace&&(r.isRegistered||(mv(r.fontFace),r.isRegistered=!0),r.className||(r.className=dn(r.style,{fontFamily:r.fontFace.fontFamily,fontWeight:r.fontFace.fontWeight||"normal",fontStyle:r.fontFace.fontStyle||"normal"})))}else!n.disableWarnings&&n.warnOnMissingIcons&&u0('The icon "'+e+'" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');return t}function S_(e,t,n,r,o){o===void 0&&(o=!1);var i=x({primaryButtonBorder:"transparent",errorText:r?"#F1707B":"#a4262c",messageText:r?"#F3F2F1":"#323130",messageLink:r?"#6CB8F6":"#005A9E",messageLinkHovered:r?"#82C7FF":"#004578",infoIcon:r?"#C8C6C4":"#605e5c",errorIcon:r?"#F1707B":"#A80000",blockingIcon:r?"#442726":"#FDE7E9",warningIcon:r?"#C8C6C4":"#797775",severeWarningIcon:r?"#FCE100":"#D83B01",successIcon:r?"#92C353":"#107C10",infoBackground:r?"#323130":"#f3f2f1",errorBackground:r?"#442726":"#FDE7E9",blockingBackground:r?"#442726":"#FDE7E9",warningBackground:r?"#433519":"#FFF4CE",severeWarningBackground:r?"#4F2A0F":"#FED9CC",successBackground:r?"#393D1B":"#DFF6DD",warningHighlight:r?"#fff100":"#ffb900",successText:r?"#92c353":"#107C10"},n),a=Xv(e,t,i,r);return w_(a,o)}function Xv(e,t,n,r,o){var i={},a=e||{},u=a.white,l=a.black,s=a.themePrimary,d=a.themeDark,c=a.themeDarker,f=a.themeDarkAlt,m=a.themeLighter,y=a.neutralLight,C=a.neutralLighter,E=a.neutralDark,v=a.neutralQuaternary,p=a.neutralQuaternaryAlt,h=a.neutralPrimary,_=a.neutralSecondary,S=a.neutralSecondaryAlt,w=a.neutralTertiary,k=a.neutralTertiaryAlt,I=a.neutralLighterAlt,b=a.accent;return u&&(i.bodyBackground=u,i.bodyFrameBackground=u,i.accentButtonText=u,i.buttonBackground=u,i.primaryButtonText=u,i.primaryButtonTextHovered=u,i.primaryButtonTextPressed=u,i.inputBackground=u,i.inputForegroundChecked=u,i.listBackground=u,i.menuBackground=u,i.cardStandoutBackground=u),l&&(i.bodyTextChecked=l,i.buttonTextCheckedHovered=l),s&&(i.link=s,i.primaryButtonBackground=s,i.inputBackgroundChecked=s,i.inputIcon=s,i.inputFocusBorderAlt=s,i.menuIcon=s,i.menuHeader=s,i.accentButtonBackground=s),d&&(i.primaryButtonBackgroundPressed=d,i.inputBackgroundCheckedHovered=d,i.inputIconHovered=d),c&&(i.linkHovered=c),f&&(i.primaryButtonBackgroundHovered=f),m&&(i.inputPlaceholderBackgroundChecked=m),y&&(i.bodyBackgroundChecked=y,i.bodyFrameDivider=y,i.bodyDivider=y,i.variantBorder=y,i.buttonBackgroundCheckedHovered=y,i.buttonBackgroundPressed=y,i.listItemBackgroundChecked=y,i.listHeaderBackgroundPressed=y,i.menuItemBackgroundPressed=y,i.menuItemBackgroundChecked=y),C&&(i.bodyBackgroundHovered=C,i.buttonBackgroundHovered=C,i.buttonBackgroundDisabled=C,i.buttonBorderDisabled=C,i.primaryButtonBackgroundDisabled=C,i.disabledBackground=C,i.listItemBackgroundHovered=C,i.listHeaderBackgroundHovered=C,i.menuItemBackgroundHovered=C),v&&(i.primaryButtonTextDisabled=v,i.disabledSubtext=v),p&&(i.listItemBackgroundCheckedHovered=p),w&&(i.disabledBodyText=w,i.variantBorderHovered=(n==null?void 0:n.variantBorderHovered)||w,i.buttonTextDisabled=w,i.inputIconDisabled=w,i.disabledText=w),h&&(i.bodyText=h,i.actionLink=h,i.buttonText=h,i.inputBorderHovered=h,i.inputText=h,i.listText=h,i.menuItemText=h),I&&(i.bodyStandoutBackground=I,i.defaultStateBackground=I),E&&(i.actionLinkHovered=E,i.buttonTextHovered=E,i.buttonTextChecked=E,i.buttonTextPressed=E,i.inputTextHovered=E,i.menuItemTextHovered=E),_&&(i.bodySubtext=_,i.focusBorder=_,i.inputBorder=_,i.smallInputBorder=_,i.inputPlaceholderText=_),S&&(i.buttonBorder=S),k&&(i.disabledBodySubtext=k,i.disabledBorder=k,i.buttonBackgroundChecked=k,i.menuDivider=k),b&&(i.accentButtonBackground=b),t!=null&&t.elevation4&&(i.cardShadow=t.elevation4),!r&&(t==null?void 0:t.elevation8)?i.cardShadowHovered=t.elevation8:i.variantBorderHovered&&(i.cardShadowHovered="0 0 1px "+i.variantBorderHovered),i=x(x({},i),n),i}function w_(e,t){var n="";return t===!0&&(n=" /* @deprecated */"),e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}function I_(e,t){var n,r,o;t===void 0&&(t={});var i=Vv({},e,t,{semanticColors:Xv(t.palette,t.effects,t.semanticColors,t.isInverted===void 0?e.isInverted:t.isInverted)});if(((n=t.palette)===null||n===void 0?void 0:n.themePrimary)&&!(!((r=t.palette)===null||r===void 0)&&r.accent)&&(i.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var a=0,u=Object.keys(i.fonts);a<u.length;a++){var l=u[a];i.fonts[l]=Vv(i.fonts[l],t.defaultFontStyle,(o=t==null?void 0:t.fonts)===null||o===void 0?void 0:o[l])}return i}var qv={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"},co;(function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"})(co||(co={}));var Zv={elevation4:co.depth4,elevation8:co.depth8,elevation16:co.depth16,elevation64:co.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"},T_={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"},ee="cubic-bezier(.1,.9,.2,1)",Tt="cubic-bezier(.1,.25,.75,.9)",du="0.167s",Jv="0.267s",Y="0.367s",em="0.467s",Se=It({from:{opacity:0},to:{opacity:1}}),we=It({from:{opacity:1},to:{opacity:0,visibility:"hidden"}}),b_=Gn(-10),M_=Gn(-20),P_=Gn(-40),D_=Gn(-400),N_=Gn(10),B_=Gn(20),R_=Gn(40),L_=Gn(400),F_=fu(10),O_=fu(20),A_=fu(-10),z_=fu(-20),H_=Qn(10),U_=Qn(20),W_=Qn(40),K_=Qn(400),j_=Qn(-10),V_=Qn(-20),$_=Qn(-40),G_=Qn(-400),Q_=pu(-10),Y_=pu(-20),X_=pu(10),q_=pu(20),Z_=It({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),J_=It({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),e1=It({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),t1=It({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),n1=It({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),r1=It({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}}),o1={slideRightIn10:A(Se+","+b_,Y,ee),slideRightIn20:A(Se+","+M_,Y,ee),slideRightIn40:A(Se+","+P_,Y,ee),slideRightIn400:A(Se+","+D_,Y,ee),slideLeftIn10:A(Se+","+N_,Y,ee),slideLeftIn20:A(Se+","+B_,Y,ee),slideLeftIn40:A(Se+","+R_,Y,ee),slideLeftIn400:A(Se+","+L_,Y,ee),slideUpIn10:A(Se+","+F_,Y,ee),slideUpIn20:A(Se+","+O_,Y,ee),slideDownIn10:A(Se+","+A_,Y,ee),slideDownIn20:A(Se+","+z_,Y,ee),slideRightOut10:A(we+","+H_,Y,ee),slideRightOut20:A(we+","+U_,Y,ee),slideRightOut40:A(we+","+W_,Y,ee),slideRightOut400:A(we+","+K_,Y,ee),slideLeftOut10:A(we+","+j_,Y,ee),slideLeftOut20:A(we+","+V_,Y,ee),slideLeftOut40:A(we+","+$_,Y,ee),slideLeftOut400:A(we+","+G_,Y,ee),slideUpOut10:A(we+","+Q_,Y,ee),slideUpOut20:A(we+","+Y_,Y,ee),slideDownOut10:A(we+","+X_,Y,ee),slideDownOut20:A(we+","+q_,Y,ee),scaleUpIn100:A(Se+","+Z_,Y,ee),scaleDownIn100:A(Se+","+e1,Y,ee),scaleUpOut103:A(we+","+t1,du,Tt),scaleDownOut98:A(we+","+J_,du,Tt),fadeIn100:A(Se,du,Tt),fadeIn200:A(Se,Jv,Tt),fadeIn400:A(Se,Y,Tt),fadeIn500:A(Se,em,Tt),fadeOut100:A(we,du,Tt),fadeOut200:A(we,Jv,Tt),fadeOut400:A(we,Y,Tt),fadeOut500:A(we,em,Tt),rotate90deg:A(n1,"0.1s",Tt),rotateN90deg:A(r1,"0.1s",Tt)};function A(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function Gn(e){return It({from:{transform:"translate3d("+e+"px,0,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function fu(e){return It({from:{transform:"translate3d(0,"+e+"px,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function Qn(e){return It({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function pu(e){return It({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var ce;(function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"})(ce||(ce={}));var $;(function(e){e.Arabic="'"+ce.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+ce.Cyrillic+"'",e.EastEuropean="'"+ce.EastEuropean+"'",e.Greek="'"+ce.Greek+"'",e.Hebrew="'"+ce.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+ce.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+ce.Vietnamese+"'",e.WestEuropean="'"+ce.WestEuropean+"'",e.Armenian="'"+ce.Armenian+"'",e.Georgian="'"+ce.Georgian+"'"})($||($={}));var We;(function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"})(We||(We={}));var ie;(function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700})(ie||(ie={}));var Yn;(function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"})(Yn||(Yn={}));var i1="'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",a1="'Segoe UI', '"+ce.WestEuropean+"'",uc={ar:$.Arabic,bg:$.Cyrillic,cs:$.EastEuropean,el:$.Greek,et:$.EastEuropean,he:$.Hebrew,hi:$.Hindi,hr:$.EastEuropean,hu:$.EastEuropean,ja:$.Japanese,kk:$.EastEuropean,ko:$.Korean,lt:$.EastEuropean,lv:$.EastEuropean,pl:$.EastEuropean,ru:$.Cyrillic,sk:$.EastEuropean,"sr-latn":$.EastEuropean,th:$.Thai,tr:$.EastEuropean,uk:$.Cyrillic,vi:$.Vietnamese,"zh-hans":$.ChineseSimplified,"zh-hant":$.ChineseTraditional,hy:$.Armenian,ka:$.Georgian};function u1(e){return e+", "+i1}function l1(e){for(var t in uc)if(uc.hasOwnProperty(t)&&e&&t.indexOf(e)===0)return uc[t];return a1}function vt(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}function s1(e){var t=l1(e),n=u1(t),r={tiny:vt(We.mini,ie.regular,n),xSmall:vt(We.xSmall,ie.regular,n),small:vt(We.small,ie.regular,n),smallPlus:vt(We.smallPlus,ie.regular,n),medium:vt(We.medium,ie.regular,n),mediumPlus:vt(We.mediumPlus,ie.regular,n),large:vt(We.large,ie.regular,n),xLarge:vt(We.xLarge,ie.semibold,n),xLargePlus:vt(We.xLargePlus,ie.semibold,n),xxLarge:vt(We.xxLarge,ie.semibold,n),xxLargePlus:vt(We.xxLargePlus,ie.semibold,n),superLarge:vt(We.superLarge,ie.semibold,n),mega:vt(We.mega,ie.semibold,n)};return r}var c1="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets",d1=s1(f_());function _r(e,t,n,r){e="'"+e+"'";var o=r!==void 0?"local('"+r+"'),":"";mv({fontFamily:e,src:o+("url('"+t+".woff2') format('woff2'),")+("url('"+t+".woff') format('woff')"),fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function Ht(e,t,n,r,o){r===void 0&&(r="segoeui");var i=e+"/"+n+"/"+r;_r(t,i+"-light",ie.light,o&&o+" Light"),_r(t,i+"-semilight",ie.semilight,o&&o+" SemiLight"),_r(t,i+"-regular",ie.regular,o),_r(t,i+"-semibold",ie.semibold,o&&o+" SemiBold"),_r(t,i+"-bold",ie.bold,o&&o+" Bold")}function f1(e){if(e){var t=e+"/fonts";Ht(t,ce.Thai,"leelawadeeui-thai","leelawadeeui"),Ht(t,ce.Arabic,"segoeui-arabic"),Ht(t,ce.Cyrillic,"segoeui-cyrillic"),Ht(t,ce.EastEuropean,"segoeui-easteuropean"),Ht(t,ce.Greek,"segoeui-greek"),Ht(t,ce.Hebrew,"segoeui-hebrew"),Ht(t,ce.Vietnamese,"segoeui-vietnamese"),Ht(t,ce.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),Ht(t,$.Selawik,"selawik","selawik"),Ht(t,ce.Armenian,"segoeui-armenian"),Ht(t,ce.Georgian,"segoeui-georgian"),_r("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",ie.light),_r("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",ie.semibold)}}function p1(){var e,t,n=(e=he())===null||e===void 0?void 0:e.FabricConfig;return(t=n==null?void 0:n.fontBaseUrl)!==null&&t!==void 0?t:c1}f1(p1());function hi(e,t){e===void 0&&(e={}),t===void 0&&(t=!1);var n=!!e.isInverted,r={palette:qv,effects:Zv,fonts:d1,spacing:T_,isInverted:n,disableGlobalClassNames:!1,semanticColors:S_(qv,Zv,void 0,n,t),rtl:void 0};return I_(r,e)}var W="@media screen and (-ms-high-contrast: active), screen and (forced-colors: active)",v1=640,tm=v1-1;function nm(e,t){var n=typeof e=="number"?" and (min-width: "+e+"px)":"",r=typeof t=="number"?" and (max-width: "+t+"px)":"";return"@media only screen"+n+r}function Cr(){return{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}}var gi;(function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001})(gi||(gi={}));function fo(e,t,n,r,o,i,a,u){return typeof t=="number"||!t?rm(e,{inset:t,position:n,highContrastStyle:r,borderColor:o,outlineColor:i,isFocusedOnly:a,borderRadius:u}):rm(e,t)}function rm(e,t){var n,r;t===void 0&&(t={});var o=t.borderRadius,i=t.inset,a=i===void 0?0:i,u=t.width,l=u===void 0?1:u,s=t.position,d=s===void 0?"relative":s,c=t.highContrastStyle,f=t.borderColor,m=f===void 0?e.palette.white:f,y=t.outlineColor,C=y===void 0?e.palette.neutralSecondary:y,E=t.isFocusedOnly,v=E===void 0?!0:E,p=t.pointerEvents;return{outline:"transparent",position:d,selectors:(n={"::-moz-focus-inner":{border:"0"}},n["."+Ue+" &"+(v?":focus":"")+":after"]={content:'""',position:"absolute",pointerEvents:p,left:a+1,top:a+1,bottom:a+1,right:a+1,border:l+"px solid "+m,outline:l+"px solid "+C,zIndex:gi.FocusStyle,borderRadius:o,selectors:(r={},r[W]=c,r)},n)}}function m1(){return{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}}}var om={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden",whiteSpace:"nowrap"},h1=xe(function(e,t){var n=wt.getInstance();return t?Object.keys(e).reduce(function(r,o){return r[o]=n.getClassName(e[o]),r},{}):e});function kr(e,t,n){return h1(e,n!==void 0?n:t.disableGlobalClassNames)}var po=globalThis&&globalThis.__assign||function(){return po=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},po.apply(this,arguments)},yi=typeof window>"u"?global:window,im=yi&&yi.CSPSettings&&yi.CSPSettings.nonce,mt=g1();function g1(){var e=yi.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]};return e.runState||(e=po(po({},e),{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}})),e.registeredThemableStyles||(e=po(po({},e),{registeredThemableStyles:[]})),yi.__themeState__=e,e}function y1(e,t){mt.loadStyles?mt.loadStyles(um(e).styleString,e):E1(e)}function _1(e){mt.theme=e,k1()}function C1(e){e===void 0&&(e=3),(e===3||e===2)&&(am(mt.registeredStyles),mt.registeredStyles=[]),(e===3||e===1)&&(am(mt.registeredThemableStyles),mt.registeredThemableStyles=[])}function am(e){e.forEach(function(t){var n=t&&t.styleElement;n&&n.parentElement&&n.parentElement.removeChild(n)})}function k1(){if(mt.theme){for(var e=[],t=0,n=mt.registeredThemableStyles;t<n.length;t++){var r=n[t];e.push(r.themableStyle)}e.length>0&&(C1(1),y1([].concat.apply([],e)))}}function um(e){var t=mt.theme,n=!1,r=(e||[]).map(function(o){var i=o.theme;if(i){n=!0;var a=t?t[i]:void 0,u=o.defaultValue||"inherit";return t&&!a&&console&&!(i in t)&&typeof DEBUG<"u"&&DEBUG&&console.warn('Theming value not provided for "'.concat(i,'". Falling back to "').concat(u,'".')),a||u}else return o.rawString});return{styleString:r.join(""),themable:n}}function E1(e){if(!(typeof document>"u")){var t=document.getElementsByTagName("head")[0],n=document.createElement("style"),r=um(e),o=r.styleString,i=r.themable;n.setAttribute("data-load-themed-styles","true"),im&&n.setAttribute("nonce",im),n.appendChild(document.createTextNode(o)),mt.perf.count++,t.appendChild(n);var a=document.createEvent("HTMLEvents");a.initEvent("styleinsert",!0,!1),a.args={newStyle:n},document.dispatchEvent(a);var u={styleElement:n,themableStyle:e};i?mt.registeredThemableStyles.push(u):mt.registeredStyles.push(u)}}var bt=hi({}),x1=[],lc="theme";function lm(){var e,t,n,r=he();!((t=r==null?void 0:r.FabricConfig)===null||t===void 0)&&t.legacyTheme?w1(r.FabricConfig.legacyTheme):At.getSettings([lc]).theme||(!((n=r==null?void 0:r.FabricConfig)===null||n===void 0)&&n.theme&&(bt=hi(r.FabricConfig.theme)),At.applySettings((e={},e[lc]=bt,e)))}lm();function S1(e){return e===void 0&&(e=!1),e===!0&&(bt=hi({},e)),bt}function w1(e,t){var n;return t===void 0&&(t=!1),bt=hi(e,t),_1(x(x(x(x({},bt.palette),bt.semanticColors),bt.effects),I1(bt))),At.applySettings((n={},n[lc]=bt,n)),x1.forEach(function(r){try{r(bt)}catch{}}),bt}function I1(e){for(var t={},n=0,r=Object.keys(e.fonts);n<r.length;n++)for(var o=r[n],i=e.fonts[o],a=0,u=Object.keys(i);a<u.length;a++){var l=u[a],s=o+l.charAt(0).toUpperCase()+l.slice(1),d=i[l];l==="fontSize"&&typeof d=="number"&&(d=d+"px"),t[s]=d}return t}var _i=n0(o1);qp("@fluentui/style-utilities","8.9.6"),lm();var ye={topLeftEdge:0,topCenter:1,topRightEdge:2,topAutoEdge:3,bottomLeftEdge:4,bottomCenter:5,bottomRightEdge:6,bottomAutoEdge:7,leftTopEdge:8,leftCenter:9,leftBottomEdge:10,rightTopEdge:11,rightCenter:12,rightBottomEdge:13},R;(function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"})(R||(R={}));var sm;(function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"})(sm||(sm={}));var Re;function Ze(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var cm=(Re={},Re[ye.topLeftEdge]=Ze(R.top,R.left),Re[ye.topCenter]=Ze(R.top),Re[ye.topRightEdge]=Ze(R.top,R.right),Re[ye.topAutoEdge]=Ze(R.top,void 0,!0),Re[ye.bottomLeftEdge]=Ze(R.bottom,R.left),Re[ye.bottomCenter]=Ze(R.bottom),Re[ye.bottomRightEdge]=Ze(R.bottom,R.right),Re[ye.bottomAutoEdge]=Ze(R.bottom,void 0,!0),Re[ye.leftTopEdge]=Ze(R.left,R.top),Re[ye.leftCenter]=Ze(R.left),Re[ye.leftBottomEdge]=Ze(R.left,R.bottom),Re[ye.rightTopEdge]=Ze(R.right,R.top),Re[ye.rightCenter]=Ze(R.right),Re[ye.rightBottomEdge]=Ze(R.right,R.bottom),Re);function sc(e,t){return!(e.top<t.top||e.bottom>t.bottom||e.left<t.left||e.right>t.right)}function vu(e,t){var n=[];return e.top<t.top&&n.push(R.top),e.bottom>t.bottom&&n.push(R.bottom),e.left<t.left&&n.push(R.left),e.right>t.right&&n.push(R.right),n}function Le(e,t){return e[R[t]]}function dm(e,t,n){return e[R[t]]=n,e}function Ci(e,t){var n=mo(t);return(Le(e,n.positiveEdge)+Le(e,n.negativeEdge))/2}function mu(e,t){return e>0?t:t*-1}function cc(e,t){return mu(e,Le(t,e))}function hn(e,t,n){var r=Le(e,n)-Le(t,n);return mu(n,r)}function vo(e,t,n,r){r===void 0&&(r=!0);var o=Le(e,t)-n,i=dm(e,t,n);return r&&(i=dm(e,t*-1,Le(e,t*-1)-o)),i}function ki(e,t,n,r){return r===void 0&&(r=0),vo(e,n,Le(t,n)+mu(n,r))}function T1(e,t,n,r){r===void 0&&(r=0);var o=n*-1,i=mu(o,r);return vo(e,n*-1,Le(t,n)+i)}function hu(e,t,n){var r=cc(n,e);return r>cc(n,t)}function b1(e,t){for(var n=vu(e,t),r=0,o=0,i=n;o<i.length;o++){var a=i[o];r+=Math.pow(hn(e,t,a),2)}return r}function M1(e,t,n,r,o){o===void 0&&(o=0);var i=[R.left,R.right,R.bottom,R.top];qe()&&(i[0]*=-1,i[1]*=-1);for(var a=e,u=r.targetEdge,l=r.alignmentEdge,s,d=u,c=l,f=0;f<4;f++){if(hu(a,n,u))return{elementRectangle:a,targetEdge:u,alignmentEdge:l};var m=b1(a,n);(!s||m<s)&&(s=m,d=u,c=l),i.splice(i.indexOf(u),1),i.length>0&&(i.indexOf(u*-1)>-1?u=u*-1:(l=u,u=i.slice(-1)[0]),a=gu(e,t,{targetEdge:u,alignmentEdge:l},o))}return a=gu(e,t,{targetEdge:d,alignmentEdge:c},o),{elementRectangle:a,targetEdge:d,alignmentEdge:c}}function P1(e,t,n,r){var o=e.alignmentEdge,i=e.targetEdge,a=e.elementRectangle,u=o*-1,l=gu(a,t,{targetEdge:i,alignmentEdge:u},n,r);return{elementRectangle:l,targetEdge:i,alignmentEdge:u}}function D1(e,t,n,r,o,i,a){o===void 0&&(o=0);var u=r.alignmentEdge,l=r.alignTargetEdge,s={elementRectangle:e,targetEdge:r.targetEdge,alignmentEdge:u};!i&&!a&&(s=M1(e,t,n,r,o));var d=vu(s.elementRectangle,n),c=i?-s.targetEdge:void 0;if(d.length>0)if(l)if(s.alignmentEdge&&d.indexOf(s.alignmentEdge*-1)>-1){var f=P1(s,t,o,a);if(sc(f.elementRectangle,n))return f;s=dc(vu(f.elementRectangle,n),s,n,c)}else s=dc(d,s,n,c);else s=dc(d,s,n,c);return s}function dc(e,t,n,r){for(var o=0,i=e;o<i.length;o++){var a=i[o],u=void 0;if(r&&r===a*-1)u=vo(t.elementRectangle,a,Le(n,a),!1),t.forcedInBounds=!0;else{u=ki(t.elementRectangle,n,a);var l=hu(u,n,a*-1);l||(u=vo(u,a*-1,Le(n,a*-1),!1),t.forcedInBounds=!0)}t.elementRectangle=u}return t}function fm(e,t,n){var r=mo(t).positiveEdge,o=Ci(e,t),i=o-Le(e,r);return vo(e,r,n-i)}function gu(e,t,n,r,o){r===void 0&&(r=0);var i=new $t(e.left,e.right,e.top,e.bottom),a=n.alignmentEdge,u=n.targetEdge,l=o?u:u*-1;if(i=o?ki(i,t,u,r):T1(i,t,u,r),a)i=ki(i,t,a);else{var s=Ci(t,u);i=fm(i,l,s)}return i}function mo(e){return e===R.top||e===R.bottom?{positiveEdge:R.left,negativeEdge:R.right}:{positiveEdge:R.top,negativeEdge:R.bottom}}function pm(e,t,n){return n&&Math.abs(hn(e,n,t))>Math.abs(hn(e,n,t*-1))?t*-1:t}function N1(e,t,n){return n!==void 0&&Le(e,t)===Le(n,t)}function B1(e,t,n,r,o,i,a,u){var l={},s=fc(t),d=i?n:n*-1,c=o||mo(n).positiveEdge;return(!a||N1(e,G1(c),r))&&(c=pm(e,c,r)),l[R[d]]=hn(e,s,d),l[R[c]]=hn(e,s,c),u&&(l[R[d*-1]]=hn(e,s,d*-1),l[R[c*-1]]=hn(e,s,c*-1)),l}function R1(e){return Math.sqrt(e*e*2)}function L1(e,t,n){if(e===void 0&&(e=ye.bottomAutoEdge),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var r=x({},cm[e]);return qe()?(r.alignmentEdge&&r.alignmentEdge%2===0&&(r.alignmentEdge=r.alignmentEdge*-1),t!==void 0?cm[t]:r):r}function F1(e,t,n,r,o){return e.isAuto&&(e.alignmentEdge=vm(e.targetEdge,t,n)),e.alignTargetEdge=o,e}function vm(e,t,n){var r=Ci(t,e),o=Ci(n,e),i=mo(e),a=i.positiveEdge,u=i.negativeEdge;return r<=o?a:u}function O1(e,t,n,r,o,i,a){var u=gu(e,t,r,o,a);return sc(u,n)?{elementRectangle:u,targetEdge:r.targetEdge,alignmentEdge:r.alignmentEdge}:D1(u,t,n,r,o,i,a)}function A1(e,t,n){var r=e.targetEdge*-1,o=new $t(0,e.elementRectangle.width,0,e.elementRectangle.height),i={},a=pm(e.elementRectangle,e.alignmentEdge?e.alignmentEdge:mo(r).positiveEdge,n),u=hn(e.elementRectangle,e.targetRectangle,r),l=u>Math.abs(Le(t,r));return i[R[r]]=Le(t,r),i[R[a]]=hn(t,o,a),{elementPosition:x({},i),closestEdge:vm(e.targetEdge,t,o),targetEdge:r,hideBeak:!l}}function z1(e,t){var n=t.targetRectangle,r=mo(t.targetEdge),o=r.positiveEdge,i=r.negativeEdge,a=Ci(n,t.targetEdge),u=new $t(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),l=new $t(0,e,0,e);return l=vo(l,t.targetEdge*-1,-e/2),l=fm(l,t.targetEdge*-1,a-cc(o,t.elementRectangle)),hu(l,u,o)?hu(l,u,i)||(l=ki(l,u,i)):l=ki(l,u,o),l}function fc(e){var t=e.getBoundingClientRect();return new $t(t.left,t.right,t.top,t.bottom)}function H1(e){return new $t(e.left,e.right,e.top,e.bottom)}function U1(e,t){var n;if(t){if(t.preventDefault){var r=t;n=new $t(r.clientX,r.clientX,r.clientY,r.clientY)}else if(t.getBoundingClientRect)n=fc(t);else{var o=t,i=o.left||o.x,a=o.top||o.y,u=o.right||i,l=o.bottom||a;n=new $t(i,u,a,l)}if(!sc(n,e))for(var s=vu(n,e),d=0,c=s;d<c.length;d++){var f=c[d];n[R[f]]=e[R[f]]}}else n=new $t(0,0,0,0);return n}function W1(e,t,n,r){var o=e.gapSpace?e.gapSpace:0,i=U1(n,e.target),a=F1(L1(e.directionalHint,e.directionalHintForRTL,r),i,n,e.coverTarget,e.alignTargetEdge),u=O1(fc(t),i,n,a,o,e.directionalHintFixed,e.coverTarget);return x(x({},u),{targetRectangle:i})}function K1(e,t,n,r,o){var i=B1(e.elementRectangle,t,e.targetEdge,n,e.alignmentEdge,r,o,e.forcedInBounds);return{elementPosition:i,targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}function mm(e,t,n,r,o){var i=e.isBeakVisible&&e.beakWidth||0,a=R1(i)/2+(e.gapSpace?e.gapSpace:0),u=e;u.gapSpace=a;var l=e.bounds?H1(e.bounds):new $t(0,window.innerWidth-o0(),0,window.innerHeight),s=W1(u,n,l,r),d=z1(i,s),c=A1(s,d,l);return x(x({},K1(s,t,l,e.coverTarget,o)),{beakPosition:c})}function j1(e,t,n,r){return mm(e,t,n,r,!0)}function V1(e,t,n,r){return mm(e,t,n,r)}function $1(e,t,n,r){return j1(e,t,n,r)}function G1(e){return e*-1}function Q1(e,t){var n=void 0;if(t.getWindowSegments&&(n=t.getWindowSegments()),n===void 0||n.length<=1)return{top:0,left:0,right:t.innerWidth,bottom:t.innerHeight,width:t.innerWidth,height:t.innerHeight};var r=0,o=0;if(e!==null&&!!e.getBoundingClientRect){var i=e.getBoundingClientRect();r=(i.left+i.right)/2,o=(i.top+i.bottom)/2}else e!==null&&(r=e.left||e.x,o=e.top||e.y);for(var a={top:0,left:0,right:0,bottom:0,width:0,height:0},u=0,l=n;u<l.length;u++){var s=l[u];r&&s.left<=r&&s.right>=r&&o&&s.top<=o&&s.bottom>=o&&(a={top:s.top,left:s.left,right:s.right,bottom:s.bottom,width:s.width,height:s.height})}return a}function Y1(e,t){return Q1(e,t)}function ho(){var e=g.exports.useRef();return e.current||(e.current=new Za),g.exports.useEffect(function(){return function(){var t;(t=e.current)===null||t===void 0||t.dispose(),e.current=void 0}},[]),e.current}function hm(e){var t=g.exports.useRef();return t.current===void 0&&(t.current={value:typeof e=="function"?e():e}),t.current.value}function gm(e,t){var n=g.exports.useRef(t);return n.current||(n.current=mn(e)),n.current}function go(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=g.exports.useCallback(function(r){n.current=r;for(var o=0,i=e;o<i.length;o++){var a=i[o];typeof a=="function"?a(r):a&&(a.current=r)}},cn([],e));return n}function Ei(e,t,n,r){var o=g.exports.useRef(n);o.current=n,g.exports.useEffect(function(){var i=e&&"current"in e?e.current:e;if(!!i){var a=lo(i,t,function(u){return o.current(u)},r);return a}},[e,t,r])}function ym(e){var t=g.exports.useRef();return g.exports.useEffect(function(){t.current=e}),t.current}var X1=g.exports.createContext({window:typeof window=="object"?window:void 0}),pc=function(){return g.exports.useContext(X1).window};function _m(e,t){var n=g.exports.useRef(),r=g.exports.useRef(null),o=pc();if(!e||e!==n.current||typeof e=="string"){var i=t==null?void 0:t.current;if(e)if(typeof e=="string"){var a=dt(i);r.current=a?a.querySelector(e):null}else"stopPropagation"in e||"getBoundingClientRect"in e?r.current=e:"current"in e?r.current=e.current:r.current=e;n.current=e}return[r,o]}function q1(e,t){var n=ho(),r=g.exports.useState(!1),o=r[0],i=r[1];return g.exports.useEffect(function(){return n.requestAnimationFrame(function(){var a;if(!(e.style&&e.style.overflowY)){var u=!1;if(t&&t.current&&((a=t.current)===null||a===void 0?void 0:a.firstElementChild)){var l=t.current.clientHeight,s=t.current.firstElementChild.clientHeight;l>0&&s>l&&(u=s-l>1)}o!==u&&i(u)}}),function(){return n.dispose()}}),o}function Z1(e){var t=e.originalElement,n=e.containsFocus;t&&n&&t!==he()&&setTimeout(function(){var r;(r=t.focus)===null||r===void 0||r.call(t)},0)}function J1(e,t){var n=e.onRestoreFocus,r=n===void 0?Z1:n,o=g.exports.useRef(),i=g.exports.useRef(!1);g.exports.useEffect(function(){return o.current=dt().activeElement,b0(t.current)&&(i.current=!0),function(){var a;r==null||r({originalElement:o.current,containsFocus:i.current,documentContainsFocus:((a=dt())===null||a===void 0?void 0:a.hasFocus())||!1}),o.current=void 0}},[]),Ei(t,"focus",g.exports.useCallback(function(){i.current=!0},[]),!0),Ei(t,"blur",g.exports.useCallback(function(a){t.current&&a.relatedTarget&&!t.current.contains(a.relatedTarget)&&(i.current=!1)},[]),!0)}function eC(e,t){var n=String(e["aria-modal"]).toLowerCase()==="true"&&e.enableAriaHiddenSiblings;g.exports.useEffect(function(){if(!!(n&&t.current)){var r=v_(t.current);return r}},[t,n])}var Cm=g.exports.forwardRef(function(e,t){var n=ic({shouldRestoreFocus:!0,enableAriaHiddenSiblings:!0},e),r=g.exports.useRef(),o=go(r,t);eC(n,r),J1(n,r);var i=n.role,a=n.className,u=n.ariaLabel,l=n.ariaLabelledBy,s=n.ariaDescribedBy,d=n.style,c=n.children,f=n.onDismiss,m=q1(n,r),y=g.exports.useCallback(function(E){switch(E.which){case F.escape:f&&(f(E),E.preventDefault(),E.stopPropagation());break}},[f]),C=pc();return Ei(C,"keydown",y),g.exports.createElement("div",x({ref:o},He(n,uu),{className:a,role:i,"aria-label":u,"aria-labelledby":l,"aria-describedby":s,onKeyDown:y,style:x({overflowY:m?"scroll":void 0,outline:"none"},d)}),c)});Cm.displayName="Popup";var yo,tC="CalloutContentBase",nC=(yo={},yo[R.top]=_i.slideUpIn10,yo[R.bottom]=_i.slideDownIn10,yo[R.left]=_i.slideLeftIn10,yo[R.right]=_i.slideRightIn10,yo),km={top:0,left:0},rC={opacity:0,filter:"opacity(0)",pointerEvents:"none"},oC=["role","aria-roledescription"],Em={preventDismissOnLostFocus:!1,preventDismissOnScroll:!1,preventDismissOnResize:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:ye.bottomAutoEdge},iC=jn({disableCaching:!0});function aC(e,t,n){var r=e.bounds,o=e.minPagePadding,i=o===void 0?Em.minPagePadding:o,a=e.target,u=g.exports.useState(!1),l=u[0],s=u[1],d=g.exports.useRef(),c=g.exports.useCallback(function(){if(!d.current||l){var m=typeof r=="function"?n?r(a,n):void 0:r;!m&&n&&(m=Y1(t.current,n),m={top:m.top+i,left:m.left+i,right:m.right-i,bottom:m.bottom-i,width:m.width-i*2,height:m.height-i*2}),d.current=m,l&&s(!1)}return d.current},[r,i,a,t,n,l]),f=ho();return Ei(n,"resize",f.debounce(function(){s(!0)},500,{leading:!0})),c}function uC(e,t,n){var r,o=e.calloutMaxHeight,i=e.finalHeight,a=e.directionalHint,u=e.directionalHintFixed,l=e.hidden,s=g.exports.useState(),d=s[0],c=s[1],f=(r=n==null?void 0:n.elementPosition)!==null&&r!==void 0?r:{},m=f.top,y=f.bottom;return g.exports.useEffect(function(){var C,E=(C=t())!==null&&C!==void 0?C:{},v=E.top,p=E.bottom;!o&&!l?typeof m=="number"&&p?c(p-m):typeof y=="number"&&typeof v=="number"&&p&&c(p-v-y):c(o||void 0)},[y,o,i,a,u,t,l,n,m]),d}function lC(e,t,n,r,o){var i=g.exports.useState(),a=i[0],u=i[1],l=g.exports.useRef(0),s=g.exports.useRef(),d=ho(),c=e.hidden,f=e.target,m=e.finalHeight,y=e.calloutMaxHeight,C=e.onPositioned,E=e.directionalHint;return g.exports.useEffect(function(){if(c)u(void 0),l.current=0;else{var v=d.requestAnimationFrame(function(){var p,h;if(t.current&&n){var _=x(x({},e),{target:r.current,bounds:o()}),S=n.cloneNode(!0);S.style.maxHeight=y?""+y:"",S.style.visibility="hidden",(p=n.parentElement)===null||p===void 0||p.appendChild(S);var w=s.current===f?a:void 0,k=m?$1(_,t.current,S,w):V1(_,t.current,S,w);(h=n.parentElement)===null||h===void 0||h.removeChild(S),!a&&k||a&&k&&!fC(a,k)&&l.current<5?(l.current++,u(k)):l.current>0&&(l.current=0,C==null||C(a))}},n);return s.current=f,function(){d.cancelAnimationFrame(v),s.current=void 0}}},[c,E,d,n,y,t,r,m,o,C,a,e,f]),a}function sC(e,t,n){var r=e.hidden,o=e.setInitialFocus,i=ho(),a=!!t;g.exports.useEffect(function(){if(!r&&o&&a&&n){var u=i.requestAnimationFrame(function(){return T0(n)},n);return function(){return i.cancelAnimationFrame(u)}}},[r,a,i,n,o])}function cC(e,t,n,r,o){var i=e.hidden,a=e.onDismiss,u=e.preventDismissOnScroll,l=e.preventDismissOnResize,s=e.preventDismissOnLostFocus,d=e.dismissOnTargetClick,c=e.shouldDismissOnWindowFocus,f=e.preventDismissOnEvent,m=g.exports.useRef(!1),y=ho(),C=hm([function(){m.current=!0},function(){m.current=!1}]),E=!!t;return g.exports.useEffect(function(){var v=function(k){E&&!u&&_(k)},p=function(k){!l&&!(f&&f(k))&&(a==null||a(k))},h=function(k){s||_(k)},_=function(k){var I=k.composedPath?k.composedPath():[],b=I.length>0?I[0]:k.target,D=n.current&&!Kn(n.current,b);if(D&&m.current){m.current=!1;return}if(!r.current&&D||k.target!==o&&D&&(!r.current||"stopPropagation"in r.current||d||b!==r.current&&!Kn(r.current,b))){if(f&&f(k))return;a==null||a(k)}},S=function(k){!c||(f&&!f(k)||!f&&!s)&&!(o!=null&&o.document.hasFocus())&&k.relatedTarget===null&&(a==null||a(k))},w=new Promise(function(k){y.setTimeout(function(){if(!i&&o){var I=[lo(o,"scroll",v,!0),lo(o,"resize",p,!0),lo(o.document.documentElement,"focus",h,!0),lo(o.document.documentElement,"click",h,!0),lo(o,"blur",S,!0)];k(function(){I.forEach(function(b){return b()})})}},0)});return function(){w.then(function(k){return k()})}},[i,y,n,r,o,a,c,d,s,l,u,E,f]),C}var xm=g.exports.memo(g.exports.forwardRef(function(e,t){var n=ic(Em,e),r=n.styles,o=n.style,i=n.ariaLabel,a=n.ariaDescribedBy,u=n.ariaLabelledBy,l=n.className,s=n.isBeakVisible,d=n.children,c=n.beakWidth,f=n.calloutWidth,m=n.calloutMaxWidth,y=n.calloutMinWidth,C=n.doNotLayer,E=n.finalHeight,v=n.hideOverflow,p=v===void 0?!!E:v,h=n.backgroundColor,_=n.calloutMaxHeight,S=n.onScroll,w=n.shouldRestoreFocus,k=w===void 0?!0:w,I=n.target,b=n.hidden,D=n.onLayerMounted,j=n.popupProps,U=g.exports.useRef(null),ae=g.exports.useState(null),G=ae[0],te=ae[1],tt=g.exports.useCallback(function(Ic){te(Ic)},[]),Me=go(U,t),P=_m(n.target,{current:G}),B=P[0],L=P[1],X=aC(n,B,L),O=lC(n,U,G,B,X),ht=uC(n,X,O),nt=cC(n,O,U,B,L),xr=nt[0],Mt=nt[1],_n=(O==null?void 0:O.elementPosition.top)&&(O==null?void 0:O.elementPosition.bottom),Eu=x(x({},O==null?void 0:O.elementPosition),{maxHeight:ht});if(_n&&(Eu.bottom=void 0),sC(n,O,G),g.exports.useEffect(function(){b||D==null||D()},[b]),!L)return null;var _o=p,xu=s&&!!I,Sr=iC(r,{theme:n.theme,className:l,overflowYHidden:_o,calloutWidth:f,positions:O,beakWidth:c,backgroundColor:h,calloutMaxWidth:m,calloutMinWidth:y,doNotLayer:C}),Ni=x(x({maxHeight:_||"100%"},o),_o&&{overflowY:"hidden"}),Co=n.hidden?{visibility:"hidden"}:void 0;return g.exports.createElement("div",{ref:Me,className:Sr.container,style:Co},g.exports.createElement("div",x({},He(n,uu,oC),{className:Ot(Sr.root,O&&O.targetEdge&&nC[O.targetEdge]),style:O?x({},Eu):rC,tabIndex:-1,ref:tt}),xu&&g.exports.createElement("div",{className:Sr.beak,style:dC(O)}),xu&&g.exports.createElement("div",{className:Sr.beakCurtain}),g.exports.createElement(Cm,x({role:n.role,"aria-roledescription":n["aria-roledescription"],ariaDescribedBy:a,ariaLabel:i,ariaLabelledBy:u,className:Sr.calloutMain,onDismiss:n.onDismiss,onMouseDown:xr,onMouseUp:Mt,onRestoreFocus:n.onRestoreFocus,onScroll:S,shouldRestoreFocus:k,style:Ni},j),d)))}),function(e,t){return!t.shouldUpdateWhenHidden&&e.hidden&&t.hidden?!0:$s(e,t)});function dC(e){var t,n,r=x(x({},(t=e==null?void 0:e.beakPosition)===null||t===void 0?void 0:t.elementPosition),{display:!((n=e==null?void 0:e.beakPosition)===null||n===void 0)&&n.hideBeak?"none":void 0});return!r.top&&!r.bottom&&!r.left&&!r.right&&(r.left=km.left,r.top=km.top),r}function fC(e,t){return Sm(e.elementPosition,t.elementPosition)&&Sm(e.beakPosition.elementPosition,t.beakPosition.elementPosition)}function Sm(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=e[n],o=t[n];if(r!==void 0&&o!==void 0){if(r.toFixed(2)!==o.toFixed(2))return!1}else return!1}return!0}xm.displayName=tC;function pC(e){return{height:e,width:e}}var vC={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"},mC=function(e){var t,n=e.theme,r=e.className,o=e.overflowYHidden,i=e.calloutWidth,a=e.beakWidth,u=e.backgroundColor,l=e.calloutMaxWidth,s=e.calloutMinWidth,d=e.doNotLayer,c=kr(vC,n),f=n.semanticColors,m=n.effects;return{container:[c.container,{position:"relative"}],root:[c.root,n.fonts.medium,{position:"absolute",display:"flex",zIndex:d?gi.Layer:void 0,boxSizing:"border-box",borderRadius:m.roundedCorner2,boxShadow:m.elevation16,selectors:(t={},t[W]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},m1(),r,!!i&&{width:i},!!l&&{maxWidth:l},!!s&&{minWidth:s}],beak:[c.beak,{position:"absolute",backgroundColor:f.menuBackground,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},pC(a),u&&{backgroundColor:u}],beakCurtain:[c.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:f.menuBackground,borderRadius:m.roundedCorner2}],calloutMain:[c.calloutMain,{backgroundColor:f.menuBackground,overflowX:"hidden",overflowY:"auto",position:"relative",width:"100%",borderRadius:m.roundedCorner2},o&&{overflowY:"hidden"},u&&{backgroundColor:u}]}},hC=$n(xm,mC,void 0,{scope:"CalloutContent"});const wm=g.exports.createContext(void 0),gC=()=>()=>{};wm.Provider;function yC(){var e;return(e=g.exports.useContext(wm))!==null&&e!==void 0?e:gC}var _C=jn(),CC=xe(function(e,t){return hi(x(x({},e),{rtl:t}))}),kC=function(e){var t=e.theme,n=e.dir,r=qe(t)?"rtl":"ltr",o=qe()?"rtl":"ltr",i=n||r;return{rootDir:i!==r||i!==o?i:n,needsTheme:i!==r}},Im=g.exports.forwardRef(function(e,t){var n=e.className,r=e.theme,o=e.applyTheme,i=e.applyThemeToBody,a=e.styles,u=_C(a,{theme:r,applyTheme:o,className:n}),l=g.exports.useRef(null);return xC(i,u,l),g.exports.createElement(g.exports.Fragment,null,EC(e,u,l,t))});Im.displayName="FabricBase";function EC(e,t,n,r){var o=t.root,i=e.as,a=i===void 0?"div":i,u=e.dir,l=e.theme,s=He(e,uu,["dir"]),d=kC(e),c=d.rootDir,f=d.needsTheme,m=g.exports.createElement(Kv,{providerRef:n},g.exports.createElement(a,x({dir:c},s,{className:o,ref:go(n,r)})));return f&&(m=g.exports.createElement(Q0,{settings:{theme:CC(l,u==="rtl")}},m)),m}function xC(e,t,n){var r=t.bodyThemed;return g.exports.useEffect(function(){if(e){var o=dt(n.current);if(o)return o.body.classList.add(r),function(){o.body.classList.remove(r)}}},[r,e,n]),n}var vc={fontFamily:"inherit"},SC={root:"ms-Fabric",bodyThemed:"ms-Fabric-bodyThemed"},wC=function(e){var t=e.applyTheme,n=e.className,r=e.preventBlanketFontInheritance,o=e.theme,i=kr(SC,o);return{root:[i.root,o.fonts.medium,{color:o.palette.neutralPrimary},!r&&{"& button":vc,"& input":vc,"& textarea":vc},t&&{color:o.semanticColors.bodyText,backgroundColor:o.semanticColors.bodyBackground},n],bodyThemed:[{backgroundColor:o.semanticColors.bodyBackground}]}},IC=$n(Im,wC,void 0,{scope:"Fabric"}),xi={},mc={},Tm="fluent-default-layer-host",TC="#"+Tm;function bC(e,t){xi[e]||(xi[e]=[]),xi[e].push(t);var n=mc[e];if(n)for(var r=0,o=n;r<o.length;r++){var i=o[r];i.notifyLayersChanged()}}function MC(e,t){var n=xi[e];if(n){var r=n.indexOf(t);r>=0&&(n.splice(r,1),n.length===0&&delete xi[e])}var o=mc[e];if(o)for(var i=0,a=o;i<a.length;i++){var u=a[i];u.notifyLayersChanged()}}function PC(e){var t=mc[e];return t&&t[0]||void 0}function DC(e){var t=e.createElement("div");return t.setAttribute("id",Tm),t.style.cssText="position:fixed;z-index:1000000",e==null||e.body.appendChild(t),t}function NC(){return TC}var BC=jn(),bm=g.exports.forwardRef(function(e,t){var n=yC(),r=g.exports.useRef(null),o=go(r,t),i=g.exports.useRef(),a=g.exports.useRef(null),u=g.exports.useState(!1),l=u[0],s=u[1],d=e.children,c=e.className,f=e.eventBubblingEnabled,m=e.fabricProps,y=e.hostId,C=e.insertFirst,E=e.onLayerDidMount,v=E===void 0?function(){}:E,p=e.onLayerMounted,h=p===void 0?function(){}:p,_=e.onLayerWillUnmount,S=e.styles,w=e.theme,k=go(a,m==null?void 0:m.ref),I=BC(S,{theme:w,className:c,isNotHost:!y}),b=function(U){var ae,G;if(y){var te=PC(y);return te?(ae=te.rootRef.current)!==null&&ae!==void 0?ae:null:(G=U.getElementById(y))!==null&&G!==void 0?G:null}else{var tt=NC(),Me=tt?U.querySelector(tt):null;return Me||(Me=DC(U)),Me}},D=function(){_==null||_();var U=i.current;i.current=void 0,U&&U.parentNode&&U.parentNode.removeChild(U)},j=function(){var U,ae=dt(r.current);if(!!ae){var G=b(ae);if(!!G){D();var te=((U=G.ownerDocument)!==null&&U!==void 0?U:ae).createElement("div");te.className=I.root,_0(te),C0(te,r.current),C?G.insertBefore(te,G.firstChild):G.appendChild(te),i.current=te,s(!0)}}};return mi(function(){j(),y&&bC(y,j);var U=i.current?n(i.current):void 0;return function(){U&&U(),D(),y&&MC(y,j)}},[y]),g.exports.useEffect(function(){i.current&&l&&(h==null||h(),v==null||v(),s(!1))},[l,h,v]),g.exports.createElement("span",{className:"ms-layer",ref:o},i.current&&Ru.exports.createPortal(g.exports.createElement(Kv,{layerRoot:!0,providerRef:k},g.exports.createElement(IC,x({},!f&&LC(),m,{className:Ot(I.content,m==null?void 0:m.className),ref:k}),d)),i.current))});bm.displayName="LayerBase";var yu,RC=function(e){e.eventPhase===Event.BUBBLING_PHASE&&e.type!=="mouseenter"&&e.type!=="mouseleave"&&e.type!=="touchstart"&&e.type!=="touchend"&&e.stopPropagation()};function LC(){return yu||(yu={},["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onTouchMove","onTouchStart","onTouchCancel","onTouchEnd","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onInvalid","onSubmit"].forEach(function(e){return yu[e]=RC})),yu}var FC={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"},OC=function(e){var t=e.className,n=e.isNotHost,r=e.theme,o=kr(FC,r);return{root:[o.root,r.fonts.medium,n&&[o.rootNoHost,{position:"fixed",zIndex:gi.Layer,top:0,left:0,bottom:0,right:0,visibility:"hidden"}],t],content:[o.content,{visibility:"visible"}]}},AC=$n(bm,OC,void 0,{scope:"Layer",fields:["hostId","theme","styles"]}),Mm=g.exports.forwardRef(function(e,t){var n=e.layerProps,r=e.doNotLayer,o=no(e,["layerProps","doNotLayer"]),i=g.exports.createElement(hC,x({},o,{doNotLayer:r,ref:t}));return r?i:g.exports.createElement(AC,x({},n),i)});Mm.displayName="Callout";var _u;(function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"})(_u||(_u={}));var Je;(function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none",e[e.centerCover=4]="centerCover",e[e.centerContain=5]="centerContain"})(Je||(Je={}));var Si;(function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"})(Si||(Si={}));var Ke;(function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"})(Ke||(Ke={}));var zC=jn(),HC=/\.svg$/i,UC="fabricImage";function WC(e,t){var n=e.onLoadingStateChange,r=e.onLoad,o=e.onError,i=e.src,a=g.exports.useState(Ke.notLoaded),u=a[0],l=a[1];mi(function(){l(Ke.notLoaded)},[i]),g.exports.useEffect(function(){if(u===Ke.notLoaded){var c=t.current?i&&t.current.naturalWidth>0&&t.current.naturalHeight>0||t.current.complete&&HC.test(i):!1;c&&l(Ke.loaded)}}),g.exports.useEffect(function(){n==null||n(u)},[u]);var s=g.exports.useCallback(function(c){r==null||r(c),i&&l(Ke.loaded)},[i,r]),d=g.exports.useCallback(function(c){o==null||o(c),l(Ke.error)},[o]);return[u,s,d]}var Pm=g.exports.forwardRef(function(e,t){var n=g.exports.useRef(),r=g.exports.useRef(),o=WC(e,r),i=o[0],a=o[1],u=o[2],l=He(e,o_,["width","height"]),s=e.src,d=e.alt,c=e.width,f=e.height,m=e.shouldFadeIn,y=m===void 0?!0:m,C=e.shouldStartVisible,E=e.className,v=e.imageFit,p=e.role,h=e.maximizeFrame,_=e.styles,S=e.theme,w=e.loading,k=KC(e,i,r,n),I=zC(_,{theme:S,className:E,width:c,height:f,maximizeFrame:h,shouldFadeIn:y,shouldStartVisible:C,isLoaded:i===Ke.loaded||i===Ke.notLoaded&&e.shouldStartVisible,isLandscape:k===Si.landscape,isCenter:v===Je.center,isCenterContain:v===Je.centerContain,isCenterCover:v===Je.centerCover,isContain:v===Je.contain,isCover:v===Je.cover,isNone:v===Je.none,isError:i===Ke.error,isNotImageFit:v===void 0});return g.exports.createElement("div",{className:I.root,style:{width:c,height:f},ref:n},g.exports.createElement("img",x({},l,{onLoad:a,onError:u,key:UC+e.src||"",className:I.image,ref:go(r,t),src:s,alt:d,role:p,loading:w})))});Pm.displayName="ImageBase";function KC(e,t,n,r){var o=g.exports.useRef(t),i=g.exports.useRef();return(i===void 0||o.current===Ke.notLoaded&&t===Ke.loaded)&&(i.current=jC(e,t,n,r)),o.current=t,i.current}function jC(e,t,n,r){var o=e.imageFit,i=e.width,a=e.height;if(e.coverStyle!==void 0)return e.coverStyle;if(t===Ke.loaded&&(o===Je.cover||o===Je.contain||o===Je.centerContain||o===Je.centerCover)&&n.current&&r.current){var u=void 0;typeof i=="number"&&typeof a=="number"&&o!==Je.centerContain&&o!==Je.centerCover?u=i/a:u=r.current.clientWidth/r.current.clientHeight;var l=n.current.naturalWidth/n.current.naturalHeight;if(l>u)return Si.landscape}return Si.portrait}var VC={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageCenterContain:"ms-Image-image--centerContain",imageCenterCover:"ms-Image-image--centerCover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"},$C=function(e){var t=e.className,n=e.width,r=e.height,o=e.maximizeFrame,i=e.isLoaded,a=e.shouldFadeIn,u=e.shouldStartVisible,l=e.isLandscape,s=e.isCenter,d=e.isContain,c=e.isCover,f=e.isCenterContain,m=e.isCenterCover,y=e.isNone,C=e.isError,E=e.isNotImageFit,v=e.theme,p=kr(VC,v),h={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"},_=he(),S=_!==void 0&&_.navigator.msMaxTouchPoints===void 0,w=d&&l||c&&!l?{width:"100%",height:"auto"}:{width:"auto",height:"100%"};return{root:[p.root,v.fonts.medium,{overflow:"hidden"},o&&[p.rootMaximizeFrame,{height:"100%",width:"100%"}],i&&a&&!u&&_i.fadeIn400,(s||d||c||f||m)&&{position:"relative"},t],image:[p.image,{display:"block",opacity:0},i&&["is-loaded",{opacity:1}],s&&[p.imageCenter,h],d&&[p.imageContain,S&&{width:"100%",height:"100%",objectFit:"contain"},!S&&w,!S&&h],c&&[p.imageCover,S&&{width:"100%",height:"100%",objectFit:"cover"},!S&&w,!S&&h],f&&[p.imageCenterContain,l&&{maxWidth:"100%"},!l&&{maxHeight:"100%"},h],m&&[p.imageCenterCover,l&&{maxHeight:"100%"},!l&&{maxWidth:"100%"},h],y&&[p.imageNone,{width:"auto",height:"auto"}],E&&[!!n&&!r&&{height:"auto",width:"100%"},!n&&!!r&&{height:"100%",width:"auto"},!!n&&!!r&&{height:"100%",width:"100%"}],l&&p.imageLandscape,!l&&p.imagePortrait,!i&&"is-notLoaded",a&&"is-fadeIn",C&&"is-error"]}},hc=$n(Pm,$C,void 0,{scope:"Image"},!0);hc.displayName="Image";var Er=fi({root:{display:"inline-block"},placeholder:["ms-Icon-placeHolder",{width:"1em"}],image:["ms-Icon-imageContainer",{overflow:"hidden"}]}),Dm="ms-Icon",GC=function(e){var t=e.className,n=e.iconClassName,r=e.isPlaceholder,o=e.isImage,i=e.styles;return{root:[r&&Er.placeholder,Er.root,o&&Er.image,n,t,i&&i.root,i&&i.imageContainer]}},Nm=xe(function(e){var t=x_(e)||{subset:{},code:void 0},n=t.code,r=t.subset;return n?{children:n,iconClassName:r.className,fontFamily:r.fontFace&&r.fontFace.fontFamily,mergeImageProps:r.mergeImageProps}:null},void 0,!0),gc=function(e){var t=e.iconName,n=e.className,r=e.style,o=r===void 0?{}:r,i=Nm(t)||{},a=i.iconClassName,u=i.children,l=i.fontFamily,s=i.mergeImageProps,d=He(e,ge),c=e["aria-label"]||e.title,f=e["aria-label"]||e["aria-labelledby"]||e.title?{role:s?void 0:"img"}:{"aria-hidden":!0},m=u;return s&&typeof u=="object"&&typeof u.props=="object"&&c&&(m=g.exports.cloneElement(u,{alt:c})),g.exports.createElement("i",x({"data-icon-name":t},f,d,s?{title:void 0,"aria-label":void 0}:{},{className:Ot(Dm,Er.root,a,!t&&Er.placeholder,n),style:x({fontFamily:l},o)}),m)};xe(function(e,t,n){return gc({iconName:e,className:t,"aria-label":n})});var QC=jn({cacheSize:100}),YC=function(e){ct(t,e);function t(n){var r=e.call(this,n)||this;return r._onImageLoadingStateChange=function(o){r.props.imageProps&&r.props.imageProps.onLoadingStateChange&&r.props.imageProps.onLoadingStateChange(o),o===Ke.error&&r.setState({imageLoadError:!0})},r.state={imageLoadError:!1},r}return t.prototype.render=function(){var n=this.props,r=n.children,o=n.className,i=n.styles,a=n.iconName,u=n.imageErrorAs,l=n.theme,s=typeof a=="string"&&a.length===0,d=!!this.props.imageProps||this.props.iconType===_u.image||this.props.iconType===_u.Image,c=Nm(a)||{},f=c.iconClassName,m=c.children,y=c.mergeImageProps,C=QC(i,{theme:l,className:o,iconClassName:f,isImage:d,isPlaceholder:s}),E=d?"span":"i",v=He(this.props,ge,["aria-label"]),p=this.state.imageLoadError,h=x(x({},this.props.imageProps),{onLoadingStateChange:this._onImageLoadingStateChange}),_=p&&u||hc,S=this.props["aria-label"]||this.props.ariaLabel,w=h.alt||S||this.props.title,k=!!(w||this.props["aria-labelledby"]||h["aria-label"]||h["aria-labelledby"]),I=k?{role:d||y?void 0:"img","aria-label":d||y?void 0:w}:{"aria-hidden":!0},b=m;return y&&m&&typeof m=="object"&&w&&(b=g.exports.cloneElement(m,{alt:w})),g.exports.createElement(E,x({"data-icon-name":a},I,v,y?{title:void 0,"aria-label":void 0}:{},{className:C.root}),d?g.exports.createElement(_,x({},h)):r||b)},t}(g.exports.Component),wi=$n(YC,GC,void 0,{scope:"Icon"},!0);wi.displayName="Icon";var XC=function(e){var t=e.className,n=e.imageProps,r=He(e,ge,["aria-label","aria-labelledby","title","aria-describedby"]),o=n.alt||e["aria-label"],i=o||e["aria-labelledby"]||e.title||n["aria-label"]||n["aria-labelledby"]||n.title,a={"aria-labelledby":e["aria-labelledby"],"aria-describedby":e["aria-describedby"],title:e.title},u=i?{}:{"aria-hidden":!0};return g.exports.createElement("div",x({},u,r,{className:Ot(Dm,Er.root,Er.image,t)}),g.exports.createElement(hc,x({},a,n,{alt:i?o:""})))},yc={none:0,all:1,inputOnly:2},je;(function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional",e[e.domOrder=3]="domOrder"})(je||(je={}));var Cu="data-is-focusable",qC="data-disable-click-on-enter",_c="data-focuszone-id",Yt="tabindex",Cc="data-no-vertical-wrap",kc="data-no-horizontal-wrap",Ec=999999999,Ii=-999999999,xc,ZC="ms-FocusZone";function JC(e,t){var n;typeof MouseEvent=="function"?n=new MouseEvent("click",{ctrlKey:t==null?void 0:t.ctrlKey,metaKey:t==null?void 0:t.metaKey,shiftKey:t==null?void 0:t.shiftKey,altKey:t==null?void 0:t.altKey,bubbles:t==null?void 0:t.bubbles,cancelable:t==null?void 0:t.cancelable}):(n=document.createEvent("MouseEvents"),n.initMouseEvent("click",t?t.bubbles:!1,t?t.cancelable:!1,window,0,0,0,0,0,t?t.ctrlKey:!1,t?t.altKey:!1,t?t.shiftKey:!1,t?t.metaKey:!1,0,null)),e.dispatchEvent(n)}function ek(){return xc||(xc=dn({selectors:{":focus":{outline:"none"}}},ZC)),xc}var Ti={},ku=new Set,tk=["text","number","password","email","tel","url","search","textarea"],gn=!1,nk=function(e){ct(t,e);function t(n){var r,o,i,a,u=e.call(this,n)||this;u._root=g.exports.createRef(),u._mergedRef=Yv(),u._onFocus=function(s){if(!u._portalContainsElement(s.target)){var d=u.props,c=d.onActiveElementChanged,f=d.doNotAllowFocusEventToPropagate,m=d.stopFocusPropagation,y=d.onFocusNotification,C=d.onFocus,E=d.shouldFocusInnerElementWhenReceivedFocus,v=d.defaultTabbableElement,p=u._isImmediateDescendantOfZone(s.target),h;if(p)h=s.target;else for(var _=s.target;_&&_!==u._root.current;){if(Qt(_)&&u._isImmediateDescendantOfZone(_)){h=_;break}_=Gt(_,gn)}if(E&&s.target===u._root.current){var S=v&&typeof v=="function"&&u._root.current&&v(u._root.current);S&&Qt(S)?(h=S,S.focus()):(u.focus(!0),u._activeElement&&(h=null))}var w=!u._activeElement;h&&h!==u._activeElement&&((p||w)&&u._setFocusAlignment(h,!0,!0),u._activeElement=h,w&&u._updateTabIndexes()),c&&c(u._activeElement,s),(m||f)&&s.stopPropagation(),C?C(s):y&&y()}},u._onBlur=function(){u._setParkedFocus(!1)},u._onMouseDown=function(s){if(!u._portalContainsElement(s.target)){var d=u.props.disabled;if(!d){for(var c=s.target,f=[];c&&c!==u._root.current;)f.push(c),c=Gt(c,gn);for(;f.length&&(c=f.pop(),c&&Qt(c)&&u._setActiveElement(c,!0),!vn(c)););}}},u._onKeyDown=function(s,d){if(!u._portalContainsElement(s.target)){var c=u.props,f=c.direction,m=c.disabled,y=c.isInnerZoneKeystroke,C=c.pagingSupportDisabled,E=c.shouldEnterInnerZone;if(!m&&(u.props.onKeyDown&&u.props.onKeyDown(s),!s.isDefaultPrevented()&&!(u._getDocument().activeElement===u._root.current&&u._isInnerZone))){if((E&&E(s)||y&&y(s))&&u._isImmediateDescendantOfZone(s.target)){var v=u._getFirstInnerZone();if(v){if(!v.focus(!0))return}else if(ec(s.target)){if(!u.focusElement(pt(s.target,s.target.firstChild,!0)))return}else return}else{if(s.altKey)return;switch(s.which){case F.space:if(u._shouldRaiseClicksOnSpace&&u._tryInvokeClickForFocusable(s.target,s))break;return;case F.left:if(f!==je.vertical&&(u._preventDefaultWhenHandled(s),u._moveFocusLeft(d)))break;return;case F.right:if(f!==je.vertical&&(u._preventDefaultWhenHandled(s),u._moveFocusRight(d)))break;return;case F.up:if(f!==je.horizontal&&(u._preventDefaultWhenHandled(s),u._moveFocusUp()))break;return;case F.down:if(f!==je.horizontal&&(u._preventDefaultWhenHandled(s),u._moveFocusDown()))break;return;case F.pageDown:if(!C&&u._moveFocusPaging(!0))break;return;case F.pageUp:if(!C&&u._moveFocusPaging(!1))break;return;case F.tab:if(u.props.allowTabKey||u.props.handleTabKey===yc.all||u.props.handleTabKey===yc.inputOnly&&u._isElementInput(s.target)){var p=!1;if(u._processingTabKey=!0,f===je.vertical||!u._shouldWrapFocus(u._activeElement,kc))p=s.shiftKey?u._moveFocusUp():u._moveFocusDown();else{var h=qe(d)?!s.shiftKey:s.shiftKey;p=h?u._moveFocusLeft(d):u._moveFocusRight(d)}if(u._processingTabKey=!1,p)break;u.props.shouldResetActiveElementWhenTabFromZone&&(u._activeElement=null)}return;case F.home:if(u._isContentEditableElement(s.target)||u._isElementInput(s.target)&&!u._shouldInputLoseFocus(s.target,!1))return!1;var _=u._root.current&&u._root.current.firstChild;if(u._root.current&&_&&u.focusElement(pt(u._root.current,_,!0)))break;return;case F.end:if(u._isContentEditableElement(s.target)||u._isElementInput(s.target)&&!u._shouldInputLoseFocus(s.target,!0))return!1;var S=u._root.current&&u._root.current.lastChild;if(u._root.current&&u.focusElement(ft(u._root.current,S,!0,!0,!0)))break;return;case F.enter:if(u._shouldRaiseClicksOnEnter&&u._tryInvokeClickForFocusable(s.target,s))break;return;default:return}}s.preventDefault(),s.stopPropagation()}}},u._getHorizontalDistanceFromCenter=function(s,d,c){var f=u._focusAlignment.left||u._focusAlignment.x||0,m=Math.floor(c.top),y=Math.floor(d.bottom),C=Math.floor(c.bottom),E=Math.floor(d.top),v=s&&m>y,p=!s&&C<E;return v||p?f>=c.left&&f<=c.left+c.width?0:Math.abs(c.left+c.width/2-f):u._shouldWrapFocus(u._activeElement,Cc)?Ec:Ii},lu(u),u._id=mn("FocusZone"),u._focusAlignment={left:0,top:0},u._processingTabKey=!1;var l=(o=(r=n.shouldRaiseClicks)!==null&&r!==void 0?r:t.defaultProps.shouldRaiseClicks)!==null&&o!==void 0?o:!0;return u._shouldRaiseClicksOnEnter=(i=n.shouldRaiseClicksOnEnter)!==null&&i!==void 0?i:l,u._shouldRaiseClicksOnSpace=(a=n.shouldRaiseClicksOnSpace)!==null&&a!==void 0?a:l,u}return t.getOuterZones=function(){return ku.size},t._onKeyDownCapture=function(n){n.which===F.tab&&ku.forEach(function(r){return r._updateTabIndexes()})},t.prototype.componentDidMount=function(){var n=this._root.current;if(Ti[this._id]=this,n){for(var r=Gt(n,gn);r&&r!==this._getDocument().body&&r.nodeType===1;){if(vn(r)){this._isInnerZone=!0;break}r=Gt(r,gn)}this._isInnerZone||(ku.add(this),this._root.current&&this._root.current.addEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.addEventListener("blur",this._onBlur,!0),this._updateTabIndexes(),this.props.defaultTabbableElement&&typeof this.props.defaultTabbableElement=="string"?this._activeElement=this._getDocument().querySelector(this.props.defaultTabbableElement):this.props.defaultActiveElement&&(this._activeElement=this._getDocument().querySelector(this.props.defaultActiveElement)),this.props.shouldFocusOnMount&&this.focus()}},t.prototype.componentDidUpdate=function(){var n=this._root.current,r=this._getDocument();if((this._activeElement&&!Kn(this._root.current,this._activeElement,gn)||this._defaultFocusElement&&!Kn(this._root.current,this._defaultFocusElement,gn))&&(this._activeElement=null,this._defaultFocusElement=null,this._updateTabIndexes()),!this.props.preventFocusRestoration&&r&&this._lastIndexPath&&(r.activeElement===r.body||r.activeElement===null||r.activeElement===n)){var o=P0(n,this._lastIndexPath);o?(this._setActiveElement(o,!0),o.focus(),this._setParkedFocus(!1)):this._setParkedFocus(!0)}},t.prototype.componentWillUnmount=function(){delete Ti[this._id],this._isInnerZone||(ku.delete(this),this._root.current&&this._root.current.removeEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.removeEventListener("blur",this._onBlur,!0),this._activeElement=null,this._defaultFocusElement=null},t.prototype.render=function(){var n=this,r=this.props,o=r.as,i=r.elementType,a=r.rootProps,u=r.ariaDescribedBy,l=r.ariaLabelledBy,s=r.className,d=He(this.props,ge),c=o||i||"div";this._evaluateFocusBeforeRender();var f=S1();return g.exports.createElement(c,x({"aria-labelledby":l,"aria-describedby":u},d,a,{className:Ot(ek(),s),ref:this._mergedRef(this.props.elementRef,this._root),"data-focuszone-id":this._id,onKeyDown:function(m){return n._onKeyDown(m,f)},onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},t.prototype.focus=function(n,r){if(n===void 0&&(n=!1),r===void 0&&(r=!1),this._root.current)if(!n&&this._root.current.getAttribute(Cu)==="true"&&this._isInnerZone){var o=this._getOwnerZone(this._root.current);if(o!==this._root.current){var i=Ti[o.getAttribute(_c)];return!!i&&i.focusElement(this._root.current)}return!1}else{if(!n&&this._activeElement&&Kn(this._root.current,this._activeElement)&&Qt(this._activeElement)&&(!r||xv(this._activeElement)))return this._activeElement.focus(),!0;var a=this._root.current.firstChild;return this.focusElement(pt(this._root.current,a,!0,void 0,void 0,void 0,void 0,void 0,r))}return!1},t.prototype.focusLast=function(){if(this._root.current){var n=this._root.current&&this._root.current.lastChild;return this.focusElement(ft(this._root.current,n,!0,!0,!0))}return!1},t.prototype.focusElement=function(n,r){var o=this.props,i=o.onBeforeFocus,a=o.shouldReceiveFocus;return a&&!a(n)||i&&!i(n)?!1:n?(this._setActiveElement(n,r),this._activeElement&&this._activeElement.focus(),!0):!1},t.prototype.setFocusAlignment=function(n){this._focusAlignment=n},Object.defineProperty(t.prototype,"defaultFocusElement",{get:function(){return this._defaultFocusElement},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"activeElement",{get:function(){return this._activeElement},enumerable:!1,configurable:!0}),t.prototype._evaluateFocusBeforeRender=function(){var n=this._root.current,r=this._getDocument();if(r){var o=r.activeElement;if(o!==n){var i=Kn(n,o,!1);this._lastIndexPath=i?D0(n,o):void 0}}},t.prototype._setParkedFocus=function(n){var r=this._root.current;r&&this._isParked!==n&&(this._isParked=n,n?(this.props.allowFocusRoot||(this._parkedTabIndex=r.getAttribute("tabindex"),r.setAttribute("tabindex","-1")),r.focus()):this.props.allowFocusRoot||(this._parkedTabIndex?(r.setAttribute("tabindex",this._parkedTabIndex),this._parkedTabIndex=void 0):r.removeAttribute("tabindex")))},t.prototype._setActiveElement=function(n,r){var o=this._activeElement;this._activeElement=n,o&&(vn(o)&&this._updateTabIndexes(o),o.tabIndex=-1),this._activeElement&&((!this._focusAlignment||r)&&this._setFocusAlignment(n,!0,!0),this._activeElement.tabIndex=0)},t.prototype._preventDefaultWhenHandled=function(n){this.props.preventDefaultWhenHandled&&n.preventDefault()},t.prototype._tryInvokeClickForFocusable=function(n,r){var o=n;if(o===this._root.current)return!1;do{if(o.tagName==="BUTTON"||o.tagName==="A"||o.tagName==="INPUT"||o.tagName==="TEXTAREA"||o.tagName==="SUMMARY")return!1;if(this._isImmediateDescendantOfZone(o)&&o.getAttribute(Cu)==="true"&&o.getAttribute(qC)!=="true")return JC(o,r),!0;o=Gt(o,gn)}while(o!==this._root.current);return!1},t.prototype._getFirstInnerZone=function(n){if(n=n||this._activeElement||this._root.current,!n)return null;if(vn(n))return Ti[n.getAttribute(_c)];for(var r=n.firstElementChild;r;){if(vn(r))return Ti[r.getAttribute(_c)];var o=this._getFirstInnerZone(r);if(o)return o;r=r.nextElementSibling}return null},t.prototype._moveFocus=function(n,r,o,i){i===void 0&&(i=!0);var a=this._activeElement,u=-1,l=void 0,s=!1,d=this.props.direction===je.bidirectional;if(!a||!this._root.current||this._isElementInput(a)&&!this._shouldInputLoseFocus(a,n))return!1;var c=d?a.getBoundingClientRect():null;do if(a=n?pt(this._root.current,a):ft(this._root.current,a),d){if(a){var f=a.getBoundingClientRect(),m=r(c,f);if(m===-1&&u===-1){l=a;break}if(m>-1&&(u===-1||m<u)&&(u=m,l=a),u>=0&&m<0)break}}else{l=a;break}while(a);if(l&&l!==this._activeElement)s=!0,this.focusElement(l);else if(this.props.isCircularNavigation&&i)return n?this.focusElement(pt(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(ft(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return s},t.prototype._moveFocusDown=function(){var n=this,r=-1,o=this._focusAlignment.left||this._focusAlignment.x||0;return this._moveFocus(!0,function(i,a){var u=-1,l=Math.floor(a.top),s=Math.floor(i.bottom);return l<s?n._shouldWrapFocus(n._activeElement,Cc)?Ec:Ii:((r===-1&&l>=s||l===r)&&(r=l,o>=a.left&&o<=a.left+a.width?u=0:u=Math.abs(a.left+a.width/2-o)),u)})?(this._setFocusAlignment(this._activeElement,!1,!0),!0):!1},t.prototype._moveFocusUp=function(){var n=this,r=-1,o=this._focusAlignment.left||this._focusAlignment.x||0;return this._moveFocus(!1,function(i,a){var u=-1,l=Math.floor(a.bottom),s=Math.floor(a.top),d=Math.floor(i.top);return l>d?n._shouldWrapFocus(n._activeElement,Cc)?Ec:Ii:((r===-1&&l<=d||s===r)&&(r=s,o>=a.left&&o<=a.left+a.width?u=0:u=Math.abs(a.left+a.width/2-o)),u)})?(this._setFocusAlignment(this._activeElement,!1,!0),!0):!1},t.prototype._moveFocusLeft=function(n){var r=this,o=this._shouldWrapFocus(this._activeElement,kc);return this._moveFocus(qe(n),function(i,a){var u=-1,l;return qe(n)?l=parseFloat(a.top.toFixed(3))<parseFloat(i.bottom.toFixed(3)):l=parseFloat(a.bottom.toFixed(3))>parseFloat(i.top.toFixed(3)),l&&a.right<=i.right&&r.props.direction!==je.vertical?u=i.right-a.right:o||(u=Ii),u},void 0,o)?(this._setFocusAlignment(this._activeElement,!0,!1),!0):!1},t.prototype._moveFocusRight=function(n){var r=this,o=this._shouldWrapFocus(this._activeElement,kc);return this._moveFocus(!qe(n),function(i,a){var u=-1,l;return qe(n)?l=parseFloat(a.bottom.toFixed(3))>parseFloat(i.top.toFixed(3)):l=parseFloat(a.top.toFixed(3))<parseFloat(i.bottom.toFixed(3)),l&&a.left>=i.left&&r.props.direction!==je.vertical?u=a.left-i.left:o||(u=Ii),u},void 0,o)?(this._setFocusAlignment(this._activeElement,!0,!1),!0):!1},t.prototype._moveFocusPaging=function(n,r){r===void 0&&(r=!0);var o=this._activeElement;if(!o||!this._root.current||this._isElementInput(o)&&!this._shouldInputLoseFocus(o,n))return!1;var i=i0(o);if(!i)return!1;var a=-1,u=void 0,l=-1,s=-1,d=i.clientHeight,c=o.getBoundingClientRect();do if(o=n?pt(this._root.current,o):ft(this._root.current,o),o){var f=o.getBoundingClientRect(),m=Math.floor(f.top),y=Math.floor(c.bottom),C=Math.floor(f.bottom),E=Math.floor(c.top),v=this._getHorizontalDistanceFromCenter(n,c,f),p=n&&m>y+d,h=!n&&C<E-d;if(p||h)break;v>-1&&(n&&m>l?(l=m,a=v,u=o):!n&&C<s?(s=C,a=v,u=o):(a===-1||v<=a)&&(a=v,u=o))}while(o);var _=!1;if(u&&u!==this._activeElement)_=!0,this.focusElement(u),this._setFocusAlignment(u,!1,!0);else if(this.props.isCircularNavigation&&r)return n?this.focusElement(pt(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(ft(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return _},t.prototype._setFocusAlignment=function(n,r,o){if(this.props.direction===je.bidirectional&&(!this._focusAlignment||r||o)){var i=n.getBoundingClientRect(),a=i.left+i.width/2,u=i.top+i.height/2;this._focusAlignment||(this._focusAlignment={left:a,top:u}),r&&(this._focusAlignment.left=a),o&&(this._focusAlignment.top=u)}},t.prototype._isImmediateDescendantOfZone=function(n){return this._getOwnerZone(n)===this._root.current},t.prototype._getOwnerZone=function(n){for(var r=Gt(n,gn);r&&r!==this._root.current&&r!==this._getDocument().body;){if(vn(r))return r;r=Gt(r,gn)}return r},t.prototype._updateTabIndexes=function(n){!this._activeElement&&this.props.defaultTabbableElement&&typeof this.props.defaultTabbableElement=="function"&&(this._activeElement=this.props.defaultTabbableElement(this._root.current)),!n&&this._root.current&&(this._defaultFocusElement=null,n=this._root.current,this._activeElement&&!Kn(n,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!Qt(this._activeElement)&&(this._activeElement=null);for(var r=n&&n.children,o=0;r&&o<r.length;o++){var i=r[o];vn(i)?i.getAttribute(Cu)==="true"&&(!this._isInnerZone&&(!this._activeElement&&!this._defaultFocusElement||this._activeElement===i)?(this._defaultFocusElement=i,i.getAttribute(Yt)!=="0"&&i.setAttribute(Yt,"0")):i.getAttribute(Yt)!=="-1"&&i.setAttribute(Yt,"-1")):(i.getAttribute&&i.getAttribute(Cu)==="false"&&i.setAttribute(Yt,"-1"),Qt(i)?this.props.disabled?i.setAttribute(Yt,"-1"):!this._isInnerZone&&(!this._activeElement&&!this._defaultFocusElement||this._activeElement===i)?(this._defaultFocusElement=i,i.getAttribute(Yt)!=="0"&&i.setAttribute(Yt,"0")):i.getAttribute(Yt)!=="-1"&&i.setAttribute(Yt,"-1"):i.tagName==="svg"&&i.getAttribute("focusable")!=="false"&&i.setAttribute("focusable","false")),this._updateTabIndexes(i)}},t.prototype._isContentEditableElement=function(n){return n&&n.getAttribute("contenteditable")==="true"},t.prototype._isElementInput=function(n){return!!(n&&n.tagName&&(n.tagName.toLowerCase()==="input"||n.tagName.toLowerCase()==="textarea"))},t.prototype._shouldInputLoseFocus=function(n,r){if(!this._processingTabKey&&n&&n.type&&tk.indexOf(n.type.toLowerCase())>-1){var o=n.selectionStart,i=n.selectionEnd,a=o!==i,u=n.value,l=n.readOnly;if(a||o>0&&!r&&!l||o!==u.length&&r&&!l||!!this.props.handleTabKey&&!(this.props.shouldInputLoseFocusOnArrowKey&&this.props.shouldInputLoseFocusOnArrowKey(n)))return!1}return!0},t.prototype._shouldWrapFocus=function(n,r){return this.props.checkForNoWrap?Sv(n,r):!0},t.prototype._portalContainsElement=function(n){return n&&!!this._root.current&&Ev(n,this._root.current)},t.prototype._getDocument=function(){return dt(this._root.current)},t.defaultProps={isCircularNavigation:!1,direction:je.bidirectional,shouldRaiseClicks:!0},t}(g.exports.Component),et;(function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"})(et||(et={}));function bi(e){return e.canCheck?!!(e.isChecked||e.checked):typeof e.isChecked=="boolean"?e.isChecked:typeof e.checked=="boolean"?e.checked:null}function yn(e){return!!(e.subMenuProps||e.items)}function Xt(e){return!!(e.isDisabled||e.disabled)}function Bm(e){var t=bi(e),n=t!==null;return n?"menuitemcheckbox":"menuitem"}var Rm=function(e){var t=e.item,n=e.classNames,r=t.iconProps;return g.exports.createElement(wi,x({},r,{className:n.icon}))},rk=function(e){var t=e.item,n=e.hasIcons;return n?t.onRenderIcon?t.onRenderIcon(e,Rm):Rm(e):null},ok=function(e){var t=e.onCheckmarkClick,n=e.item,r=e.classNames,o=bi(n);if(t){var i=function(a){return t(n,a)};return g.exports.createElement(wi,{iconName:n.canCheck!==!1&&o?"CheckMark":"",className:r.checkmarkIcon,onClick:i})}return null},ik=function(e){var t=e.item,n=e.classNames;return t.text||t.name?g.exports.createElement("span",{className:n.label},t.text||t.name):null},ak=function(e){var t=e.item,n=e.classNames;return t.secondaryText?g.exports.createElement("span",{className:n.secondaryText},t.secondaryText):null},uk=function(e){var t=e.item,n=e.classNames,r=e.theme;return yn(t)?g.exports.createElement(wi,x({iconName:qe(r)?"ChevronLeft":"ChevronRight"},t.submenuIconProps,{className:n.subMenuIcon})):null},lk=function(e){ct(t,e);function t(n){var r=e.call(this,n)||this;return r.openSubMenu=function(){var o=r.props,i=o.item,a=o.openSubMenu,u=o.getSubmenuTarget;if(u){var l=u();yn(i)&&a&&l&&a(i,l)}},r.dismissSubMenu=function(){var o=r.props,i=o.item,a=o.dismissSubMenu;yn(i)&&a&&a()},r.dismissMenu=function(o){var i=r.props.dismissMenu;i&&i(void 0,o)},lu(r),r}return t.prototype.render=function(){var n=this.props,r=n.item,o=n.classNames,i=r.onRenderContent||this._renderLayout;return g.exports.createElement("div",{className:r.split?o.linkContentMenu:o.linkContent},i(this.props,{renderCheckMarkIcon:ok,renderItemIcon:rk,renderItemName:ik,renderSecondaryText:ak,renderSubMenuIcon:uk}))},t.prototype._renderLayout=function(n,r){return g.exports.createElement(g.exports.Fragment,null,r.renderCheckMarkIcon(n),r.renderItemIcon(n),r.renderItemName(n),r.renderSecondaryText(n),r.renderSubMenuIcon(n))},t}(g.exports.Component),sk=xe(function(e){return fi({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})}),Xn=36,Lm=nm(0,tm),ck=xe(function(e){var t,n,r,o,i,a=e.semanticColors,u=e.fonts,l=e.palette,s=a.menuItemBackgroundHovered,d=a.menuItemTextHovered,c=a.menuItemBackgroundPressed,f=a.bodyDivider,m={item:[u.medium,{color:a.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:f,position:"relative"},root:[fo(e),u.medium,{color:a.bodyText,backgroundColor:"transparent",border:"none",width:"100%",height:Xn,lineHeight:Xn,display:"block",cursor:"pointer",padding:"0px 8px 0 4px",textAlign:"left"}],rootDisabled:{color:a.disabledBodyText,cursor:"default",pointerEvents:"none",selectors:(t={},t[W]={color:"GrayText",opacity:1},t)},rootHovered:{backgroundColor:s,color:d,selectors:{".ms-ContextualMenu-icon":{color:l.themeDarkAlt},".ms-ContextualMenu-submenuIcon":{color:l.neutralPrimary}}},rootFocused:{backgroundColor:l.white},rootChecked:{selectors:{".ms-ContextualMenu-checkmarkIcon":{color:l.neutralPrimary}}},rootPressed:{backgroundColor:c,selectors:{".ms-ContextualMenu-icon":{color:l.themeDark},".ms-ContextualMenu-submenuIcon":{color:l.neutralPrimary}}},rootExpanded:{backgroundColor:c,color:a.bodyTextChecked,selectors:(n={".ms-ContextualMenu-submenuIcon":(r={},r[W]={color:"inherit"},r)},n[W]=x({},Cr()),n)},linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 8px 0 4px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},secondaryText:{color:e.palette.neutralSecondary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:Xn,fontSize:Yn.medium,width:Yn.medium,margin:"0 4px",verticalAlign:"middle",flexShrink:"0",selectors:(o={},o[Lm]={fontSize:Yn.large,width:Yn.large},o)},iconColor:{color:a.menuIcon},iconDisabled:{color:a.disabledBodyText},checkmarkIcon:{color:a.bodySubtext},subMenuIcon:{height:Xn,lineHeight:Xn,color:l.neutralSecondary,textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:Yn.small,selectors:(i={":hover":{color:l.neutralPrimary},":active":{color:l.neutralPrimary}},i[Lm]={fontSize:Yn.medium},i)},splitButtonFlexContainer:[fo(e),{display:"flex",height:Xn,flexWrap:"nowrap",justifyContent:"center",alignItems:"flex-start"}]};return pr(m)}),Fm="28px",dk=nm(0,tm),fk=xe(function(e){var t;return fi(sk(e),{wrapper:{position:"absolute",right:28,selectors:(t={},t[dk]={right:32},t)},divider:{height:16,width:1}})}),pk={item:"ms-ContextualMenu-item",divider:"ms-ContextualMenu-divider",root:"ms-ContextualMenu-link",isChecked:"is-checked",isExpanded:"is-expanded",isDisabled:"is-disabled",linkContent:"ms-ContextualMenu-linkContent",linkContentMenu:"ms-ContextualMenu-linkContent",icon:"ms-ContextualMenu-icon",iconColor:"ms-ContextualMenu-iconColor",checkmarkIcon:"ms-ContextualMenu-checkmarkIcon",subMenuIcon:"ms-ContextualMenu-submenuIcon",label:"ms-ContextualMenu-itemText",secondaryText:"ms-ContextualMenu-secondaryText",splitMenu:"ms-ContextualMenu-splitMenu",screenReaderText:"ms-ContextualMenu-screenReaderText"},vk=xe(function(e,t,n,r,o,i,a,u,l,s,d,c){var f,m,y,C,E=ck(e),v=kr(pk,e);return fi({item:[v.item,E.item,a],divider:[v.divider,E.divider,u],root:[v.root,E.root,r&&[v.isChecked,E.rootChecked],o&&E.anchorLink,n&&[v.isExpanded,E.rootExpanded],t&&[v.isDisabled,E.rootDisabled],!t&&!n&&[{selectors:(f={":hover":E.rootHovered,":active":E.rootPressed},f["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,f["."+Ue+" &:hover"]={background:"inherit;"},f)}],c],splitPrimary:[E.root,{width:"calc(100% - "+Fm+")"},r&&["is-checked",E.rootChecked],(t||d)&&["is-disabled",E.rootDisabled],!(t||d)&&!r&&[{selectors:(m={":hover":E.rootHovered},m[":hover ~ ."+v.splitMenu]=E.rootHovered,m[":active"]=E.rootPressed,m["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,m["."+Ue+" &:hover"]={background:"inherit;"},m)}]],splitMenu:[v.splitMenu,E.root,{flexBasis:"0",padding:"0 8px",minWidth:Fm},n&&["is-expanded",E.rootExpanded],t&&["is-disabled",E.rootDisabled],!t&&!n&&[{selectors:(y={":hover":E.rootHovered,":active":E.rootPressed},y["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,y["."+Ue+" &:hover"]={background:"inherit;"},y)}]],anchorLink:E.anchorLink,linkContent:[v.linkContent,E.linkContent],linkContentMenu:[v.linkContentMenu,E.linkContent,{justifyContent:"center"}],icon:[v.icon,i&&E.iconColor,E.icon,l,t&&[v.isDisabled,E.iconDisabled]],iconColor:E.iconColor,checkmarkIcon:[v.checkmarkIcon,i&&E.checkmarkIcon,E.icon,l],subMenuIcon:[v.subMenuIcon,E.subMenuIcon,s,n&&{color:e.palette.neutralPrimary},t&&[E.iconDisabled]],label:[v.label,E.label],secondaryText:[v.secondaryText,E.secondaryText],splitContainer:[E.splitButtonFlexContainer,!t&&!r&&[{selectors:(C={},C["."+Ue+" &:focus, ."+Ue+" &:focus:hover"]=E.rootFocused,C)}]],screenReaderText:[v.screenReaderText,E.screenReaderText,om,{visibility:"hidden"}]})}),Om=function(e){var t=e.theme,n=e.disabled,r=e.expanded,o=e.checked,i=e.isAnchorLink,a=e.knownIcon,u=e.itemClassName,l=e.dividerClassName,s=e.iconClassName,d=e.subMenuClassName,c=e.primaryDisabled,f=e.className;return vk(t,n,r,o,i,a,u,l,s,d,c,f)},Mi=$n(lk,Om,void 0,{scope:"ContextualMenuItem"}),Sc=function(e){ct(t,e);function t(n){var r=e.call(this,n)||this;return r._onItemMouseEnter=function(o){var i=r.props,a=i.item,u=i.onItemMouseEnter;u&&u(a,o,o.currentTarget)},r._onItemClick=function(o){var i=r.props,a=i.item,u=i.onItemClickBase;u&&u(a,o,o.currentTarget)},r._onItemMouseLeave=function(o){var i=r.props,a=i.item,u=i.onItemMouseLeave;u&&u(a,o)},r._onItemKeyDown=function(o){var i=r.props,a=i.item,u=i.onItemKeyDown;u&&u(a,o)},r._onItemMouseMove=function(o){var i=r.props,a=i.item,u=i.onItemMouseMove;u&&u(a,o,o.currentTarget)},r._getSubmenuTarget=function(){},lu(r),r}return t.prototype.shouldComponentUpdate=function(n){return!$s(n,this.props)},t}(g.exports.Component),mk="ktp",Am="-",hk="data-ktp-target",gk="data-ktp-execute-target",yk="ktp-layer-id",qt;(function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"})(qt||(qt={}));var _k=function(){function e(){this.keytips={},this.persistedKeytips={},this.sequenceMapping={},this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0,this.delayUpdatingKeytipChange=!1}return e.getInstance=function(){return this._instance},e.prototype.init=function(t){this.delayUpdatingKeytipChange=t},e.prototype.register=function(t,n){n===void 0&&(n=!1);var r=t;n||(r=this.addParentOverflow(t),this.sequenceMapping[r.keySequences.toString()]=r);var o=this._getUniqueKtp(r);if(n?this.persistedKeytips[o.uniqueID]=o:this.keytips[o.uniqueID]=o,this.inKeytipMode||!this.delayUpdatingKeytipChange){var i=n?qt.PERSISTED_KEYTIP_ADDED:qt.KEYTIP_ADDED;fn.raise(this,i,{keytip:r,uniqueID:o.uniqueID})}return o.uniqueID},e.prototype.update=function(t,n){var r=this.addParentOverflow(t),o=this._getUniqueKtp(r,n),i=this.keytips[n];i&&(o.keytip.visible=i.keytip.visible,this.keytips[n]=o,delete this.sequenceMapping[i.keytip.keySequences.toString()],this.sequenceMapping[o.keytip.keySequences.toString()]=o.keytip,(this.inKeytipMode||!this.delayUpdatingKeytipChange)&&fn.raise(this,qt.KEYTIP_UPDATED,{keytip:o.keytip,uniqueID:o.uniqueID}))},e.prototype.unregister=function(t,n,r){r===void 0&&(r=!1),r?delete this.persistedKeytips[n]:delete this.keytips[n],!r&&delete this.sequenceMapping[t.keySequences.toString()];var o=r?qt.PERSISTED_KEYTIP_REMOVED:qt.KEYTIP_REMOVED;(this.inKeytipMode||!this.delayUpdatingKeytipChange)&&fn.raise(this,o,{keytip:t,uniqueID:n})},e.prototype.enterKeytipMode=function(){fn.raise(this,qt.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){fn.raise(this,qt.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){var t=this;return Object.keys(this.keytips).map(function(n){return t.keytips[n].keytip})},e.prototype.addParentOverflow=function(t){var n=cn([],t.keySequences);if(n.pop(),n.length!==0){var r=this.sequenceMapping[n.toString()];if(r&&r.overflowSetSequence)return x(x({},t),{overflowSetSequence:r.overflowSetSequence})}return t},e.prototype.menuExecute=function(t,n){fn.raise(this,qt.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:t,keytipSequences:n})},e.prototype._getUniqueKtp=function(t,n){return n===void 0&&(n=mn()),{keytip:x({},t),uniqueID:n}},e._instance=new e,e}();function zm(e){return e.reduce(function(t,n){return t+Am+n.split("").join(Am)},mk)}function Ck(e,t){var n=t.length,r=cn([],t).pop(),o=cn([],e);return f0(o,n-1,r)}function kk(e){var t=" "+yk;return e.length?t+" "+zm(e):t}function Ek(e){var t=g.exports.useRef(),n=e.keytipProps?x({disabled:e.disabled},e.keytipProps):void 0,r=hm(_k.getInstance()),o=ym(e);mi(function(){t.current&&n&&((o==null?void 0:o.keytipProps)!==e.keytipProps||(o==null?void 0:o.disabled)!==e.disabled)&&r.update(n,t.current)}),mi(function(){return n&&(t.current=r.register(n)),function(){n&&r.unregister(n,t.current)}},[]);var i={ariaDescribedBy:void 0,keytipId:void 0};return n&&(i=xk(r,n,e.ariaDescribedBy)),i}function xk(e,t,n){var r=e.addParentOverflow(t),o=pi(n,kk(r.keySequences)),i=cn([],r.keySequences);r.overflowSetSequence&&(i=Ck(i,r.overflowSetSequence));var a=zm(i);return{ariaDescribedBy:o,keytipId:a}}var Pi=function(e){var t,n=e.children,r=no(e,["children"]),o=Ek(r),i=o.keytipId,a=o.ariaDescribedBy;return n((t={},t[hk]=i,t[gk]=i,t["aria-describedby"]=a,t))},Sk=function(e){ct(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n._anchor=g.exports.createRef(),n._getMemoizedMenuButtonKeytipProps=xe(function(r){return x(x({},r),{hasMenu:!0})}),n._getSubmenuTarget=function(){return n._anchor.current?n._anchor.current:void 0},n._onItemClick=function(r){var o=n.props,i=o.item,a=o.onItemClick;a&&a(i,r)},n._renderAriaDescription=function(r,o){return r?g.exports.createElement("span",{id:n._ariaDescriptionId,className:o},r):null},n}return t.prototype.render=function(){var n=this,r=this.props,o=r.item,i=r.classNames,a=r.index,u=r.focusableElementIndex,l=r.totalItemCount,s=r.hasCheckmarks,d=r.hasIcons,c=r.contextualMenuItemAs,f=c===void 0?Mi:c,m=r.expandedMenuItemKey,y=r.onItemClick,C=r.openSubMenu,E=r.dismissSubMenu,v=r.dismissMenu,p=o.rel;o.target&&o.target.toLowerCase()==="_blank"&&(p=p||"nofollow noopener noreferrer");var h=yn(o),_=He(o,Dv),S=Xt(o),w=o.itemProps,k=o.ariaDescription,I=o.keytipProps;I&&h&&(I=this._getMemoizedMenuButtonKeytipProps(I)),k&&(this._ariaDescriptionId=mn());var b=pi(o.ariaDescribedBy,k?this._ariaDescriptionId:void 0,_["aria-describedby"]),D={"aria-describedby":b};return g.exports.createElement("div",null,g.exports.createElement(Pi,{keytipProps:o.keytipProps,ariaDescribedBy:b,disabled:S},function(j){return g.exports.createElement("a",x({},D,_,j,{ref:n._anchor,href:o.href,target:o.target,rel:p,className:i.root,role:"menuitem","aria-haspopup":h||void 0,"aria-expanded":h?o.key===m:void 0,"aria-posinset":u+1,"aria-setsize":l,"aria-disabled":Xt(o),style:o.style,onClick:n._onItemClick,onMouseEnter:n._onItemMouseEnter,onMouseLeave:n._onItemMouseLeave,onMouseMove:n._onItemMouseMove,onKeyDown:h?n._onItemKeyDown:void 0}),g.exports.createElement(f,x({componentRef:o.componentRef,item:o,classNames:i,index:a,onCheckmarkClick:s&&y?y:void 0,hasIcons:d,openSubMenu:C,dismissSubMenu:E,dismissMenu:v,getSubmenuTarget:n._getSubmenuTarget},w)),n._renderAriaDescription(k,i.screenReaderText))}))},t}(Sc),wk=function(e){ct(t,e);function t(){var n=e!==null&&e.apply(this,arguments)||this;return n._btn=g.exports.createRef(),n._getMemoizedMenuButtonKeytipProps=xe(function(r){return x(x({},r),{hasMenu:!0})}),n._renderAriaDescription=function(r,o){return r?g.exports.createElement("span",{id:n._ariaDescriptionId,className:o},r):null},n._getSubmenuTarget=function(){return n._btn.current?n._btn.current:void 0},n}return t.prototype.render=function(){var n=this,r=this.props,o=r.item,i=r.classNames,a=r.index,u=r.focusableElementIndex,l=r.totalItemCount,s=r.hasCheckmarks,d=r.hasIcons,c=r.contextualMenuItemAs,f=c===void 0?Mi:c,m=r.expandedMenuItemKey,y=r.onItemMouseDown,C=r.onItemClick,E=r.openSubMenu,v=r.dismissSubMenu,p=r.dismissMenu,h=bi(o),_=h!==null,S=Bm(o),w=yn(o),k=o.itemProps,I=o.ariaLabel,b=o.ariaDescription,D=He(o,mr);delete D.disabled;var j=o.role||S;b&&(this._ariaDescriptionId=mn());var U=pi(o.ariaDescribedBy,b?this._ariaDescriptionId:void 0,D["aria-describedby"]),ae={className:i.root,onClick:this._onItemClick,onKeyDown:w?this._onItemKeyDown:void 0,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(te){return y?y(o,te):void 0},onMouseMove:this._onItemMouseMove,href:o.href,title:o.title,"aria-label":I,"aria-describedby":U,"aria-haspopup":w||void 0,"aria-expanded":w?o.key===m:void 0,"aria-posinset":u+1,"aria-setsize":l,"aria-disabled":Xt(o),"aria-checked":(j==="menuitemcheckbox"||j==="menuitemradio")&&_?!!h:void 0,"aria-selected":j==="menuitem"&&_?!!h:void 0,role:j,style:o.style},G=o.keytipProps;return G&&w&&(G=this._getMemoizedMenuButtonKeytipProps(G)),g.exports.createElement(Pi,{keytipProps:G,ariaDescribedBy:U,disabled:Xt(o)},function(te){return g.exports.createElement("button",x({ref:n._btn},D,ae,te),g.exports.createElement(f,x({componentRef:o.componentRef,item:o,classNames:i,index:a,onCheckmarkClick:s&&C?C:void 0,hasIcons:d,openSubMenu:E,dismissSubMenu:v,dismissMenu:p,getSubmenuTarget:n._getSubmenuTarget},k)),n._renderAriaDescription(b,i.screenReaderText))})},t}(Sc),Ik=function(e){var t=e.theme,n=e.getClassNames,r=e.className;if(!t)throw new Error("Theme is undefined or null.");if(n){var o=n(t);return{wrapper:[o.wrapper],divider:[o.divider]}}return{wrapper:[{display:"inline-flex",height:"100%",alignItems:"center"},r],divider:[{width:1,height:"100%",backgroundColor:t.palette.neutralTertiaryAlt}]}},Tk=jn(),Hm=g.exports.forwardRef(function(e,t){var n=e.styles,r=e.theme,o=e.getClassNames,i=e.className,a=Tk(n,{theme:r,getClassNames:o,className:i});return g.exports.createElement("span",{className:a.wrapper,ref:t},g.exports.createElement("span",{className:a.divider}))});Hm.displayName="VerticalDividerBase";var bk=$n(Hm,Ik,void 0,{scope:"VerticalDivider"}),Mk=500,Pk=function(e){ct(t,e);function t(n){var r=e.call(this,n)||this;return r._getMemoizedMenuButtonKeytipProps=xe(function(o){return x(x({},o),{hasMenu:!0})}),r._onItemKeyDown=function(o){var i=r.props,a=i.item,u=i.onItemKeyDown;o.which===F.enter?(r._executeItemClick(o),o.preventDefault(),o.stopPropagation()):u&&u(a,o)},r._getSubmenuTarget=function(){return r._splitButton},r._renderAriaDescription=function(o,i){return o?g.exports.createElement("span",{id:r._ariaDescriptionId,className:i},o):null},r._onItemMouseEnterPrimary=function(o){var i=r.props,a=i.item,u=i.onItemMouseEnter;u&&u(x(x({},a),{subMenuProps:void 0,items:void 0}),o,r._splitButton)},r._onItemMouseEnterIcon=function(o){var i=r.props,a=i.item,u=i.onItemMouseEnter;u&&u(a,o,r._splitButton)},r._onItemMouseMovePrimary=function(o){var i=r.props,a=i.item,u=i.onItemMouseMove;u&&u(x(x({},a),{subMenuProps:void 0,items:void 0}),o,r._splitButton)},r._onItemMouseMoveIcon=function(o){var i=r.props,a=i.item,u=i.onItemMouseMove;u&&u(a,o,r._splitButton)},r._onIconItemClick=function(o){var i=r.props,a=i.item,u=i.onItemClickBase;u&&u(a,o,r._splitButton?r._splitButton:o.currentTarget)},r._executeItemClick=function(o){var i=r.props,a=i.item,u=i.executeItemClick,l=i.onItemClick;if(!(a.disabled||a.isDisabled)){if(r._processingTouch&&l)return l(a,o);u&&u(a,o)}},r._onTouchStart=function(o){r._splitButton&&!("onpointerdown"in r._splitButton)&&r._handleTouchAndPointerEvent(o)},r._onPointerDown=function(o){o.pointerType==="touch"&&(r._handleTouchAndPointerEvent(o),o.preventDefault(),o.stopImmediatePropagation())},r._async=new Za(r),r._events=new fn(r),r}return t.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.render=function(){var n=this,r=this.props,o=r.item,i=r.classNames,a=r.index,u=r.focusableElementIndex,l=r.totalItemCount,s=r.hasCheckmarks,d=r.hasIcons,c=r.onItemMouseLeave,f=r.expandedMenuItemKey,m=yn(o),y=o.keytipProps;y&&(y=this._getMemoizedMenuButtonKeytipProps(y));var C=o.ariaDescription;return C&&(this._ariaDescriptionId=mn()),g.exports.createElement(Pi,{keytipProps:y,disabled:Xt(o)},function(E){return g.exports.createElement("div",{"data-ktp-target":E["data-ktp-target"],ref:function(v){return n._splitButton=v},role:Bm(o),"aria-label":o.ariaLabel,className:i.splitContainer,"aria-disabled":Xt(o),"aria-expanded":m?o.key===f:void 0,"aria-haspopup":!0,"aria-describedby":pi(o.ariaDescribedBy,C?n._ariaDescriptionId:void 0,E["aria-describedby"]),"aria-checked":o.isChecked||o.checked,"aria-posinset":u+1,"aria-setsize":l,onMouseEnter:n._onItemMouseEnterPrimary,onMouseLeave:c?c.bind(n,x(x({},o),{subMenuProps:null,items:null})):void 0,onMouseMove:n._onItemMouseMovePrimary,onKeyDown:n._onItemKeyDown,onClick:n._executeItemClick,onTouchStart:n._onTouchStart,tabIndex:0,"data-is-focusable":!0,"aria-roledescription":o["aria-roledescription"]},n._renderSplitPrimaryButton(o,i,a,s,d),n._renderSplitDivider(o),n._renderSplitIconButton(o,i,a,E),n._renderAriaDescription(C,i.screenReaderText))})},t.prototype._renderSplitPrimaryButton=function(n,r,o,i,a){var u=this.props,l=u.contextualMenuItemAs,s=l===void 0?Mi:l,d=u.onItemClick,c={key:n.key,disabled:Xt(n)||n.primaryDisabled,name:n.name,text:n.text||n.name,secondaryText:n.secondaryText,className:r.splitPrimary,canCheck:n.canCheck,isChecked:n.isChecked,checked:n.checked,iconProps:n.iconProps,onRenderIcon:n.onRenderIcon,data:n.data,"data-is-focusable":!1},f=n.itemProps;return g.exports.createElement("button",x({},He(c,mr)),g.exports.createElement(s,x({"data-is-focusable":!1,item:c,classNames:r,index:o,onCheckmarkClick:i&&d?d:void 0,hasIcons:a},f)))},t.prototype._renderSplitDivider=function(n){var r=n.getSplitButtonVerticalDividerClassNames||fk;return g.exports.createElement(bk,{getClassNames:r})},t.prototype._renderSplitIconButton=function(n,r,o,i){var a=this.props,u=a.contextualMenuItemAs,l=u===void 0?Mi:u,s=a.onItemMouseLeave,d=a.onItemMouseDown,c=a.openSubMenu,f=a.dismissSubMenu,m=a.dismissMenu,y={onClick:this._onIconItemClick,disabled:Xt(n),className:r.splitMenu,subMenuProps:n.subMenuProps,submenuIconProps:n.submenuIconProps,split:!0,key:n.key},C=x(x({},He(y,mr)),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:s?s.bind(this,n):void 0,onMouseDown:function(v){return d?d(n,v):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":i["data-ktp-execute-target"],"aria-hidden":!0}),E=n.itemProps;return g.exports.createElement("button",x({},C),g.exports.createElement(l,x({componentRef:n.componentRef,item:y,classNames:r,index:o,hasIcons:!1,openSubMenu:c,dismissSubMenu:f,dismissMenu:m,getSubmenuTarget:this._getSubmenuTarget},E)))},t.prototype._handleTouchAndPointerEvent=function(n){var r=this,o=this.props.onTap;o&&o(n),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout(function(){r._processingTouch=!1,r._lastTouchTimeoutId=void 0},Mk)},t}(Sc),Di;(function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge",e[e.unknown=999]="unknown"})(Di||(Di={}));var Dk=[479,639,1023,1365,1919,99999999],Um;function Wm(){var e;return(e=Um)!==null&&e!==void 0?e:Di.large}function Nk(e){try{return e.document.documentElement.clientWidth}catch{return e.innerWidth}}function Bk(e){var t=Di.small;if(e){try{for(;Nk(e)>Dk[t];)t++}catch{t=Wm()}Um=t}else throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");return t}var Rk=function(e,t){var n=g.exports.useState(Wm()),r=n[0],o=n[1],i=g.exports.useCallback(function(){var u=Bk(he(e.current));r!==u&&o(u)},[e,r]),a=pc();return Ei(a,"resize",i),g.exports.useEffect(function(){t===void 0&&i()},[t]),t!=null?t:r},Lk=g.exports.createContext({}),Fk=jn(),Ok=jn(),Ak={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:ye.bottomAutoEdge,beakWidth:16};function Km(e,t){var n=t==null?void 0:t.target,r=e.subMenuProps?e.subMenuProps.items:e.items;if(r){for(var o=[],i=0,a=r;i<a.length;i++){var u=a[i];if(u.preferMenuTargetAsEventTarget){var l=u.onClick,s=no(u,["onClick"]);o.push(x(x({},s),{onClick:Xm(l,n)}))}else o.push(u)}return o}}function zk(e){return e.some(function(t){return!!(t.canCheck||t.sectionProps&&t.sectionProps.items.some(function(n){return n.canCheck===!0}))})}var jm=250,Vm="ContextualMenu",Hk=xe(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(n){return vv.apply(void 0,cn([n,Om],e))}});function Uk(e,t){var n=e.hidden,r=n===void 0?!1:n,o=e.onMenuDismissed,i=e.onMenuOpened,a=ym(r),u=g.exports.useRef(i),l=g.exports.useRef(o),s=g.exports.useRef(e);u.current=i,l.current=o,s.current=e,g.exports.useEffect(function(){var d,c;r&&a===!1?(d=l.current)===null||d===void 0||d.call(l,s.current):!r&&a!==!1&&((c=u.current)===null||c===void 0||c.call(u,s.current))},[r,a]),g.exports.useEffect(function(){return function(){var d;return(d=l.current)===null||d===void 0?void 0:d.call(l,s.current)}},[])}function Wk(e,t){var n=e.hidden,r=e.items,o=e.theme,i=e.className,a=e.id,u=e.target,l=g.exports.useState(),s=l[0],d=l[1],c=g.exports.useState(),f=c[0],m=c[1],y=g.exports.useState(),C=y[0],E=y[1],v=gm(Vm,a),p=g.exports.useCallback(function(){E(void 0),d(void 0),m(void 0)},[]),h=g.exports.useCallback(function(w,k,I){var b=w.key;s!==b&&(k.focus(),E(I),d(b),m(k))},[s]);g.exports.useEffect(function(){n&&p()},[n,p]);var _=Gk(t,p),S=function(){var w=Ym(s,r),k=null;if(w&&(k={items:Km(w,{target:u}),target:f,onDismiss:_,isSubMenu:!0,id:v,shouldFocusOnMount:!0,shouldFocusOnContainer:C,directionalHint:qe(o)?ye.leftTopEdge:ye.rightTopEdge,className:i,gapSpace:0,isBeakVisible:!1},w.subMenuProps&&vr(k,w.subMenuProps),w.preferMenuTargetAsEventTarget)){var I=w.onItemClick;k.onItemClick=Xm(I,u)}return k};return[s,h,S,_]}function Kk(e){var t=e.delayUpdateFocusOnHover,n=e.hidden,r=g.exports.useRef(!t),o=g.exports.useRef(!1);g.exports.useEffect(function(){r.current=!t,o.current=n?!1:!t&&o.current},[t,n]);var i=g.exports.useCallback(function(){t&&(r.current=!1)},[t]);return[r,o,i]}function jk(e,t,n){var r=e.hidden,o=e.onRestoreFocus,i=g.exports.useRef(),a=g.exports.useCallback(function(u){var l,s;o?o(u):u!=null&&u.documentContainsFocus&&((s=(l=i.current)===null||l===void 0?void 0:l.focus)===null||s===void 0||s.call(l))},[o]);return mi(function(){var u,l;if(r)i.current&&(a({originalElement:i.current,containsFocus:!0,documentContainsFocus:((l=dt())===null||l===void 0?void 0:l.hasFocus())||!1}),i.current=void 0);else{var s=t==null?void 0:t.document.activeElement;!(!((u=n.current)===null||u===void 0)&&u.contains(s))&&s.tagName!=="BODY"&&(i.current=s)}},[r,t==null?void 0:t.document.activeElement,a,n]),[a]}function Vk(e,t,n,r){var o=e.theme,i=e.isSubMenu,a=e.focusZoneProps,u=a===void 0?{}:a,l=u.checkForNoWrap,s=u.direction,d=s===void 0?je.vertical:s,c=g.exports.useRef(),f=function(_,S,w){var k=!1;return S(_)&&(t(_,w),_.preventDefault(),_.stopPropagation(),k=!0),k},m=function(_){var S=qe(o)?F.right:F.left;return _.which!==S||!i?!1:!!(d===je.vertical||l&&!Sv(_.target,"data-no-horizontal-wrap"))},y=function(_){return _.which===F.escape||m(_)||_.which===F.up&&(_.altKey||_.metaKey)},C=function(_){c.current=Gm(_);var S=_.which===F.escape&&(Qv()||Gv());return f(_,y,S)},E=function(_){var S=c.current&&Gm(_);return c.current=!1,!!S&&!(Gv()||Qv())},v=function(_){return f(_,E,!0)},p=function(_){var S=C(_);if(!(S||!n.current)){var w=!!(_.altKey||_.metaKey),k=_.which===F.up,I=_.which===F.down;if(!w&&(k||I)){var b=k?I0(n.current,n.current.lastChild,!0):w0(n.current,n.current.firstChild,!0);b&&(b.focus(),_.preventDefault(),_.stopPropagation())}}},h=function(_,S){var w=qe(o)?F.left:F.right;!_.disabled&&(S.which===w||S.which===F.enter||S.which===F.down&&(S.altKey||S.metaKey))&&(r(_,S.currentTarget),S.preventDefault())};return[C,v,p,h]}function $k(e){var t=g.exports.useRef(!0),n=g.exports.useRef(),r=function(){!t.current&&n.current!==void 0?(e.clearTimeout(n.current),n.current=void 0):t.current=!1,n.current=e.setTimeout(function(){t.current=!0},jm)};return[r,t]}function Gk(e,t){var n=g.exports.useRef(!1);g.exports.useEffect(function(){return n.current=!0,function(){n.current=!1}},[]);var r=function(o,i){i?e(o,i):n.current&&t()};return r}function Qk(e,t){var n=e.subMenuHoverDelay,r=n===void 0?jm:n,o=g.exports.useRef(void 0),i=function(){o.current!==void 0&&(t.clearTimeout(o.current),o.current=void 0)},a=function(u){o.current=t.setTimeout(function(){u(),i()},r)};return[i,a,o]}function Yk(e,t,n,r,o,i,a,u,l,s,d,c,f){var m=e.target,y=function(k,I,b){o.current&&(i.current=!0),!E()&&p(k,I,b)},C=function(k,I,b){var D=I.currentTarget;if(o.current)i.current=!0;else return;!t.current||n.current!==void 0||D===(r==null?void 0:r.document.activeElement)||p(k,I,b)},E=function(){return!t.current||!i.current},v=function(k,I){var b;if(!E()&&(s(),a===void 0))if(u.current.setActive)try{u.current.setActive()}catch{}else(b=u.current)===null||b===void 0||b.focus()},p=function(k,I,b){var D=b||I.currentTarget;k.key!==a&&(s(),a===void 0&&D.focus(),yn(k)?(I.stopPropagation(),l(function(){D.focus(),d(k,D,!0)})):l(function(){c(I),D.focus()}))},h=function(k,I){_(k,I,I.currentTarget)},_=function(k,I,b){var D=Km(k,{target:m});if(s(),!yn(k)&&(!D||!D.length))w(k,I);else if(k.key!==a){var j=typeof e.shouldFocusOnContainer=="boolean"?e.shouldFocusOnContainer:I.nativeEvent.pointerType==="mouse";d(k,b,j)}I.stopPropagation(),I.preventDefault()},S=function(k,I){w(k,I),I.stopPropagation()},w=function(k,I){if(!(k.disabled||k.isDisabled)){k.preferMenuTargetAsEventTarget&&qm(I,m);var b=!1;k.onClick?b=!!k.onClick(I,k):e.onItemClick&&(b=!!e.onItemClick(I,k)),(b||!I.defaultPrevented)&&f(I,!0)}};return[y,C,v,h,S,w,_]}var $m=g.exports.memo(g.exports.forwardRef(function(e,t){var n,r=ic(Ak,e);r.ref;var o=no(r,["ref"]),i=g.exports.useRef(null),a=ho(),u=gm(Vm,o.id),l=function(M,z){var q;return(q=o.onDismiss)===null||q===void 0?void 0:q.call(o,M,z)},s=_m(o.target,i),d=s[0],c=s[1],f=jk(o,c,i)[0],m=Wk(o,l),y=m[0],C=m[1],E=m[2],v=m[3],p=Kk(o),h=p[0],_=p[1],S=p[2],w=$k(a),k=w[0],I=w[1],b=Qk(o,a),D=b[0],j=b[1],U=b[2],ae=Rk(i,o.responsiveMode);Uk(o);var G=Vk(o,l,i,C),te=G[0],tt=G[1],Me=G[2],P=G[3],B=Yk(o,I,U,c,h,_,y,i,j,D,C,v,l),L=B[0],X=B[1],O=B[2],ht=B[3],nt=B[4],xr=B[5],Mt=B[6],_n=function(M,z,q){var Z=0,Ve=M.items,rt=M.totalItemCount,Q=M.hasCheckmarks,gt=M.hasIcons;return g.exports.createElement("ul",{className:z.list,onKeyDown:te,onKeyUp:tt,role:"presentation"},Ve.map(function(de,yt){var Zt=_o(de,yt,Z,rt,Q,gt,z);if(de.itemType!==et.Divider&&de.itemType!==et.Header){var wr=de.customOnRenderListLength?de.customOnRenderListLength:1;Z+=wr}return Zt}))},Eu=function(M,z){var q=o.focusZoneAs,Z=q===void 0?nk:q;return g.exports.createElement(Z,x({},z),M)},_o=function(M,z,q,Z,Ve,rt,Q){var gt,de=[],yt=M.iconProps||{iconName:"None"},Zt=M.getItemClassNames,wr=M.itemProps,Iu=wr?wr.styles:void 0,Tu=M.itemType===et.Divider?M.className:void 0,Bi=M.submenuIconProps?M.submenuIconProps.className:"",Cn;if(Zt)Cn=Zt(o.theme,Xt(M),y===M.key,!!bi(M),!!M.href,yt.iconName!=="None",M.className,Tu,yt.className,Bi,M.primaryDisabled);else{var AE={theme:o.theme,disabled:Xt(M),expanded:y===M.key,checked:!!bi(M),isAnchorLink:!!M.href,knownIcon:yt.iconName!=="None",itemClassName:M.className,dividerClassName:Tu,iconClassName:yt.className,subMenuClassName:Bi,primaryDisabled:M.primaryDisabled};Cn=Ok(Hk((gt=Q.subComponentStyles)===null||gt===void 0?void 0:gt.menuItem,Iu),AE)}switch((M.text==="-"||M.name==="-")&&(M.itemType=et.Divider),M.itemType){case et.Divider:de.push(Co(z,Cn));break;case et.Header:de.push(Co(z,Cn));var zE=oh(M,Cn,Q,z,Ve,rt);de.push(Ni(zE,M.key||z,Cn,M.title));break;case et.Section:de.push(Sr(M,Cn,Q,z,Ve,rt));break;default:var Ch=function(){return Ic(M,Cn,z,q,Z,Ve,rt)},HE=o.onRenderContextualMenuItem?o.onRenderContextualMenuItem(M,Ch):Ch();de.push(Ni(HE,M.key||z,Cn,M.title));break}return g.exports.createElement(g.exports.Fragment,{key:M.key},de)},xu=function(M,z){var q=M.index,Z=M.focusableElementIndex,Ve=M.totalItemCount,rt=M.hasCheckmarks,Q=M.hasIcons;return _o(M,q,Z,Ve,rt,Q,z)},Sr=function(M,z,q,Z,Ve,rt){var Q=M.sectionProps;if(!!Q){var gt,de;if(Q.title){var yt=void 0,Zt="";if(typeof Q.title=="string"){var wr=u+Q.title.replace(/\s/g,"");yt={key:"section-"+Q.title+"-title",itemType:et.Header,text:Q.title,id:wr},Zt=wr}else{var Iu=Q.title.id||u+Q.title.key.replace(/\s/g,"");yt=x(x({},Q.title),{id:Iu}),Zt=Iu}yt&&(de={role:"group","aria-labelledby":Zt},gt=oh(yt,z,q,Z,Ve,rt))}if(Q.items&&Q.items.length>0)return g.exports.createElement("li",{role:"presentation",key:Q.key||M.key||"section-"+Z},g.exports.createElement("div",x({},de),g.exports.createElement("ul",{className:q.list,role:"presentation"},Q.topDivider&&Co(Z,z,!0,!0),gt&&Ni(gt,M.key||Z,z,M.title),Q.items.map(function(Tu,Bi){return _o(Tu,Bi,Bi,Q.items.length,Ve,rt,q)}),Q.bottomDivider&&Co(Z,z,!1,!0))))}},Ni=function(M,z,q,Z){return g.exports.createElement("li",{role:"presentation",title:Z,key:z,className:q.item},M)},Co=function(M,z,q,Z){return Z||M>0?g.exports.createElement("li",{role:"separator",key:"separator-"+M+(q===void 0?"":q?"-top":"-bottom"),className:z.divider,"aria-hidden":"true"}):null},Ic=function(M,z,q,Z,Ve,rt,Q){if(M.onRender)return M.onRender(x({"aria-posinset":Z+1,"aria-setsize":Ve},M),l);var gt=o.contextualMenuItemAs,de={item:M,classNames:z,index:q,focusableElementIndex:Z,totalItemCount:Ve,hasCheckmarks:rt,hasIcons:Q,contextualMenuItemAs:gt,onItemMouseEnter:L,onItemMouseLeave:O,onItemMouseMove:X,onItemMouseDown:Xk,executeItemClick:xr,onItemKeyDown:P,expandedMenuItemKey:y,openSubMenu:C,dismissSubMenu:v,dismissMenu:l};return M.href?g.exports.createElement(Sk,x({},de,{onItemClick:nt})):M.split&&yn(M)?g.exports.createElement(Pk,x({},de,{onItemClick:ht,onItemClickBase:Mt,onTap:D})):g.exports.createElement(wk,x({},de,{onItemClick:ht,onItemClickBase:Mt}))},oh=function(M,z,q,Z,Ve,rt){var Q=o.contextualMenuItemAs,gt=Q===void 0?Mi:Q,de=M.itemProps,yt=M.id,Zt=de&&He(de,uu);return g.exports.createElement("div",x({id:yt,className:q.header},Zt,{style:M.style}),g.exports.createElement(gt,x({item:M,classNames:z,index:Z,onCheckmarkClick:Ve?ht:void 0,hasIcons:rt},de)))},Su=o.isBeakVisible,qn=o.items,ih=o.labelElementId,mE=o.id,ah=o.className,hE=o.beakWidth,gE=o.directionalHint,yE=o.directionalHintForRTL,_E=o.alignTargetEdge,CE=o.gapSpace,kE=o.coverTarget,uh=o.ariaLabel,EE=o.doNotLayer,xE=o.target,SE=o.bounds,lh=o.useTargetWidth,sh=o.useTargetAsMinWidth,wE=o.directionalHintFixed,IE=o.shouldFocusOnMount,TE=o.shouldFocusOnContainer,ch=o.title,bE=o.styles,dh=o.theme,Tc=o.calloutProps,fh=o.onRenderSubMenu,ME=fh===void 0?Qm:fh,ph=o.onRenderMenuList,PE=ph===void 0?function(M,z){return _n(M,Zn)}:ph,DE=o.focusZoneProps,vh=o.getMenuClassNames,Zn=vh?vh(dh,ah):Fk(bE,{theme:dh,className:ah}),NE=mh(qn);function mh(M){for(var z=0,q=M;z<q.length;z++){var Z=q[z];if(Z.iconProps||Z.itemType===et.Section&&Z.sectionProps&&mh(Z.sectionProps.items))return!0}return!1}var BE=x(x({direction:je.vertical,handleTabKey:yc.all,isCircularNavigation:!0},DE),{className:Ot(Zn.root,(n=o.focusZoneProps)===null||n===void 0?void 0:n.className)}),RE=zk(qn),hh=y&&o.hidden!==!0?E():null;Su=Su===void 0?ae<=Di.medium:Su;var bc,Mc=d.current;if((lh||sh)&&Mc&&Mc.offsetWidth){var LE=Mc.getBoundingClientRect(),gh=LE.width-2;lh?bc={width:gh}:sh&&(bc={minWidth:gh})}if(qn&&qn.length>0){for(var yh=0,Pc=0,_h=qn;Pc<_h.length;Pc++){var wu=_h[Pc];if(wu.itemType!==et.Divider&&wu.itemType!==et.Header){var FE=wu.customOnRenderListLength?wu.customOnRenderListLength:1;yh+=FE}}var OE=Zn.subComponentStyles?Zn.subComponentStyles.callout:void 0;return g.exports.createElement(Lk.Consumer,null,function(M){return g.exports.createElement(Mm,x({styles:OE,onRestoreFocus:f},Tc,{target:xE||M.target,isBeakVisible:Su,beakWidth:hE,directionalHint:gE,directionalHintForRTL:yE,gapSpace:CE,coverTarget:kE,doNotLayer:EE,className:Ot("ms-ContextualMenu-Callout",Tc&&Tc.className),setInitialFocus:IE,onDismiss:o.onDismiss||M.onDismiss,onScroll:k,bounds:SE,directionalHintFixed:wE,alignTargetEdge:_E,hidden:o.hidden||M.hidden,ref:t}),g.exports.createElement("div",{style:bc,ref:i,id:mE,className:Zn.container,tabIndex:TE?0:-1,onKeyDown:Me,onKeyUp:tt,onFocusCapture:S,"aria-label":uh,"aria-labelledby":ih,role:"menu"},ch&&g.exports.createElement("div",{className:Zn.title}," ",ch," "),qn&&qn.length?Eu(PE({ariaLabel:uh,items:qn,totalItemCount:yh,hasCheckmarks:RE,hasIcons:NE,defaultMenuItemRenderer:function(z){return xu(z,Zn)},labelElementId:ih},function(z,q){return _n(z,Zn)}),BE):null,hh&&ME(hh,Qm)),g.exports.createElement(Av,null))})}else return null}),function(e,t){return!t.shouldUpdateWhenHidden&&e.hidden&&t.hidden?!0:$s(e,t)});$m.displayName="ContextualMenuBase";function Gm(e){return e.which===F.alt||e.key==="Meta"}function Xk(e,t){var n;(n=e.onMouseDown)===null||n===void 0||n.call(e,e,t)}function Qm(e,t){throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.")}function Ym(e,t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if(o.itemType===et.Section&&o.sectionProps){var i=Ym(e,o.sectionProps.items);if(i)return i}else if(o.key&&o.key===e)return o}}function Xm(e,t){return e&&function(n,r){return qm(n,t),e(n,r)}}function qm(e,t){e&&t&&(e.persist(),t instanceof Event?e.target=t.target:t instanceof Element&&(e.target=t))}var qk={root:"ms-ContextualMenu",container:"ms-ContextualMenu-container",list:"ms-ContextualMenu-list",header:"ms-ContextualMenu-header",title:"ms-ContextualMenu-title",isopen:"is-open"},Zk=function(e){var t=e.className,n=e.theme,r=kr(qk,n),o=n.fonts,i=n.semanticColors,a=n.effects;return{root:[n.fonts.medium,r.root,r.isopen,{backgroundColor:i.menuBackground,minWidth:"180px"},t],container:[r.container,{selectors:{":focus":{outline:0}}}],list:[r.list,r.isopen,{listStyleType:"none",margin:"0",padding:"0"}],header:[r.header,o.small,{fontWeight:ie.semibold,color:i.menuHeader,background:"none",backgroundColor:"transparent",border:"none",height:Xn,lineHeight:Xn,cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}],title:[r.title,{fontSize:o.mediumPlus.fontSize,paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:i.menuItemBackgroundPressed}],subComponentStyles:{callout:{root:{boxShadow:a.elevation8}},menuItem:{}}}};function Zm(e){return g.exports.createElement(Jm,x({},e))}var Jm=$n($m,Zk,function(e){return{onRenderSubMenu:e.onRenderSubMenu?y_(e.onRenderSubMenu,Zm):Zm}},{scope:"ContextualMenu"}),wc=Jm;wc.displayName="ContextualMenu";var eh={msButton:"ms-Button",msButtonHasMenu:"ms-Button--hasMenu",msButtonIcon:"ms-Button-icon",msButtonMenuIcon:"ms-Button-menuIcon",msButtonLabel:"ms-Button-label",msButtonDescription:"ms-Button-description",msButtonScreenReaderText:"ms-Button-screenReaderText",msButtonFlexContainer:"ms-Button-flexContainer",msButtonTextContainer:"ms-Button-textContainer"},Jk=xe(function(e,t,n,r,o,i,a,u,l,s,d){var c,f,m=kr(eh,e||{}),y=s&&!d;return fi({root:[m.msButton,t.root,r,l&&["is-checked",t.rootChecked],y&&["is-expanded",t.rootExpanded,{selectors:(c={},c[":hover ."+m.msButtonIcon]=t.iconExpandedHovered,c[":hover ."+m.msButtonMenuIcon]=t.menuIconExpandedHovered||t.rootExpandedHovered,c[":hover"]=t.rootExpandedHovered,c)}],u&&[eh.msButtonHasMenu,t.rootHasMenu],a&&["is-disabled",t.rootDisabled],!a&&!y&&!l&&{selectors:(f={":hover":t.rootHovered},f[":hover ."+m.msButtonLabel]=t.labelHovered,f[":hover ."+m.msButtonIcon]=t.iconHovered,f[":hover ."+m.msButtonDescription]=t.descriptionHovered,f[":hover ."+m.msButtonMenuIcon]=t.menuIconHovered,f[":focus"]=t.rootFocused,f[":active"]=t.rootPressed,f[":active ."+m.msButtonIcon]=t.iconPressed,f[":active ."+m.msButtonDescription]=t.descriptionPressed,f[":active ."+m.msButtonMenuIcon]=t.menuIconPressed,f)},a&&l&&[t.rootCheckedDisabled],!a&&l&&{selectors:{":hover":t.rootCheckedHovered,":active":t.rootCheckedPressed}},n],flexContainer:[m.msButtonFlexContainer,t.flexContainer],textContainer:[m.msButtonTextContainer,t.textContainer],icon:[m.msButtonIcon,o,t.icon,y&&t.iconExpanded,l&&t.iconChecked,a&&t.iconDisabled],label:[m.msButtonLabel,t.label,l&&t.labelChecked,a&&t.labelDisabled],menuIcon:[m.msButtonMenuIcon,i,t.menuIcon,l&&t.menuIconChecked,a&&!d&&t.menuIconDisabled,!a&&!y&&!l&&{selectors:{":hover":t.menuIconHovered,":active":t.menuIconPressed}},y&&["is-expanded",t.menuIconExpanded]],description:[m.msButtonDescription,t.description,l&&t.descriptionChecked,a&&t.descriptionDisabled],screenReaderText:[m.msButtonScreenReaderText,t.screenReaderText]})}),eE=xe(function(e,t,n,r,o){return{root:dn(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],r&&!t&&[e.splitButtonMenuButtonChecked],o&&!t&&[{selectors:{":focus":e.splitButtonMenuFocused}}]),splitButtonContainer:dn(e.splitButtonContainer,!t&&r&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!r&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:dn(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&o&&e.splitButtonMenuIcon),flexContainer:dn(e.splitButtonFlexContainer),divider:dn(e.splitButtonDivider,(o||t)&&e.splitButtonDividerDisabled)}}),tE=500,nE="BaseButton",rE=function(e){ct(t,e);function t(n){var r=e.call(this,n)||this;return r._buttonElement=g.exports.createRef(),r._splitButtonContainer=g.exports.createRef(),r._mergedRef=Yv(),r._renderedVisibleMenu=!1,r._getMemoizedMenuButtonKeytipProps=xe(function(o){return x(x({},o),{hasMenu:!0})}),r._onRenderIcon=function(o,i){var a=r.props.iconProps;if(a&&(a.iconName!==void 0||a.imageProps)){var u=a.className,l=a.imageProps,s=no(a,["className","imageProps"]);if(a.styles)return g.exports.createElement(wi,x({className:Ot(r._classNames.icon,u),imageProps:l},s));if(a.iconName)return g.exports.createElement(gc,x({className:Ot(r._classNames.icon,u)},s));if(l)return g.exports.createElement(XC,x({className:Ot(r._classNames.icon,u),imageProps:l},s))}return null},r._onRenderTextContents=function(){var o=r.props,i=o.text,a=o.children,u=o.secondaryText,l=u===void 0?r.props.description:u,s=o.onRenderText,d=s===void 0?r._onRenderText:s,c=o.onRenderDescription,f=c===void 0?r._onRenderDescription:c;return i||typeof a=="string"||l?g.exports.createElement("span",{className:r._classNames.textContainer},d(r.props,r._onRenderText),f(r.props,r._onRenderDescription)):[d(r.props,r._onRenderText),f(r.props,r._onRenderDescription)]},r._onRenderText=function(){var o=r.props.text,i=r.props.children;return o===void 0&&typeof i=="string"&&(o=i),r._hasText()?g.exports.createElement("span",{key:r._labelId,className:r._classNames.label,id:r._labelId},o):null},r._onRenderChildren=function(){var o=r.props.children;return typeof o=="string"?null:o},r._onRenderDescription=function(o){var i=o.secondaryText,a=i===void 0?r.props.description:i;return a?g.exports.createElement("span",{key:r._descriptionId,className:r._classNames.description,id:r._descriptionId},a):null},r._onRenderAriaDescription=function(){var o=r.props.ariaDescription;return o?g.exports.createElement("span",{className:r._classNames.screenReaderText,id:r._ariaDescriptionId},o):null},r._onRenderMenuIcon=function(o){var i=r.props.menuIconProps;return g.exports.createElement(gc,x({iconName:"ChevronDown"},i,{className:r._classNames.menuIcon}))},r._onRenderMenu=function(o){var i=r.props.menuAs?H0(r.props.menuAs,wc):wc;return g.exports.createElement(i,x({},o))},r._onDismissMenu=function(o){var i=r.props.menuProps;i&&i.onDismiss&&i.onDismiss(o),(!o||!o.defaultPrevented)&&r._dismissMenu()},r._dismissMenu=function(){r._menuShouldFocusOnMount=void 0,r._menuShouldFocusOnContainer=void 0,r.setState({menuHidden:!0})},r._openMenu=function(o,i){i===void 0&&(i=!0),r.props.menuProps&&(r._menuShouldFocusOnContainer=o,r._menuShouldFocusOnMount=i,r._renderedVisibleMenu=!0,r.setState({menuHidden:!1}))},r._onToggleMenu=function(o){var i=!0;r.props.menuProps&&r.props.menuProps.shouldFocusOnMount===!1&&(i=!1),r.state.menuHidden?r._openMenu(o,i):r._dismissMenu()},r._onSplitContainerFocusCapture=function(o){var i=r._splitButtonContainer.current;!i||o.target&&Ev(o.target,i)||i.focus()},r._onSplitButtonPrimaryClick=function(o){r.state.menuHidden||r._dismissMenu(),!r._processingTouch&&r.props.onClick?r.props.onClick(o):r._processingTouch&&r._onMenuClick(o)},r._onKeyDown=function(o){r.props.disabled&&(o.which===F.enter||o.which===F.space)?(o.preventDefault(),o.stopPropagation()):r.props.disabled||(r.props.menuProps?r._onMenuKeyDown(o):r.props.onKeyDown!==void 0&&r.props.onKeyDown(o))},r._onKeyUp=function(o){!r.props.disabled&&r.props.onKeyUp!==void 0&&r.props.onKeyUp(o)},r._onKeyPress=function(o){!r.props.disabled&&r.props.onKeyPress!==void 0&&r.props.onKeyPress(o)},r._onMouseUp=function(o){!r.props.disabled&&r.props.onMouseUp!==void 0&&r.props.onMouseUp(o)},r._onMouseDown=function(o){!r.props.disabled&&r.props.onMouseDown!==void 0&&r.props.onMouseDown(o)},r._onClick=function(o){r.props.disabled||(r.props.menuProps?r._onMenuClick(o):r.props.onClick!==void 0&&r.props.onClick(o))},r._onSplitButtonContainerKeyDown=function(o){o.which===F.enter||o.which===F.space?r._buttonElement.current&&(r._buttonElement.current.click(),o.preventDefault(),o.stopPropagation()):r._onMenuKeyDown(o)},r._onMenuKeyDown=function(o){var i;if(!r.props.disabled){r.props.onKeyDown&&r.props.onKeyDown(o);var a=o.which===F.up,u=o.which===F.down;if(!o.defaultPrevented&&r._isValidMenuOpenKey(o)){var l=r.props.onMenuClick;l&&l(o,r.props),r._onToggleMenu(!1),o.preventDefault(),o.stopPropagation()}if((o.which===F.enter||o.which===F.space)&&hr(!0,o.target,(i=r.context)===null||i===void 0?void 0:i.registeredProviders),!(o.altKey||o.metaKey)&&(a||u)&&!r.state.menuHidden&&r.props.menuProps){var s=r._menuShouldFocusOnMount!==void 0?r._menuShouldFocusOnMount:r.props.menuProps.shouldFocusOnMount;s||(o.preventDefault(),o.stopPropagation(),r._menuShouldFocusOnMount=!0,r.forceUpdate())}}},r._onTouchStart=function(){r._isSplitButton&&r._splitButtonContainer.current&&!("onpointerdown"in r._splitButtonContainer.current)&&r._handleTouchAndPointerEvent()},r._onMenuClick=function(o){var i=r.props,a=i.onMenuClick,u=i.menuProps;a&&a(o,r.props);var l=typeof(u==null?void 0:u.shouldFocusOnContainer)=="boolean"?u.shouldFocusOnContainer:o.nativeEvent.pointerType==="mouse";o.defaultPrevented||(r._onToggleMenu(l),o.preventDefault(),o.stopPropagation())},lu(r),r._async=new Za(r),r._events=new fn(r),gv(nE,n,["menuProps","onClick"],"split",r.props.split),r._labelId=mn(),r._descriptionId=mn(),r._ariaDescriptionId=mn(),r.state={menuHidden:!0},r}return Object.defineProperty(t.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&this.props.split===!0},enumerable:!1,configurable:!0}),t.prototype.render=function(){var n,r=this.props,o=r.ariaDescription,i=r.ariaLabel,a=r.ariaHidden,u=r.className,l=r.disabled,s=r.allowDisabledFocus,d=r.primaryDisabled,c=r.secondaryText,f=c===void 0?this.props.description:c,m=r.href,y=r.iconProps,C=r.menuIconProps,E=r.styles,v=r.checked,p=r.variantClassName,h=r.theme,_=r.toggle,S=r.getClassNames,w=r.role,k=this.state.menuHidden,I=l||d;this._classNames=S?S(h,u,p,y&&y.className,C&&C.className,I,v,!k,!!this.props.menuProps,this.props.split,!!s):Jk(h,E,u,p,y&&y.className,C&&C.className,I,!!this.props.menuProps,v,!k,this.props.split);var b=this,D=b._ariaDescriptionId,j=b._labelId,U=b._descriptionId,ae=!I&&!!m,G=ae?"a":"button",te=He(vr(ae?{}:{type:"button"},this.props.rootProps,this.props),ae?Dv:mr,["disabled"]),tt=i||te["aria-label"],Me=void 0;o?Me=D:f&&this.props.onRenderDescription!==Qs?Me=U:te["aria-describedby"]&&(Me=te["aria-describedby"]);var P=void 0;te["aria-labelledby"]?P=te["aria-labelledby"]:Me&&!tt&&(P=this._hasText()?j:void 0);var B=!(this.props["data-is-focusable"]===!1||l&&!s||this._isSplitButton),L=w==="menuitemcheckbox"||w==="checkbox",X=L||_===!0?!!v:void 0,O=vr(te,(n={className:this._classNames.root,ref:this._mergedRef(this.props.elementRef,this._buttonElement),disabled:I&&!s,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onClick:this._onClick,"aria-label":tt,"aria-labelledby":P,"aria-describedby":Me,"aria-disabled":I,"data-is-focusable":B},n[L?"aria-checked":"aria-pressed"]=X,n));if(a&&(O["aria-hidden"]=!0),this._isSplitButton)return this._onRenderSplitButtonContent(G,O);if(this.props.menuProps){var ht=this.props.menuProps.id,nt=ht===void 0?this._labelId+"-menu":ht;vr(O,{"aria-expanded":!k,"aria-controls":k?null:nt,"aria-haspopup":!0})}return this._onRenderContent(G,O)},t.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.current&&("onpointerdown"in this._splitButtonContainer.current&&this._events.on(this._splitButtonContainer.current,"pointerdown",this._onPointerDown,!0),"onpointerup"in this._splitButtonContainer.current&&this.props.onPointerUp&&this._events.on(this._splitButtonContainer.current,"pointerup",this.props.onPointerUp,!0))},t.prototype.componentDidUpdate=function(n,r){this.props.onAfterMenuDismiss&&!r.menuHidden&&this.state.menuHidden&&this.props.onAfterMenuDismiss()},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.focus=function(){var n,r;this._isSplitButton&&this._splitButtonContainer.current?(hr(!0,void 0,(n=this.context)===null||n===void 0?void 0:n.registeredProviders),this._splitButtonContainer.current.focus()):this._buttonElement.current&&(hr(!0,void 0,(r=this.context)===null||r===void 0?void 0:r.registeredProviders),this._buttonElement.current.focus())},t.prototype.dismissMenu=function(){this._dismissMenu()},t.prototype.openMenu=function(n,r){this._openMenu(n,r)},t.prototype._onRenderContent=function(n,r){var o=this,i=this.props,a=n,u=i.menuIconProps,l=i.menuProps,s=i.onRenderIcon,d=s===void 0?this._onRenderIcon:s,c=i.onRenderAriaDescription,f=c===void 0?this._onRenderAriaDescription:c,m=i.onRenderChildren,y=m===void 0?this._onRenderChildren:m,C=i.onRenderMenu,E=C===void 0?this._onRenderMenu:C,v=i.onRenderMenuIcon,p=v===void 0?this._onRenderMenuIcon:v,h=i.disabled,_=i.keytipProps;_&&l&&(_=this._getMemoizedMenuButtonKeytipProps(_));var S=function(k){return g.exports.createElement(a,x({},r,k),g.exports.createElement("span",{className:o._classNames.flexContainer,"data-automationid":"splitbuttonprimary"},d(i,o._onRenderIcon),o._onRenderTextContents(),f(i,o._onRenderAriaDescription),y(i,o._onRenderChildren),!o._isSplitButton&&(l||u||o.props.onRenderMenuIcon)&&p(o.props,o._onRenderMenuIcon),l&&!l.doNotLayer&&o._shouldRenderMenu()&&E(o._getMenuProps(l),o._onRenderMenu)))},w=_?g.exports.createElement(Pi,{keytipProps:this._isSplitButton?void 0:_,ariaDescribedBy:r["aria-describedby"],disabled:h},function(k){return S(k)}):S();return l&&l.doNotLayer?g.exports.createElement(g.exports.Fragment,null,w,this._shouldRenderMenu()&&E(this._getMenuProps(l),this._onRenderMenu)):g.exports.createElement(g.exports.Fragment,null,w,g.exports.createElement(Av,null))},t.prototype._shouldRenderMenu=function(){var n=this.state.menuHidden,r=this.props,o=r.persistMenu,i=r.renderPersistedMenuHiddenOnMount;if(n){if(o&&(this._renderedVisibleMenu||i))return!0}else return!0;return!1},t.prototype._hasText=function(){return this.props.text!==null&&(this.props.text!==void 0||typeof this.props.children=="string")},t.prototype._getMenuProps=function(n){var r=this.props.persistMenu,o=this.state.menuHidden;return!n.ariaLabel&&!n.labelElementId&&this._hasText()&&(n=x(x({},n),{labelElementId:this._labelId})),x(x({id:this._labelId+"-menu",directionalHint:ye.bottomLeftEdge},n),{shouldFocusOnContainer:this._menuShouldFocusOnContainer,shouldFocusOnMount:this._menuShouldFocusOnMount,hidden:r?o:void 0,className:Ot("ms-BaseButton-menuhost",n.className),target:this._isSplitButton?this._splitButtonContainer.current:this._buttonElement.current,onDismiss:this._onDismissMenu})},t.prototype._onRenderSplitButtonContent=function(n,r){var o=this,i=this.props,a=i.styles,u=a===void 0?{}:a,l=i.disabled,s=i.allowDisabledFocus,d=i.checked,c=i.getSplitButtonClassNames,f=i.primaryDisabled,m=i.menuProps,y=i.toggle,C=i.role,E=i.primaryActionButtonProps,v=this.props.keytipProps,p=this.state.menuHidden,h=c?c(!!l,!p,!!d,!!s):u&&eE(u,!!l,!p,!!d,!!f);vr(r,{onClick:void 0,onPointerDown:void 0,onPointerUp:void 0,tabIndex:-1,"data-is-focusable":!1}),v&&m&&(v=this._getMemoizedMenuButtonKeytipProps(v));var _=He(r,[],["disabled"]);E&&vr(r,E);var S=function(w){return g.exports.createElement("div",x({},_,{"data-ktp-target":w?w["data-ktp-target"]:void 0,role:C||"button","aria-disabled":l,"aria-haspopup":!0,"aria-expanded":!p,"aria-pressed":y?!!d:void 0,"aria-describedby":pi(r["aria-describedby"],w?w["aria-describedby"]:void 0),className:h&&h.splitButtonContainer,onKeyDown:o._onSplitButtonContainerKeyDown,onTouchStart:o._onTouchStart,ref:o._splitButtonContainer,"data-is-focusable":!0,onClick:!l&&!f?o._onSplitButtonPrimaryClick:void 0,tabIndex:!l&&!f||s?0:void 0,"aria-roledescription":r["aria-roledescription"],onFocusCapture:o._onSplitContainerFocusCapture}),g.exports.createElement("span",{style:{display:"flex",width:"100%"}},o._onRenderContent(n,r),o._onRenderSplitButtonMenuButton(h,w),o._onRenderSplitButtonDivider(h)))};return v?g.exports.createElement(Pi,{keytipProps:v,disabled:l},function(w){return S(w)}):S()},t.prototype._onRenderSplitButtonDivider=function(n){if(n&&n.divider){var r=function(o){o.stopPropagation()};return g.exports.createElement("span",{className:n.divider,"aria-hidden":!0,onClick:r})}return null},t.prototype._onRenderSplitButtonMenuButton=function(n,r){var o=this.props,i=o.allowDisabledFocus,a=o.checked,u=o.disabled,l=o.splitButtonMenuProps,s=o.splitButtonAriaLabel,d=o.primaryDisabled,c=this.state.menuHidden,f=this.props.menuIconProps;f===void 0&&(f={iconName:"ChevronDown"});var m=x(x({},l),{styles:n,checked:a,disabled:u,allowDisabledFocus:i,onClick:this._onMenuClick,menuProps:void 0,iconProps:x(x({},f),{className:this._classNames.menuIcon}),ariaLabel:s,"aria-haspopup":!0,"aria-expanded":!c,"data-is-focusable":!1});return g.exports.createElement(t,x({},m,{"data-ktp-execute-target":r&&r["data-ktp-execute-target"],onMouseDown:this._onMouseDown,tabIndex:d&&!i?0:-1}))},t.prototype._onPointerDown=function(n){var r=this.props.onPointerDown;r&&r(n),n.pointerType==="touch"&&(this._handleTouchAndPointerEvent(),n.preventDefault(),n.stopImmediatePropagation())},t.prototype._handleTouchAndPointerEvent=function(){var n=this;this._lastTouchTimeoutId!==void 0&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout(function(){n._processingTouch=!1,n._lastTouchTimeoutId=void 0,n.state.menuHidden&&n.focus()},tE)},t.prototype._isValidMenuOpenKey=function(n){return this.props.menuTriggerKeyCode?n.which===this.props.menuTriggerKeyCode:this.props.menuProps?n.which===F.down&&(n.altKey||n.metaKey):!1},t.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},t.contextType=cu,t}(g.exports.Component),th={outline:0},nh=function(e){return{fontSize:e,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",flexShrink:0}},oE=xe(function(e){var t,n,r=e.semanticColors,o=e.effects,i=e.fonts,a=r.buttonBorder,u=r.disabledBackground,l=r.disabledText,s={left:-2,top:-2,bottom:-2,right:-2,outlineColor:"ButtonText"};return{root:[fo(e,{inset:1,highContrastStyle:s,borderColor:"transparent"}),e.fonts.medium,{border:"1px solid "+a,borderRadius:o.roundedCorner2,boxSizing:"border-box",cursor:"pointer",display:"inline-block",padding:"0 16px",textDecoration:"none",textAlign:"center",userSelect:"none",selectors:{":active > span":{position:"relative",left:0,top:0}}}],rootDisabled:[fo(e,{inset:1,highContrastStyle:s,borderColor:"transparent"}),{backgroundColor:u,borderColor:u,color:l,cursor:"default",selectors:{":hover":th,":focus":th}}],iconDisabled:{color:l,selectors:(t={},t[W]={color:"GrayText"},t)},menuIconDisabled:{color:l,selectors:(n={},n[W]={color:"GrayText"},n)},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},description:{display:"block"},textContainer:{flexGrow:1,display:"block"},icon:nh(i.mediumPlus.fontSize),menuIcon:nh(i.small.fontSize),label:{margin:"0 4px",lineHeight:"100%",display:"block"},screenReaderText:om}}),iE=xe(function(e,t){var n,r,o,i,a,u,l,s,d,c,f,m,y,C=e.effects,E=e.palette,v=e.semanticColors,p={left:-2,top:-2,bottom:-2,right:-2,border:"none"},h={position:"absolute",width:1,right:31,top:8,bottom:8},_={splitButtonContainer:[fo(e,{highContrastStyle:p,inset:2,pointerEvents:"none"}),{display:"inline-flex",selectors:{".ms-Button--default":{borderTopRightRadius:"0",borderBottomRightRadius:"0",borderRight:"none",flexGrow:"1"},".ms-Button--primary":{borderTopRightRadius:"0",borderBottomRightRadius:"0",border:"none",flexGrow:"1",selectors:(n={},n[W]=x({color:"WindowText",backgroundColor:"Window",border:"1px solid WindowText",borderRightWidth:"0"},Cr()),n[":hover"]={border:"none"},n[":active"]={border:"none"},n)},".ms-Button--primary + .ms-Button":{border:"none",selectors:(r={},r[W]={border:"1px solid WindowText",borderLeftWidth:"0"},r)}}}],splitButtonContainerHovered:{selectors:{".ms-Button--primary":{selectors:(o={},o[W]={color:"Window",backgroundColor:"Highlight"},o)},".ms-Button.is-disabled":{color:v.buttonTextDisabled,selectors:(i={},i[W]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},i)}}},splitButtonContainerChecked:{selectors:{".ms-Button--primary":{selectors:(a={},a[W]=x({color:"Window",backgroundColor:"WindowText"},Cr()),a)}}},splitButtonContainerCheckedHovered:{selectors:{".ms-Button--primary":{selectors:(u={},u[W]=x({color:"Window",backgroundColor:"WindowText"},Cr()),u)}}},splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:(l={padding:6,height:"auto",boxSizing:"border-box",borderRadius:0,borderTopRightRadius:C.roundedCorner2,borderBottomRightRadius:C.roundedCorner2,border:"1px solid "+E.neutralSecondaryAlt,borderLeft:"none",outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1,marginTop:0,marginRight:0,marginBottom:0},l[W]={".ms-Button-menuIcon":{color:"WindowText"}},l),splitButtonDivider:x(x({},h),{selectors:(s={},s[W]={backgroundColor:"WindowText"},s)}),splitButtonDividerDisabled:x(x({},h),{selectors:(d={},d[W]={backgroundColor:"GrayText"},d)}),splitButtonMenuButtonDisabled:{pointerEvents:"none",border:"none",selectors:(c={":hover":{cursor:"default"},".ms-Button--primary":{selectors:(f={},f[W]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},f)},".ms-Button-menuIcon":{selectors:(m={},m[W]={color:"GrayText"},m)}},c[W]={color:"GrayText",border:"1px solid GrayText",backgroundColor:"Window"},c)},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none",selectors:(y={},y[W]=x({color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},Cr()),y)},splitButtonMenuFocused:x({},fo(e,{highContrastStyle:p,inset:2}))};return pr(_,t)}),rh=function(){return{position:"absolute",width:1,right:31,top:8,bottom:8}};function aE(e){var t,n,r,o,i,a=e.semanticColors,u=e.palette,l=a.buttonBackground,s=a.buttonBackgroundPressed,d=a.buttonBackgroundHovered,c=a.buttonBackgroundDisabled,f=a.buttonText,m=a.buttonTextHovered,y=a.buttonTextDisabled,C=a.buttonTextChecked,E=a.buttonTextCheckedHovered;return{root:{backgroundColor:l,color:f},rootHovered:{backgroundColor:d,color:m,selectors:(t={},t[W]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:s,color:C},rootExpanded:{backgroundColor:s,color:C},rootChecked:{backgroundColor:s,color:C},rootCheckedHovered:{backgroundColor:s,color:E},rootDisabled:{color:y,backgroundColor:c,selectors:(n={},n[W]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},n)},splitButtonContainer:{selectors:(r={},r[W]={border:"none"},r)},splitButtonMenuButton:{color:u.white,backgroundColor:"transparent",selectors:{":hover":{backgroundColor:u.neutralLight,selectors:(o={},o[W]={color:"Highlight"},o)}}},splitButtonMenuButtonDisabled:{backgroundColor:a.buttonBackgroundDisabled,selectors:{":hover":{backgroundColor:a.buttonBackgroundDisabled}}},splitButtonDivider:x(x({},rh()),{backgroundColor:u.neutralTertiaryAlt,selectors:(i={},i[W]={backgroundColor:"WindowText"},i)}),splitButtonDividerDisabled:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:u.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:u.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:u.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:u.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:a.buttonText},splitButtonMenuIconDisabled:{color:a.buttonTextDisabled}}}function uE(e){var t,n,r,o,i,a,u,l,s,d=e.palette,c=e.semanticColors;return{root:{backgroundColor:c.primaryButtonBackground,border:"1px solid "+c.primaryButtonBackground,color:c.primaryButtonText,selectors:(t={},t[W]=x({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},Cr()),t["."+Ue+" &:focus"]={selectors:{":after":{border:"none",outlineColor:d.white}}},t)},rootHovered:{backgroundColor:c.primaryButtonBackgroundHovered,border:"1px solid "+c.primaryButtonBackgroundHovered,color:c.primaryButtonTextHovered,selectors:(n={},n[W]={color:"Window",backgroundColor:"Highlight",borderColor:"Highlight"},n)},rootPressed:{backgroundColor:c.primaryButtonBackgroundPressed,border:"1px solid "+c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed,selectors:(r={},r[W]=x({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},Cr()),r)},rootExpanded:{backgroundColor:c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed},rootChecked:{backgroundColor:c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed},rootCheckedHovered:{backgroundColor:c.primaryButtonBackgroundPressed,color:c.primaryButtonTextPressed},rootDisabled:{color:c.primaryButtonTextDisabled,backgroundColor:c.primaryButtonBackgroundDisabled,selectors:(o={},o[W]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},o)},splitButtonContainer:{selectors:(i={},i[W]={border:"none"},i)},splitButtonDivider:x(x({},rh()),{backgroundColor:d.white,selectors:(a={},a[W]={backgroundColor:"Window"},a)}),splitButtonMenuButton:{backgroundColor:c.primaryButtonBackground,color:c.primaryButtonText,selectors:(u={},u[W]={backgroundColor:"Canvas"},u[":hover"]={backgroundColor:c.primaryButtonBackgroundHovered,selectors:(l={},l[W]={color:"Highlight"},l)},u)},splitButtonMenuButtonDisabled:{backgroundColor:c.primaryButtonBackgroundDisabled,selectors:{":hover":{backgroundColor:c.primaryButtonBackgroundDisabled}}},splitButtonMenuButtonChecked:{backgroundColor:c.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:c.primaryButtonBackgroundPressed}}},splitButtonMenuButtonExpanded:{backgroundColor:c.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:c.primaryButtonBackgroundPressed}}},splitButtonMenuIcon:{color:c.primaryButtonText},splitButtonMenuIconDisabled:{color:d.neutralTertiary,selectors:(s={},s[W]={color:"GrayText"},s)}}}var lE="32px",sE="80px",cE=xe(function(e,t,n){var r=oE(e),o=iE(e),i={root:{minWidth:sE,height:lE},label:{fontWeight:ie.semibold}};return pr(r,i,n?uE(e):aE(e),o,t)}),dE=function(e){ct(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.render=function(){var n=this.props,r=n.primary,o=r===void 0?!1:r,i=n.styles,a=n.theme;return g.exports.createElement(rE,x({},this.props,{variantClassName:o?"ms-Button--primary":"ms-Button--default",styles:cE(a,i,o),onRenderDescription:Qs}))},t=Zp([Mv("DefaultButton",["theme","styles"],!0)],t),t}(g.exports.Component),fE=function(e){ct(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.render=function(){return g.exports.createElement(dE,x({},this.props,{primary:!0,onRenderDescription:Qs}))},t=Zp([Mv("PrimaryButton",["theme","styles"],!0)],t),t}(g.exports.Component);function pE(){return Bu.createElement("div",null,Bu.createElement(fE,null,"Woozy Foobar"))}const KE="";async function vE(e){try{console.log(e);const t=document.createElement("div");document.body.appendChild(t),Qp(t).render(Bu.createElement(pE,null))}catch(t){console.error(t)}}Ir.init=vE,Object.defineProperties(Ir,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
