- name: fig-width
  schema: number
  description: "Default width for figures"

- name: fig-height
  schema: number
  description: "Default height for figures"

- name: fig-format
  schema:
    enum: [retina, png, jpeg, svg, pdf]
  description: "Default output format for figures"

- name: fig-dpi
  schema: number
  description: "Default DPI for figures"

- name: out-width
  schema: string
  description:
    short: "Width of plot in the output document"
    long: |
      Width of the plot in the output document, which can be different from its physical `fig-width`,
      i.e., plots can be scaled in the output document.
      Depending on the output format, this option can take special values.
      For example, for LaTeX output, it can be `.8\\linewidth`, `3in`, or `8cm`;
      for HTML, it can be `300px`.

- name: out-height
  schema: string
  description:
    short: "Height of plot in the output document"
    long: |
      Height of the plot in the output document, which can be different from its physical `fig-height`, 
      i.e., plots can be scaled in the output document.
      Depending on the output format, this option can take special values.
      For example, for LaTeX output, it can be `3in`, or `8cm`;
      for HTML, it can be `300px`.

- name: results
  schema:
    oneOf:
      - enum: [markup, asis, hold, hide]
      - false
  default: markup
  description:
    short: "How to display text results"
    long: |
      How to display text results. Note that this option only applies to normal text output (not warnings,
      messages, or errors). The possible values are as follows:

      - `markup`: Mark up text output with the appropriate environments
        depending on the output format. For example, if the text
        output is a character string `"[1] 1 2 3"`, the actual output that
        **knitr** produces will be:

        ```` md
        ```
        [1] 1 2 3
        ```
        ````

        In this case, `results: markup` means to put the text output in fenced
        code blocks (```` ``` ````).

      - `asis`: Write text output as-is, i.e., write the raw text results
        directly into the output document without any markups.

        ```` md
        ```{r}
        #| results: asis
        cat("I'm raw **Markdown** content.\n")
        ```
        ````

      - `hold`: Hold all pieces of text output in a chunk and flush them to the
        end of the chunk.

      - `hide` (or `false`): Hide text output.

- name: tidy
  schema: boolean
  default: false
  description: "Whether to reformat R code."

- name: tidy-opts
  schema:
    arrayOf: string
  description: "List of options to pass to `tidy` handler"

- name: collapse
  schema: boolean
  default: false
  description: |
    Collapse all the source and output blocks from one code chunk into a single block

- name: prompt
  schema: boolean
  default: false
  description:
    short: "Whether to add the prompt characters in R code."
    long: |
      Whether to add the prompt characters in R
      code. See `prompt` and `continue` on the help page `?base::options`. Note
      that adding prompts can make it difficult for readers to copy R code from
      the output, so `prompt: false` may be a better choice. This option may not
      work well when the `engine` is not `R`
      ([#1274](https://github.com/yihui/knitr/issues/1274)).

- name: comment
  schema: string
  default: "##"
  description:
    short: "Prefix to be added before each line of text output."
    long: |
      Prefix to be added before each line of text output.
      By default, the text output is commented out by `##`, so if
      readers want to copy and run the source code from the output document, they
      can select and copy everything from the chunk, since the text output is
      masked in comments (and will be ignored when running the copied text). Set
      `comment: ''` to remove the default `##`.

- name: highlight
  schema: boolean
  default: false
  hidden: true
  description: "Whether to syntax highlight the source code"

- name: class-source
  schema:
    maybeArrayOf: string
  description: "Class name(s) for source code blocks"

- name: attr-source
  schema:
    maybeArrayOf: string
  description: "Attribute(s) for source code blocks"

- name: class-output
  schema:
    maybeArrayOf: string
  description: "Class name(s) for text/console output"

- name: attr-output
  schema:
    maybeArrayOf: string
  description: "Attribute(s) for text/console output"

- name: class-warning
  schema:
    maybeArrayOf: string
  description: "Class name(s) for warning output"

- name: attr-warning
  schema:
    maybeArrayOf: string
  description: "Attribute(s) for warning output"

- name: class-message
  schema:
    maybeArrayOf: string
  description: "Class name(s) for message output"

- name: attr-message
  schema:
    maybeArrayOf: string
  description: "Attribute(s) for message output"

- name: class-error
  schema:
    maybeArrayOf: string
  description: "Class name(s) for error output"

- name: attr-error
  schema:
    maybeArrayOf: string
  description: "Attribute(s) for error output"

- name: cache
  schema: boolean
  default: false
  description:
    short: "Whether to cache a code chunk."
    long: |
      Whether to cache a code chunk. When evaluating
      code chunks for the second time, the cached chunks are skipped (unless they
      have been modified), but the objects created in these chunks are loaded from
      previously saved databases (`.rdb` and `.rdx` files), and these files are
      saved when a chunk is evaluated for the first time, or when cached files are
      not found (e.g., you may have removed them by hand). Note that the filename
      consists of the chunk label with an MD5 digest of the R code and chunk
      options of the code chunk, which means any changes in the chunk will produce
      a different MD5 digest, and hence invalidate the cache.

- name: cache-path
  schema: path
  description: "A prefix to be used to generate the paths of cache files"

- name: cache-vars
  schema:
    maybeArrayOf: string
  description:
    short: "Variable names to be saved in the cache database."
    long: |
      Variable names to be saved in
      the cache database. By default, all variables created in the current chunks
      are identified and saved, but you may want to manually specify the variables
      to be saved, because the automatic detection of variables may not be robust,
      or you may want to save only a subset of variables.

- name: cache-globals
  schema: string
  description:
    short: "Variables names that are not created from the current chunk"
    long: |
      Variables names that are not created from the current chunk.

      This option is mainly for `autodep: true` to work more precisely---a chunk
      `B` depends on chunk `A` when any of `B`'s global variables are `A`'s local 
      variables. In case the automatic detection of global variables in a chunk 
      fails, you may manually specify the names of global variables via this option.
      In addition, `cache-globals: false` means detecting all variables in a code
      chunk, no matter if they are global or local variables.

- name: cache-lazy
  schema: boolean
  default: true
  description:
    short: "Whether to `lazyLoad()` or directly `load()` objects"
    long: |
      Whether to `lazyLoad()` or directly `load()` objects. For very large objects, 
      lazyloading may not work, so `cache-lazy: false` may be desirable (see
      [#572](https://github.com/yihui/knitr/issues/572)).

- name: cache-rebuild
  schema: boolean
  default: false
  description: "Force rebuild of cache for chunk"

- name: cache-comments
  schema: boolean
  default: true
  description: "Prevent comment changes from invalidating the cache for a chunk"

- name: dependson
  schema:
    oneOf:
      - maybeArrayOf: string
      - maybeArrayOf: number
  description: |
    Explicitly specify cache dependencies for this chunk (one or more chunk labels)

- name: autodep
  schema: boolean
  default: false
  description: "Detect cache dependencies automatically via usage of global variables"

- name: fig-keep
  schema:
    oneOf:
      enum: [high, none, all, first, last]
      maybeArrayOf: number
  default: high
  description:
    short: "How plots in chunks should be kept."
    long: |
      How plots in chunks should be kept. Possible values are as follows:

      -   `high`: Only keep high-level plots (merge low-level changes into
          high-level plots).
      -   `none`: Discard all plots.
      -   `all`: Keep all plots (low-level plot changes may produce new plots).
      -   `first`: Only keep the first plot.
      -   `last`: Only keep the last plot.
      -   If set to a numeric vector, the values are indices of (low-level) plots
          to keep.

- name: fig-show
  schema:
    enum: [asis, hold, animate, hide]
  default: asis
  description:
    short: "How to show/arrange the plots"
    long: |
      How to show/arrange the plots. Possible values are as follows:

      -   `asis`: Show plots exactly in places where they were generated (as if
          the code were run in an R terminal).
      -   `hold`: Hold all plots and output them at the end of a code chunk.
      -   `animate`: Concatenate all plots into an animation if there are multiple
          plots in a chunk.
      -   `hide`: Generate plot files but hide them in the output document.

- name: out-extra
  schema: string
  description: "Additional raw LaTeX or HTML options to be applied to figures"

- name: external
  enabled: [$pdf-all]
  schema: boolean
  default: true
  description: "Externalize tikz graphics (pre-compile to PDF)"

- name: sanitize
  enabled: [$pdf-all]
  schema: boolean
  default: false
  description: "sanitize tikz graphics (escape special LaTeX characters)."

- name: interval
  schema: number
  default: 1
  description: "Time interval (number of seconds) between animation frames."

- name: aniopts
  schema: string
  default: "controls, loop"
  description:
    short: "Extra options for animations"
    long: |
      Extra options for animations; see the documentation of the LaTeX [**animate**
      package.](http://ctan.org/pkg/animate)

- name: animation-hook
  schema:
    string:
      completions: [ffmpeg, gifski]
  default: ffmpeg
  description:
    short: "Hook function to create animations in HTML output"
    long: |
      Hook function to create animations in HTML output. 

      The default hook (`ffmpeg`) uses FFmpeg to convert images to a WebM video.

      Another hook function is `gifski` based on the
      [**gifski**](https://cran.r-project.org/package=gifski) package to
      create GIF animations.

- name: message
  schema: boolean
  default: true
  description: Including messages in rendered output.

- name: child
  schema:
    maybeArrayOf: path
  description: "One or more paths of child documents to be knitted and input into the main document."

- name: purl
  schema: boolean
  default: true
  description: "Include chunk when extracting code with `knitr::purl()`"

- name: code
  schema: string
  description: "String containing code to execute for this chunk"

- name: file
  schema: path
  description: "File containing code to execute for this chunk"
