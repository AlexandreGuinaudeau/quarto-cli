# from: https://github.com/jgm/pandoc/blob/619dfa2a2a19a8433424e830a21384c7b520866a/MANUAL.txt


# $epub-all: [epub, epub2, epub3]
# $pdf-all: [latex, pdf, beamer]
# $markdown-all: [markdown, gfm, commonmark, hugo]
# $office-all: [docx, pptx]
# $docbook-all: [docbook, docbook4, docbook5]
# $odt-all: [odt, opendocument]

# $html-doc: [html, html4, html5]
# $html-pres: [slidy, slideous, s5, revealjs, dzslides]
# $html-files: [$html-doc, $html-pres]
# $html-all: [$html-files, $epub-all]

# $asciidoc-all: [asciidoc, asciidoctor]


- name: from
  alias: reader
  schema: string
  default: markdown
  description:
    short: "Format to read from"
    long: |
      Format to read from. Extensions can be individually enabled or disabled by appending +EXTENSION or -EXTENSION to the format name (e.g. markdown+emoji).

- name: to
  alias: writer
  schema: string
  default: html
  hidden: true
  description:
    short: "Format to write to (e.g. html)"
    long: |
      Format to write to. Extensions can be individually enabled or disabled by appending +EXTENSION or -EXTENSION to the format name (e.g. gfm+footnotes)

- name: output-file
  schema:
    oneOf:
      - path
      - "null":
          hidden: true
  default: "Input filename with output extension (e.g. .pdf, .html, etc.)"
  description: "Output file to write to"

- name: input-file
  schema: path
  hidden: true
  description: "Input file to read from"

- name: input-files
  schema:
    arrayOf: path
  hidden: true
  description: "Input files to read from"

- name: defaults
  schema:
    arrayOf: path
  hidden: true
  description: "Include options from the specified defaults files"

- name: template
  disabled: [$office-all]
  schema: path
  description: |
    Use the specified file as a custom template for the generated document.

- name: standalone
  schema: boolean
  default: true
  description: |
    Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, TEI, or RTF file, not a fragment)

- name: self-contained
  enabled: [$html-files]
  schema: boolean
  default: false
  description:
    short: "Produce a standalone HTML file with no external dependencies"
    long: |
      Produce a standalone HTML file with no external dependencies, using
      `data:` URIs to incorporate the contents of linked scripts, stylesheets,
      images, and videos. The resulting file should be
      "self-contained," in the sense that it needs no external files and no net
      access to be displayed properly by a browser. This option works only with
      HTML output formats, including `html4`, `html5`, `html+lhs`, `html5+lhs`,
      `s5`, `slidy`, `slideous`, `dzslides`, and `revealjs`. Scripts, images,
      and stylesheets at absolute URLs will be downloaded; those at relative
      URLs will be sought relative to the working directory (if the first source
      file is local) or relative to the base URL (if the first source
      file is remote).  Elements with the attribute
      `data-external="1"` will be left alone; the documents they
      link to will not be incorporated in the document.

- name: variables
  schema: object
  hidden: true
  description: "Pandoc metadata variables"

- name: metadata
  schema: object
  hidden: true
  description: "Pandoc metadata variables"

- name: metadata-file
  schema: path
  description:
    short: "Include file with YAML metadata"
    long: |
      Read metadata from the supplied YAML (or JSON) file. This
      option can be used with every input format, but string scalars
      in the YAML file will always be parsed as Markdown. Generally,
      the input will be handled the same as in YAML metadata blocks.
      Metadata values specified inside the document, or by using `-M`, 
      overwrite values specified with this option.

- name: metadata-files
  schema:
    arrayOf: path
  description:
    short: "Include files with YAML metadata"
    long: |
      Read metadata from the supplied YAML (or JSON) files. This
      option can be used with every input format, but string scalars
      in the YAML file will always be parsed as Markdown. Generally,
      the input will be handled the same as in YAML metadata blocks.
      Values in files specified later in the list will be preferred
      over those specified earlier. Metadata values specified inside 
      the document, or by using `-M`, overwrite values specified with
      this option.

- name: include-before-body
  disabled: [pptx, docx]
  schema:
    maybeArrayOf: path
  description: |
    Include contents of files, verbatim, at the beginning of the document body
    (e.g. after the `<body>` tag in HTML, or the `\begin{document}` command 
    in LaTeX).

- name: include-after-body
  disabled: [pptx, docx]
  schema:
    maybeArrayOf: path
  description: |
    Include contents of files, verbatim, at the end of the document body (before
    the `</body>` tag in HTML, or the `\end{document}` command in LaTeX).

- name: include-in-header
  disabled: [pptx, docx]
  schema:
    maybeArrayOf: path
  description: |
    Include contents of files, verbatim, at the end of the header. This can
    be used, for example, to include special CSS or JavaScript in HTML 
    documents.

- name: resource-path
  schema: path
  default: "."
  description: |
    List of paths to search for images and other resources. The paths should
    be separated by : on Linux, UNIX, and macOS systems, and by ; on Windows.

- name: citeproc
  schema: boolean
  default: true
  description:
    short: "Turn on built-in citation processing"
    long: |
      Turn on built-in citation processing. To use this feature, you will need
      to have a document containing citations and a source of bibliographic data: 
      either an external bibliography file or a list of `references` in the 
      document's YAML metadata. You can optionally also include a `csl` 
      citation style file.

- name: csl
  schema: path
  description: Citation Style Language file to use for formatting references.

- name: citation-abbreviations
  schema: path
  description: |
    JSON file containing abbreviations of journals that should be
    used in formatted bibliographies when `form="short"` is
    specified. The format of the file can be illustrated with an
    example:
    ```json
    { "default": {
        "container-title": {
                "Lloyd's Law Reports": "Lloyd's Rep",
                "Estates Gazette": "EG",
                "Scots Law Times": "SLT"
        }
      }
    }
    ```

- name: bibliography
  schema:
    maybeArrayOf: path
  description: |
    Document bibliography (BibTeX or CSL). May be a single file or a list of files

- name: filters
  schema:
    arrayOf:
      oneOf:
        - path
        - object:
            properties:
              type: string
              path: path
            required: [type, path]
        - object:
            properties:
              type:
                enum: [citeproc]
            required: [type]
  description: |
    Specify executables or Lua scripts to be used as a filter transforming
    the pandoc AST after the input is parsed and before the output is written.

- name: file-scope
  schema: boolean
  hidden: true
  default: false
  description: "Parse each file individually before combining for multifile documents."

- name: data-dir
  schema: path
  hidden: true
  description: "Specify the user data directory to search for pandoc data files."

- name: verbosity
  schema:
    enum: [ERROR, WARNING, INFO]
  default: WARNING
  description: "Level of program output (provide INFO for diagnostics)"

- name: log-file
  schema: path
  description: "Write log messages in machine-readable JSON format to FILE."

- name: cite-method
  enabled: [$pdf-all]
  schema:
    enum: [citeproc, natbib, biblatex]
  default: citeproc
  description: |
    Method used to format citations.

- name: top-level-division
  enabled: [$pdf-all, context, $docbook-all, tei]
  schema:
    enum: [default, section, chapter, part]
  description:
    short: |
      Treat top-level headings as the given division type. The hierarchy
      order is part, chapter, then section; all headings are shifted such 
      that the top-level heading becomes the specified type.
    long: |
      Treat top-level headings as the given division type. The hierarchy
      order is part, chapter, then section; all headings are shifted such 
      that the top-level heading becomes the specified type.  

      The default behavior is to determine the
      best division type via heuristics: unless other conditions
      apply, `section` is chosen. When the `documentclass`
      variable is set to `report`, `book`, or `memoir` (unless the
      `article` option is specified), `chapter` is implied as the
      setting for this option. If `beamer` is the output format,
      specifying either `chapter` or `part` will cause top-level
      headings to become `\part{..}`, while second-level headings
      remain as their default type.

- name: abbreviations
  schema: string
  description:
    short: |
      Specifies a custom abbreviations file, with abbreviations one to a line.
    long: |
      Specifies a custom abbreviations file, with abbreviations one to a line.
      This list is used when reading Markdown input: strings found in this list
      will be followed by a nonbreaking space, and the period will not produce sentence-ending space in formats like LaTeX.  The strings may not contain
      spaces.

- name: pdf-engine
  enabled: [$pdf-all, ms, context, $html-doc]
  schema:
    string:
      completions: 
        - pdflatex
        - lualatex
        - xelatex
        - latexmk
        - tectonic
        - wkhtmltopdf
        - weasyprint
        - prince
        - context
        - pdfroff
  description: 
    short: "Use the specified engine when producing PDF output."
    long: |
      Use the specified engine when producing PDF output. If the engine is not
      in your PATH, the full path of the engine may be specified here. If this
      option is not specified, pandoc uses the following defaults
      depending on the output format in use:
      - `latex`: `pdflatex` (other options: `xelatex`, `lualatex`,
        `tectonic`, `latexmk`)
      - `context`: `context`
      - `html`:  `wkhtmltopdf` (other options: `prince`, `weasyprint`;
        see [print-css.rocks](https://print-css.rocks) for a good
        introduction to PDF generation from HTML/CSS.)
      - `ms`:  `pdfroff`

- name: pdf-engine-opt
  enabled: [$pdf-all, ms, context, $html-doc]
  schema: string
  description:
    short: "Use the given string as a command-line argument to the `pdf-engine`."
    long: |
      Use the given string as a command-line argument to the pdf-engine.
      For example, to use a persistent directory foo for latexmk’s auxiliary
      files, use `pdf-engine-opt: -outdir=foo`. Note that no check for 
      duplicate options is done.

- name: wrap
  disabled: [$pdf-all, $office-all, $odt-all, $html-all, $docbook-all]
  schema: 
    enum: [auto, none, preserve]
  default: auto
  description: 
    short: "Determine how text is wrapped in the output."
    long: |
      Determine how text is wrapped in the output (the source code, not the rendered
      version). With `auto` (the default), pandoc will attempt to wrap lines to the column
      width specified by `columns` (default 72). With `none`, pandoc will not wrap lines at
      all. With `preserve`, pandoc will attempt to preserve the wrapping from the source
      document (that is, where there are nonsemantic newlines in the source, there will be
      nonsemantic newlines in the output as well

- name: columns
  disabled: [$pdf-all, $office-all, $odt-all, $html-all, $docbook-all]
  schema: number
  description:
    short: Specify length of lines in characters.
    long: |
      Specify length of lines in characters. This affects text wrapping in generated source
      code (see `wrap`). It also affects calculation of column widths for plain text
      tables. 

- name: dpi
  schema: number
  default: 96
  description:
    short: |
      Specify the default dpi (dots per inch) value for conversion from pixels to inch/
      centimeters and vice versa.
    long: |
      Specify the default dpi (dots per inch) value for conversion from pixels to inch/
      centimeters and vice versa. (Technically, the correct term would be ppi: pixels per
      inch.) The default is `96`. When images contain information about dpi internally, the
      encoded value is used instead of the default specified by this option.

- name: extract-media
  schema: path
  description:
    short: |
      Extract images and other media contained in or linked from the source document to the
      path DIR.
    long: |
      Extract images and other media contained in or linked from the source document to the
      path DIR, creating it if necessary, and adjust the images references in the document
      so they point to the extracted files. Media are downloaded, read from the file
      system, or extracted from a binary container (e.g. docx), as needed. The original
      file paths are used if they are relative paths not containing ... Otherwise filenames
      are constructed from the SHA1 hash of the contents.

- name: toc
  alias: table-of-contents
  disabled: [man, $docbook-all, jats]
  schema: boolean
  description: 
    short: "Include an automatically generated table of contents"
    long: |
      Include an automatically generated table of contents (or, in
      the case of `latex`, `context`, `docx`, `odt`,
      `opendocument`, `rst`, or `ms`, an instruction to create
      one) in the output document. This option has no effect
      if `standalone` is `false`.

      Note that if you are producing a PDF via `ms`, the table
      of contents will appear at the beginning of the
      document, before the title.  If you would prefer it to
      be at the end of the document, use the option
      `pdf-engine-opt: --no-toc-relocation`.

- name: toc-depth
  disabled: [man, $docbook-all, jats]
  schema: number
  description: | 
    Specify the number of section levels to include in the table of contents.
    The default is 3
      
- name: number-sections
  schema: boolean
  default: false
  description: 
    short: "Number section headings"
    long: |
      Number section headings rendered ouptut. By default, sections are not numbered.
      Sections with class `.unnumbered` will never be numbered, even if `number-sections`
      is specified.

- name: number-offset
  schema:
    arrayOf: number
  default: [0, 0, 0, 0, 0, 0]
  description:
    short: Offset for section headings in output (offsets are 0 by default)
    long: |
      Offset for section headings in output (offsets are 0 by default)
      The first number is added to the section number for
      top-level headings, the second for second-level headings, and so on.
      So, for example, if you want the first top-level heading in your
      document to be numbered "6", specify `number-offset: 5`. If your
      document starts with a level-2 heading which you want to be numbered
      "1.5", specify `number-offset: [1,4]`. Implies `number-sections`

- name: shift-heading-level-by
  schema: number
  description:
    short: |
      Shift heading levels by a positive or negative integer. For example, with 
      `shift-heading-level-by: -1`, level 2 headings become level 1 headings.
    long: |
      Shift heading levels by a positive or negative integer.
      For example, with `shift-heading-level-by: -1`, level 2
      headings become level 1 headings, and level 3 headings
      become level 2 headings.  Headings cannot have a level
      less than 1, so a heading that would be shifted below level 1
      becomes a regular paragraph.  Exception: with a shift of -N,
      a level-N heading at the beginning of the document
      replaces the metadata title. 
      
- name: section-divs
  enabled: [$html-files]
  schema: boolean
  description: |
    Wrap sections in `<section>` tags and attach identifiers to the enclosing `<section>`
    rather than the heading itself.

- name: identifier-prefix
  enabled: [$html-files, $docbook-all, $markdown-all, haddock]
  schema: string
  description:
    short: "Specify a prefix to be added to all identifiers and internal links."
    long: |
      Specify a prefix to be added to all identifiers and internal links in HTML and
      DocBook output, and to footnote numbers in Markdown and Haddock output. 
      This is useful for preventing duplicate identifiers when generating fragments
      to be included in other pages.

- name: title-prefix
  enabled: [$html-files]
  schema: string
  description: |
    Specify STRING as a prefix at the beginning of the title that appears in 
    the HTML header (but not in the title as it appears at the beginning of the body)

- name: strip-empty-paragraphs
  schema: boolean
  hidden: true
  description:
    short: "Ignore paragraphs with no content."
    long: |
      *Deprecated.  Use the `+empty_paragraphs` extension instead.*
      Ignore paragraphs with no content.  This option is useful
      for converting word processing documents where users have
      used empty paragraphs to create inter-paragraph space.

- name: eol
  schema: 
    enum: [lf, crlf, native]
  description:
    short: "Manually specify line endings (`lf`, `crlf`, or `native`)."
    long: |
      Manually specify line endings: `crlf` (Windows), `lf`
      (macOS/Linux/UNIX), or `native` (line endings appropriate
      to the OS on which pandoc is being run).  The default is
      `native`.

- name: strip-comments
  schema: boolean
  enabled: [$markdown-all, textile, $html-files]
  description:
    short: "Strip out HTML comments in source, rather than passing them on to output."
    long: |
      Strip out HTML comments in the Markdown source,
      rather than passing them on to Markdown, Textile or HTML
      output as raw HTML.  This does not apply to HTML comments
      inside raw HTML blocks when the `markdown_in_html_blocks`
      extension is not set.

- name: indented-code-classes
  schema:
    arrayOf: string
  description: "Specify classes to use for all indented code blocks"

- name: ascii
  schema: boolean
  description: 
    short: "Use only ASCII characters in output."
    long: |
      Use only ASCII characters in output. Currently supported for XML
      and HTML formats (which use entities instead of UTF-8 when this
      option is selected), CommonMark, gfm, and Markdown (which use
      entities), roff ms (which use hexadecimal escapes), and to a
      limited degree LaTeX (which uses standard commands for accented
      characters when possible). roff man output uses ASCII by default.

- name: default-image-extension
  schema: string
  hidden: true
  description: 
    short: |
      Specify a default extension to use when image paths/URLs have no extension.
    long: |
      Specify a default extension to use when image paths/URLs have no
      extension.  This allows you to use the same source for formats that
      require different kinds of images.  Currently this option only affects
      the Markdown and LaTeX readers.

- name: highlight-style
  schema: 
    string:
      completions: 
        - pygments
        - tango
        - espresso
        - zenburn
        - kate
        - monochrome
        - breezedark
        - haddock
        - arrow
        - atom-one
        - ayu
        - ayu-mirage
        - breeze
        - dracula
        - github
        - gruvbox
        - mokokai
        - nord
        - oblivion
        - printing
        - radical
        - solarized
        - vim-dark
  description: 
    short: Specifies the coloring style to be used in highlighted source code.
    long: |
      Specifies the coloring style to be used in highlighted source code.

      Instead of a *STYLE* name, a JSON file with extension
      ` .theme` may be supplied.  This will be parsed as a KDE
      syntax highlighting theme and (if valid) used as the
      highlighting style.

- name: syntax-definition
  schema: path
  description: "KDE language syntax definition file (XML)"

- name: syntax-definitions
  schema: 
    arrayOf: path
  description: "KDE language syntax definition files (XML)"

- name: listings
  enabled: [$pdf-all]
  schema: boolean
  description:
    short: "Use the listings package for LaTeX code blocks."
    long: |
      Use the `listings` package for LaTeX code blocks. The package
      does not support multi-byte encoding for source code. To handle UTF-8
      you would need to use a custom template. This issue is fully
      documented here: [Encoding issue with the listings package](https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings#Encoding_issue)

- name: reference-doc
  enabled: [$office-all, odt]
  schema: path
  description: | 
    Use the specified file as a style reference in producing a docx, 
    pptx, or odt file.

- name: html-math-method
  description: "TBF"
  enabled:
    [
      html,
      html4,
      html5,
      slidy,
      slideous,
      s5,
      revealjs,
      dzslides,
      epub,
      epub2,
      epub3,
    ]
  schema:
    oneOf:
      - ref: math-methods
      - object:
          properties:
            method:
              ref: math-methods
            url: string
          required: [method]
  description: "Method use to render math in HTML output"

- name: email-obfuscation
  enabled: [$html-files]
  schema:
    enum: [none, references, javascript]
  default: none
  description:
    short: "Method for obfuscating mailto: links in HTML documents."
    long: |
      Specify a method for obfuscating `mailto:` links in HTML documents.
      `none` leaves `mailto:` links as they are.  `javascript` obfuscates
      them using JavaScript. `references` obfuscates them by printing their
      letters as decimal or hexadecimal character references.  The default
      is `none`.
      
- name: tab-stop
  schema: number
  hidden: true
  description: 
    short: "Specify the number of spaces per tab (default is 4)."
    long: |
      Specify the number of spaces per tab (default is 4). Note that tabs
      within normal textual input are always converted to spaces. Tabs 
      within code are also converted, however this can be disabled with
      `preserve-tabs: false`.

- name: preserve-tabs
  schema: boolean
  default: false
  description:
    short: |
      Preserve tabs within code instead of converting them to spaces. 
    long: |
      Preserve tabs within code instead of converting them to spaces.
      (By default, pandoc converts tabs to spaces before parsing its input.) 
      Note that this will only affect tabs in literal code spans and code blocks. 
      Tabs in regular text are always treated as spaces.

- name: incremental
  enabled: [pptx, beamer, $html-pres]
  schema: boolean
  default: false
  description: |
    Make list items in slide shows display incrementally (one by one). 
    The default is for lists to be displayed all at once.

- name: slide-level
  enabled: [pptx, beamer, $html-pres]
  schema: number
  default: 2
  description: 
    short: |
      Specifies that headings with the specified level create slides.
      Headings above this level in the hierarchy are used to divide 
      the slide show into sections.
    long: |
      Specifies that headings with the specified level create slides.
      Headings above this level in the hierarchy are used to divide 
      the slide show into sections; headings below this level create 
      subheads within a slide. Valid values are 0-6. If a slide level
      of 0 is specified, slides will not be split automatically on 
      headings, and horizontal rules must be used to indicate slide 
      boundaries. If a slide level is not specified explicitly, the
      slide level will be set automatically based on the contents of
      the document

- name: epub-subdirectory
  enabled: [$epub-all]
  schema: 
    oneOf: [path, null]
  default: EPUB
  description: |
    Specify the subdirectory in the OCF container that is to hold the
    EPUB-specific contents. The default is `EPUB`. To put the EPUB 
    contents in the top level, use an empty string.

- name: epub-metadata
  enabled: [$epub-all]
  schema: path
  description:
    short: |
      Look in the specified XML file for metadata for the EPUB.
      The file should contain a series of [Dublin Core elements](https://www.dublincore.org/specifications/dublin-core/dces/).
    long: |
      Look in the specified XML file for metadata for the EPUB.
      The file should contain a series of [Dublin Core elements](https://www.dublincore.org/specifications/dublin-core/dces/).
      For example:

      ```xml
      <dc:rights>Creative Commons</dc:rights>
      <dc:language>es-AR</dc:language>
      ```

      By default, pandoc will include the following metadata elements:
      `<dc:title>` (from the document title), `<dc:creator>` (from the
      document authors), `<dc:date>` (from the document date, which should
      be in [ISO 8601 format]), `<dc:language>` (from the `lang`
      variable, or, if is not set, the locale), and `<dc:identifier
      id="BookId">` (a randomly generated UUID). Any of these may be
      overridden by elements in the metadata file.

      Note: if the source document is Markdown, a YAML metadata block
      in the document can be used instead.

- name: epub-fonts
  enabled: [$epub-all]
  schema:
    arrayOf: path
  description:
    short: "Embed the specified fonts in the EPUB"
    long: |
      Embed the specified fonts in the EPUB. Wildcards can also be used: for example,
      `DejaVuSans-*.ttf`. To use the embedded fonts, you will need to add declarations
      like the following to your CSS:

      ```css
      @font-face {
        font-family: DejaVuSans;
        font-style: normal;
        font-weight: normal;
        src:url("DejaVuSans-Regular.ttf");
      }
      ```

- name: epub-chapter-level
  enabled: [$epub-all]
  schema: number
  default: 1
  description:
    short: |
      Specify the heading level at which to split the EPUB into separate
      chapter files.
    long: |
      Specify the heading level at which to split the EPUB into separate
      chapter files. The default is to split into chapters at level-1
      headings. This option only affects the internal composition of the
      EPUB, not the way chapters and sections are displayed to users. Some
      readers may be slow if the chapter files are too large, so for large
      documents with few level-1 headings, one might want to use a chapter
      level of 2 or 3.

- name: epub-cover-image
  enabled: [$epub-all]
  schema: path
  description: |
    Use the specified image as the EPUB cover. It is recommended
    that the image be less than 1000px in width and height. 

- name: reference-links
  enabled: [markdown, gfm, commonmark, rst]
  schema: boolean
  description: 
    short: |
      Use reference-style links, rather than inline links, in writing Markdown
      or reStructuredText. 
    long: |
      Use reference-style links, rather than inline links, in writing Markdown
      or reStructuredText.  By default inline links are used.  The
      placement of link references is affected by the
      `reference-location` option.

- name: reference-location
  enabled: [$markdown-all, muse, $html-files]
  schema:
    enum: [block, section, margin, document]
  description:
    short: |
      Location for footnotes and references
    long: |
      Specify whether footnotes (and references, if `reference-links` is
      set) are placed at the end of the current (top-level) block, the
      current section, the margin, or the end of the document. 

- name: markdown-headings
  enabled: [$markdown-all, ipynb]
  schema: 
    enum: [setext,atx]
  default: atx
  description: |
    Specify whether to use ATX-style (`#`-prefixed) or
    Setext-style (underlined) headings for level 1 and 2
    headings.
  
- name: track-changes
  enabled: [docx]
  schema:
    enum: [accept, reject, all]
  default: accept
  description:
    short: |
      Specifies what to do with insertions, deletions, and comments produced by 
      the MS Word “Track Changes” feature.
    long: |
      Specifies what to do with insertions, deletions, and comments
      produced by the MS Word "Track Changes" feature.  `accept` (the
      default) processes all the insertions and deletions.
      `reject` ignores them.  Both `accept` and `reject` ignore comments.
      `all` includes all insertions, deletions, and comments, wrapped
      in spans with `insertion`, `deletion`, `comment-start`, and
      `comment-end` classes, respectively. The author and time of
      change is included. `all` is useful for scripting: only
      accepting changes from a certain reviewer, say, or before a
      certain date. If a paragraph is inserted or deleted,
      `track-changes=all` produces a span with the class
      `paragraph-insertion`/`paragraph-deletion` before the
      affected paragraph break. This option only affects the docx
      reader.

- name: html-q-tags
  enabled: [$html-all]
  schema: boolean
  default: false
  description: "Use `<q>` tags for quotes in HTML."

- name: css
  enabled: [$html-all]
  schema:
    maybeArrayOf: path
  description: "One or more CSS style sheets."
      
- name: ipynb-output
  enabled: [ipynb]
  schema:
    enum: [none, all, best]
  default: best
  description: 
    short: "Determines which ipynb cell output formats are rendered."
    long: |
      Determines which ipynb cell output formats are rendered. `all` means
      that all of the data formats included in the original are
      preserved.  `none` means that the contents of data cells
      are omitted.  `best` causes pandoc to try to pick the
      richest data block in each output cell that is compatible
      with the output format. The default is `best`.
  
- name: request-headers
  schema:
    arrayOf:
      arrayOf:
        schema: string
        length: 2
  description: "Headers to include with HTTP requests by Pandoc"

- name: fail-if-warnings
  schema: boolean
  default: false
  description: "Exit with error status if there are any warnings."

- name: dump-args
  schema: boolean
  default: false
  hidden: true
  description: "Print information about command-line arguments to *stdout*, then exit."

- name: ignore-args
  schema: boolean
  default: false
  hidden: true
  description: "Ignore command-line arguments (for use in wrapper scripts)."

- name: trace
  schema: boolean
  default: false
  hidden: true
  description: "Display trace debug output."
