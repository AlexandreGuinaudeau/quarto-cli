


Theme TippyJs
- Switch index.md to format PDF. Error rendering document.

SASS:
- cache should be in files, use DependencyFile.name to set pretty name
- should i delete sassbundles from formatextras once resolved 
- Import bootswatch themes into "unified" format (bootstrap beta 3 with script)

Windows:
- Need to figure out what the deal is with quarto bundled error (cliffy?) before next published release.

HTML:  
  - option to have shaded code blocks:
    code-background: true | false | "color-literal"
    code-border: true | false | "color-literal"
    make sure that e.g. zenburn has it's background color overridden by us
    automaticallly switch to a "dark theme friendly" highlight-style

TODO: new scheme for dynamic preview based on keep-md (in a private dir like idx)

TODO: prime thematic with theme info

TODO:  htmlwidgets need a fluid container (as perhaps do jupyter widgets)


Future
=========================================================================

TODO: rsc_publish function based on rmarkdown::publish_site

Search: https://stork-search.net/
TODO: embedding pdfs in website via pdf.js
TODO: commenting via Hypothesis  

TODO: do template patching at configure time or just use pandoc version keyed cache (25ms)

TODO: tell shiny what version of bootstrap we are using

TODO: consider local mathjax case (or katex by default w/ local?)

TODO: clean:
 quarto clean output 
 quarto clean cache 
 quarto clean state
 quarto clean frozen
 
 quarto clean output cache state frozen
 quarto clean all (output,cache,state, frozen)
  - global purge?

TODO: consider auto-resolution of links to input docs (e.g. .Rmd, .ipynb, etc.)
(need to consider how this interacts with resource discovery, as linking to the source
files could cause them to be discovered and copied. probably needs to be embedded
where we fixup refs, but really need the projectInputFiles for this)


//  Websites:
//    - edit on github
//    - google analytics (or coolster alternative). cookie consent
//    - twitter card

TODO: generalized warning system (look for 'WARNING:')


TODO: common yaml option reading (all docs use yaml)
use Rmd-style chunks for Jupyter (Jmd). YAML encoding.
(need to add support for this to Jupytext)
Use e.g. fig-width vs. fig.width?  figwidth
Jmd


```{python mylabel}
echo: true
tags: ["foo", "bar"]


```




  - code menu (show all, hide all, download code)
  - lightbox
  - auto-growing iframes
  - progressive image loading data-src


Look into Teal: https://news.ycombinator.com/item?id=26247813



Could say that while there is *always* a lockfile, package installations
are always global (b/c they popuplate the global cache). the only local
thing you need is the deps.ts / import_map.json, etc.

extensions:
  fancytweet: https://quarto.land/fancytweet@3.4.2
  

TODO: revealjs images resources (global, per slide)
      (metadata fields that point to files, ast elements / attributes that point to files)

{{ fancytweet qwerqwer }}


quarto install fancytweet

quarto update fancytweet

for standalone document render, we will promot for installation of extensions
as necessary, and add the extensions: key in YAML at the bottom of the document

- install/update commands put the latest version in the global cache
- new documents use the latest version in the cache
- if you run install/update within a project then it updates the lockfile

Extensions sources:
  - global cache
  - project lockfile
  - 'extensions' inside a yaml key

_quarto/
  .quarto
  .gitignore
     .quarto/
     extensions/
   metadata.yml
   
   package-lock.json
   node_modules/

   extensions.yml
   extensions/
      corporate-special-sauce/


quarto bundle foo.Rmd

repositories:
   sauce: https://corporate-sauce.net


quarto install sauce/foo



_quarto
  .gitignore
     .quarto
     extensions/

  .quarto/ 

  metadata.yml

  extensions.yml
  extensions/
  


Projects:



FUTURE
4) Lock file / Extensions


- there is always an output_dir for projects (we could put caches/intermedite md there)
- alternatively, we could stick this stuff in _quarto (which could have a default .gitignore)

Renders have side effects (knit_meta) that need to be preserved for books.
The side effects might require an id of some kind (for managing duplicates):
   R: 
     - html dependencies
     - preserves
     - patches (e.g. slides for htmlwidgets)
     - intermediates/intermediates-dir

Engine returns a data structure that includes:
    - markdown for pandoc
    - arbitrary data that will be passed back to it to create pandoc includes
    - arbitrary data that will be passed back to it for postprocessing


- Project is always a _quarto folder
  - for a document we crawl up tree to find project folder
  - slurp up every yaml file in folder and merge
  - default suggestion: metadata.yml
  ---
  project:
    name:
    type:
    output-dir:
    files: [foo.ipynb]
    include: 
      - supporting.py
    exlude:
      - ignore.png

  format:
    html:
      main-font: Arial

  bibliography: foo.bibtex

  metadata-file: crossref.yml
  ---


A 'format' is a director or zip file which is:
  - Located in the _quarto directory
  - Format YAML (must declare base)
  - Arbitrary other files that can be referenced (relatively) by the format YAML


Port a dozen or rticles formats
  - Authors metadata standard 

# standalone document formats



metadata:
   - Inline YAML in code chunks
       - https://gist.github.com/jjallaire/a315f08ba5007678f3f8cbcb093cafb4
       - PR for jupytext to support the same for md:markdown
       - PR for knitr so that knitr::purl ignores the front matter
       - RStudio also needs to ignore the front matter
  

quarto publish:
  - RSC
  - Netlify
  - WordPress
  - Confluence

html-slides:

library(shiny)
library(bs4)


{{ pagebreak }}
{{ include <path> }}
{{ <reference metadata>  }}
{{ rstudio.version }}
{{= print("x") }}
{{< figure projections.xlsx#chunk-label caption="asfdasdf" label="myplot" >}}
{{< table projections.xlsx#fy-2019 label="projections" label="">}}
{{< text notebook.Rmd##chunk-label >}}
{{< tweet https://twitter.com/foo/status/34453323455 >}}
{{< video https://youtube.com/foo/status/34453323455 >}}



Future
-----------------------------------------

Take a look at prosemirror-typerighter: https://github.com/guardian/prosemirror-typerighter

Take a look at Pluto (Julia)

- WordPress (https://developer.wordpress.com/docs/api/)

- RStudio IDE Visual Editor for quarto
    - crossref system
    - project hooks (crossref indexing, build, etc.)
    - publishing hooks for RSC
    - jupyter front-end


- Visual Studio Code 
    - visual editor extension
    - quarto publishing workflow (preview, etc.)


<< write tests >>

https://github.com/microsoft/vscode-jupyter
https://devblogs.microsoft.com/python/introducing-the-jupyter-extension-for-vs-code/


Cleanup
--------------------------------------------

Extracate the cache dir logic from rmarkdown::render and call that


discover index.Rmd or ui.Rmd for quarto run. can't rely on
rmarkdown::run b/c we need to figure out which Rmd to render




Future
---------------------------------------------

- Evaluate esbuild

- Consider yaml for chunk options
    * knitr
    * jupytext pr


Julia Dev workflow

- Make sure that Revise.jl is loaded at startup https://timholy.github.io/Revise.jl/stable/

- Run Julia in Quarto dir

- Switch to pkg mode "]" and execute "dev ."

- Exit pkg mode (backspace)

- using Quarto

- changes should show up automatically now