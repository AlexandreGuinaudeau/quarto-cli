

/*
// parse any css resource files for additional resources
  // https://deno.land/x/css@0.2.0
  // see https://github.com/jgm/pandoc/blob/4f3434586743afb69f00ca91fe6ec9b68b39ae7e/src/Text/Pandoc/SelfContained.hs#L144
  // @import:
  //  - @import url("bluish.css") speech;
  //  - @import "common.css" screen;
  
  @import 'custom.css';
  @import url("chrome://communicator/skin/");

  <css_property>: url("https://example.com/image.png")
  <css_property>: url('https://example.com/image.png')
  <css_property>: url(https://example.com/image.png)

  // @url - The url() CSS function is used to include a file. The parameter is an absolute URL, a relative URL, or a data URI.
  const addCssResources = (file: string) => {
    console.log(file);
  };
  resourceFiles
    .filter((file) => extname(file).toLowerCase() === ".css")
    .map(addCssResources);
  */


//  Websites:
//    - Navigation
//    - sitemap.xml
//    - search


TODO: generalized warning system (look for 'WARNING:')



Charles:

- Path issue when trying to use tinytex with Quarto sandbox (Christophe email)

- Need to output more granular information with quarto --version 
   - automate version generation similar to releases (w.incrementing section)


-  Layout:
    - LaTeX widths. Anywhere you have a space in a column use % 
    - HTML widths (eliminate space between images)
    - "natural width" (0?)
    - top align all content in layout cells

-  Can't render a file in Google Drive

HTML:
  - floating toc
  - anchor links
  - copy code block to clipboard
  - code menu (show all, hide all, download code)
  - tabs
  - admonitions

Project:
  - Do files not listed in project: files: but in the directory still inherit the project metadata when rendered directly

resource file discovery needs to look in raw html, referended css, etc.
(we could do the css references in typescript)

filter params need some "escaping" so they aren't interpreted as markdown (e.g. use an html comment)


Could say that while there is *always* a lockfile, package installations
are always global (b/c they popuplate the global cache). the only local
thing you need is the deps.ts / import_map.json, etc.

extensions:
  fancytweet: https://quarto.land/fancytweet@3.4.2
  

{{ fancytweet qwerqwer }}


quarto install fancytweet

quarto update fancytweet

for standalone document render, we will promot for installation of extensions
as necessary, and add the extensions: key in YAML at the bottom of the document

- install/update commands put the latest version in the global cache
- new documents use the latest version in the cache
- if you run install/update within a project then it updates the lockfile




Extensions sources:
  - global cache
  - project lockfile
  - 'extensions' inside a yaml key

_quarto/
  .quarto
  .gitignore
     .quarto/
     extensions/
   metadata.yml
   
   package-lock.json
   node_modules/

   extensions.yml
   extensions/
      corporate-special-sauce/


quarto bundle foo.Rmd

repositories:
   sauce: https://corporate-sauce.net


quarto install sauce/foo



_quarto
  .gitignore
     .quarto
     extensions/

  .quarto/ 

  metadata.yml

  extensions.yml
  extensions/
  


Projects:

2) Project types (built in and extensions)
  - project global metadata
    - type: <- later
    - name: 
    - output-dir: (optional)
    - lock-extensions: true

  - delegate rendering to the type implementation
  - Default type built in
    - default render all to markdown, then stitch together and pandoc that
    - supports files (files to render), include/exclude (files to copy  / exclude from output dir)
  - Need to support incredmental renders
    - maybe keep cache of MDs around (in quarto cache dir)

3) Quarto project commands
  - create a new project
  - rendering a project
  - read project data for a directory (for example as JSON)
  - cleaning a project directory

FUTURE
4) Lock file / Extensions


- there is always an output_dir for projects (we could put caches/intermedite md there)
- alternatively, we could stick this stuff in _quarto (which could have a default .gitignore)

Renders have side effects (knit_meta) that need to be preserved for books.
The side effects might require an id of some kind (for managing duplicates):
   R: 
     - html dependencies
     - preserves
     - patches (e.g. slides for htmlwidgets)
     - intermediates/intermediates-dir

Engine returns a data structure that includes:
    - markdown for pandoc
    - arbitrary data that will be passed back to it to create pandoc includes
    - arbitrary data that will be passed back to it for postprocessing


- Project is always a _quarto folder
  - for a document we crawl up tree to find project folder
  - slurp up every yaml file in folder and merge
  - default suggestion: metadata.yml
  ---
  project:
    name:
    type:
    output-dir:
    files: [foo.ipynb]
    include: 
      - supporting.py
    exlude:
      - ignore.png

  format:
    html:
      main-font: Arial

  bibliography: foo.bibtex

  metadata-file: crossref.yml
  ---

Project system:
  - See MkDocs: https://docs.google.com/document/d/16Lp39BolpTR0NzbQQ6ebr9bawYth8EeivBo0q4qapVY/edit#heading=h.ibf8kici39py
  - quarto create foo
  - quarto create pdf foo.Rmd 
  - allow _quarto config directory that merges all contained files
    (lock file will go there as well)
  - Terminate at _quarto.yml w/ project: true
    (need to first determine if there is a project somewhere in the parent tree,
     if there is, then use this behavior, if not, use the first match)
  - External interactions with projects (output_dir, clean, etc.)
  - website / book format variations

A 'format' is a director or zip file which is:
  - Located in the _quarto directory
  - Format YAML (must declare base)
  - Arbitrary other files that can be referenced (relatively) by the format YAML


Port a dozen or rticles formats
  - Authors metadata standard 

# markdown for bootstrap concepts/constructs
# standalone document formats

html:
  template: bootstrap | coolsterthing

defined set of markdown constructs and css classes

html-article:
  css-framework: bootstrap
html-notebook:
  css-framework: bootstrap

metadata:
   - Inline YAML in code chunks
       - https://gist.github.com/jjallaire/a315f08ba5007678f3f8cbcb093cafb4
       - PR for jupytext to support the same for md:markdown
       - PR for knitr so that knitr::purl ignores the front matter
       - RStudio also needs to ignore the front matter
  

quarto publish:
  - RSC
  - Netlify
  - WordPress
  - Confluence

html-slides:

library(shiny)
library(bs4)


{{ pagebreak }}
{{ include <path> }}
{{ <reference metadata>  }}
{{ rstudio.version }}
{{= print("x") }}
{{< figure projections.xlsx#chunk-label caption="asfdasdf" label="myplot" >}}
{{< table projections.xlsx#fy-2019 label="projections" label="">}}
{{< text notebook.Rmd##chunk-label >}}
{{< tweet https://twitter.com/foo/status/34453323455 >}}
{{< video https://youtube.com/foo/status/34453323455 >}}



Future
-----------------------------------------

Take a look at prosemirror-typerighter: https://github.com/guardian/prosemirror-typerighter

Take a look at Pluto (Julia)

- WordPress (https://developer.wordpress.com/docs/api/)

- RStudio IDE Visual Editor for quarto
    - crossref system
    - project hooks (crossref indexing, build, etc.)
    - publishing hooks for RSC
    - jupyter front-end


- Visual Studio Code 
    - visual editor extension
    - quarto publishing workflow (preview, etc.)


<< write tests >>

https://github.com/microsoft/vscode-jupyter
https://devblogs.microsoft.com/python/introducing-the-jupyter-extension-for-vs-code/


Cleanup
--------------------------------------------

Extracate the cache dir logic from rmarkdown::render and call that


discover index.Rmd or ui.Rmd for quarto run. can't rely on
rmarkdown::run b/c we need to figure out which Rmd to render

Meta-concepts on top of AST: e.g. 
  - card
    ::: .card
    <image>
    # heading
    
    :::

  - tabs
  - admonitions
  - zoom image
  - incremental images 



Future
---------------------------------------------

- Evaluate esbuild

- Consider yaml for chunk options
    * knitr
    * jupytext pr


Julia Dev workflow

- Make sure that Revise.jl is loaded at startup https://timholy.github.io/Revise.jl/stable/

- Run Julia in Quarto dir

- Switch to pkg mode "]" and execute "dev ."

- Exit pkg mode (backspace)

- using Quarto

- changes should show up automatically now