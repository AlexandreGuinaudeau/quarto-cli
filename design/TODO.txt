Markdown Serialization
=====================================================================

- update documentation:
    - computations.md article
    - authoring-tools.md article
    - output-formats.md article added to getting started section
    - Update computational sections of Figures and Crossrefs 
    - remove defunct pages
    - article on using with hugo
    - take down wiki and put this link up

JJ: 

- TODO: measure lag at the beginning of project single file render
- make sure that crossrefs are appropriately disabled for unumbered chapters
- More opinionated <kbd>
- can we make section-numbers work more sensibly with H2 (chapter-level). --top-level-division, --shift-heading-level


CT:
- search highlighting like is done in mastering-shiny
  (https://mastering-shiny.org/performance.html?q=plot#caching-plots)
  jumping between highlighted terms (via keyboard or affordance at right or top)

- Better treatment for code blocks within tabs (just use a thin border, could
  consider background color)





TODO
=====================================================================

TODO: Scss function(s) for referencing fonts (e.g. google, etc...)
  @useFont('google', 'roboto') (automates downloading of fonts and generating rules to load them)

TODO: try out article-per-directory w/ "page bundles" (auto-resolve directories to index.html)
TODO: also try output-file: index.html

TODO: centralized _cache dir for projects (alongside _freeze)
 
TODO: project level renders should forward params (or do they?)

TODO: merging includes at the lua filter level does not appear
      to work for ebooks. perhaps even dynamically injecting
      metadata for includes doesn't work

TODO: convert to css grid for columns (allows for content floating and crossing margin)

- Language customization for projects/books

- image float feature (across formats)

- Can get HTML figcaption to behave more like latex (center if less)




quarto-python dev workflow:

```bash
$ python3 -m venv .venv    
$ source .venv/bin/activate
$ pip install -e ./ 
```


Installation/Compilation
=====================================================================

- Discover our executables path:
   - https://github.com/rstudio/rstudio/blob/master/src/cpp/core/system/PosixSystem.cpp#L892-L931
   - https://github.com/rstudio/rstudio/blob/master/src/cpp/core/system/Win32System.cpp#L498-L510


RStudio IDE
=====================================================================

- visual editor needs to use the full path to chapters for the id-prefix for footnotes

- New project type: "quarto"
- Introduce "Render on Save" 
- Automatically use quarto render when in quarto project (unless 'output: ')
- Crossrefs 
- Divs
- Run dev server on startup? Automatically disable external/viewer preview when dev server running
- When running the dev server, the "Preview" or "Render" button for .md just saves and brings Viewer to front


JupyterLab
======================================================================

- https://github.com/jupyterlab/jupyterlab-latex

- webshot equivalent for printed output


- footnotes: 
    (1) do we have consistent behavior across formats
    (2) can we provide options for per-chapter vs. global

- Bibliography per chapter

- Glossaries (https://jupyterbook.org/content/content-blocks.html#glossaries)

- Indexes (equivalent of \makeindex)
{{ pagebreak }}
{{ makeindex }}
[span]{index="foo"}


- investigate observable integration:
     - Embed/macro source
     - Notebook engine:
         - https://starboard.gg/gz/open-source-observablehq-nfwK2VA
         - https://observablehq.com/@asg017/an-unofficial-observablehq-compiler
         - https://observablehq.com/@asg017/introducing-dataflow
     - RStudio/authoring implications

- Concept of non-HTML themes (e.g. LaTeX template, docx template)


- projects: shell command to run before/after render or per-file render

- localization?


HTML Format (all these require grid, all need to deal with floating toc)
- Sidebar content (https://jupyterbook.org/content/layout.html#sidebars-within-content)
- Margin content (once we are using CSS grid) https://jupyterbook.org/content/layout.html#margin-content
- Full width content (https://jupyterbook.org/content/layout.html#full-width-code-cells)
- Figure captions in the right margin
- fig.classes (knitr mapping, jupyter)



HIGHER PRIORITY BACKGROUND WORK

code chunks
===========================================
consider improving line number appearance and indention
copy button should only copy code: https://github.com/rstudio/bookdown/issues/1072


LOWER PRIORITY BACKGROUND WORK



callouts
==========================================
TODO: Allow user to provide a custom emoji for a callout. 
TODO: If supporting emoji easy to support color too
TODO: could allow definition of callout types (emoji + color) and automatically generate css to format them
      - what about latex / asciidoc :(
callout-types:
  - name: my-custom-type
    category: info
    emoji: emoji
    color: red
:::{.callout-my-custom-type} 
This is a custom callout
:::

code chunks
===========================================
TODO: Support line highlighting
  (use inline comment to denote lines that should be highlighted?)
TODO: Ansi escape support
  (need to be sure that ansi escapes use theme or highlight colors)


theming
==============================================
TODO: Real dark mode support
      - allow theme swithing with nice ui
      - auto detect dark mode vs light mode in supported platforms
      - need to capture dark and light highlight styles
      - need to deal with thematic render
TODO ensure that when wide, we try bumping up font size slightly

navigation
==============================================
TODO: Consider adding toggle to hide sidebar
TODO: Consider reading mode that hides all unecessary chrome

GA
==============================================
TODO: be sure we do cookie consent banner

Website Footers:
==============================================
- Add TOC footer (flowing vs pinned) - flowing
- Add TOC header (e.g. before and and after TOC)
- Add Sidebar footer (flowing vs pinned) - flowing
- Add Sidebar header (e.g. before and and after Sidebar)
- Body footer?
- Site footer?
- Support arbitrary HTML content in sidebar
- hero image support

Logging
=========================================================================
// TODO: Verbose support?
// TODO: Consider converting quiet in render pipeline to actually emit debug output


TinyTex
============================================================================
TODO: `quarto install tinytex` could optionally accept a version (?)
TODO: Consider consolidating the main loop (single loop rather than pdf compile followed by loop)
TODO: Need to be sure all updates to tinytex are in quarto-latexmk
TODO: Need to provide version info for quarto-latexmk


Future
=========================================================================

TODO: can we get the progress bar for render to work in the rstudio console?

TODO: add cleverref and do it by default

TODO: launch buttons for interactivity (https://jupyterbook.org/interactive/launchbuttons.html#launch-buttons-for-interactivity)
      - run on binder and/or rstudio cloud

TODO: section ref without numbers
TODO: redirection and 404

TODO: some sort of out-of-line execution

TODO: easy way to interpolate variables for Jupyter

TODO: stats on render (how executed, runtime) --print-stats

TODO: format text output with ansi color codes (filter)
      https://github.com/r-lib/crayon/issues/24

TODO: prime thematic with theme info


Search: https://stork-search.net/
TODO: embedding pdfs in website via pdf.js
(note: add hypotheis support for pdf.js at the same time)

TODO: do template patching at configure time or just use pandoc version keyed cache (25ms)

TODO: tell shiny what version of bootstrap we are using

TODO: consider local mathjax case (or katex by default w/ local?)

TODO: clean:
 quarto clean output 
 quarto clean cache 
 quarto clean state
 quarto clean frozen
 
 quarto clean output cache state frozen
 quarto clean all (output,cache,state, frozen)
  - global purge?


create-project wizard

support for creating / using virtual environments


- Epigraph (blockquote w/ author)


// HTML format:
     - panels/cards
     - auto-growing iframes
     - code menu (show all, hide all, download code)
     - lightbox
     - run on binder and/or rstudio cloud
     - progressive image loading data-src


//  Websites:
//  - edit on github
//  - google analytics (or coolster alternative). cookie consent
//  - twitter card
//  - paginator



Look into Teal: https://news.ycombinator.com/item?id=26247813

Could say that while there is *always* a lockfile, package installations
are always global (b/c they popuplate the global cache). the only local
thing you need is the deps.ts / import_map.json, etc.

extensions:
  fancytweet: https://quarto.land/fancytweet@3.4.2
  

TODO: multi-lingual sites
        - top-level content directories:  en/, zh/, per-language config (menus)



{{ fancytweet qwerqwer }}


quarto install fancytweet

quarto update fancytweet

for standalone document render, we will promot for installation of extensions
as necessary, and add the extensions: key in YAML at the bottom of the document

- install/update commands put the latest version in the global cache
- new documents use the latest version in the cache
- if you run install/update within a project then it updates the lockfile

Extensions sources:
  - global cache
  - project lockfile
  - 'extensions' inside a yaml key

_quarto/
  .quarto
  .gitignore
     .quarto/
     extensions/
   metadata.yml
   
   package-lock.json
   node_modules/

   extensions.yml
   extensions/
      corporate-special-sauce/


quarto bundle foo.Rmd

repositories:
   sauce: https://corporate-sauce.net


quarto install sauce/foo



_quarto
  .gitignore
     .quarto
     extensions/

  .quarto/ 

  metadata.yml

  extensions.yml
  extensions/
  


Projects:



FUTURE
4) Lock file / Extensions




A 'format' is a director or zip file which is:
  - Located in the _quarto directory
  - Format YAML (must declare base)
  - Arbitrary other files that can be referenced (relatively) by the format YAML


# paged.js format

Port a dozen or rticles formats  (collect feedback, currently maintaining templates is unweildy)
  - Authors metadata standard 
  - Shared schema

# standalone document formats



metadata:
   - Inline YAML in code chunks
       - https://gist.github.com/jjallaire/a315f08ba5007678f3f8cbcb093cafb4
       - PR for jupytext to support the same for md:markdown
       - PR for knitr so that knitr::purl ignores the front matter
       - RStudio also needs to ignore the front matter
  

quarto publish:
  - RSC
  - Netlify
  - WordPress
  - Confluence

html-slides:

library(shiny)
library(bs4)


{{ pagebreak }}
{{ include <path> }}
{{ <reference metadata>  }}
{{ rstudio.version }}
{{ metadata.date | formatDate }}  ?
{{= print("x") }}
{{< figure projections.xlsx#chunk-label caption="asfdasdf" label="myplot" >}}
{{< table projections.ipynb#fy-2019 label="projections" label="">}}
{{< text notebook.Rmd##chunk-label >}}
{{< tweet https://twitter.com/foo/status/34453323455 >}}
{{< video https://youtube.com/foo/status/34453323455 >}}


Future
-----------------------------------------

TODO: algorithms: https://github.com/SaswatPadhi/pseudocode.js

Take a look at prosemirror-typerighter: https://github.com/guardian/prosemirror-typerighter

Take a look at Pluto (Julia)

- WordPress (https://developer.wordpress.com/docs/api/)

- RStudio IDE Visual Editor for quarto
    - crossref system
    - project hooks (crossref indexing, build, etc.)
    - publishing hooks for RSC
    - jupyter front-end


- Visual Studio Code 
    - visual editor extension
    - quarto publishing workflow (preview, etc.)


- write tests

https://github.com/microsoft/vscode-jupyter
https://devblogs.microsoft.com/python/introducing-the-jupyter-extension-for-vs-code/


Cleanup
--------------------------------------------

Extracate the cache dir logic from rmarkdown::render and call that


discover index.Rmd or ui.Rmd for quarto run. can't rely on
rmarkdown::run b/c we need to figure out which Rmd to render




Future
---------------------------------------------

- Evaluate esbuild / https://vitejs.dev/

- Consider yaml for chunk options
    * knitr
    * jupytext pr


Julia Dev workflow

- https://github.com/dmolina/DaemonMode.jl
- Make sure that Revise.jl is loaded at startup https://timholy.github.io/Revise.jl/stable/
  

- Run Julia in Quarto dir

- Switch to pkg mode "]" and execute "dev ."

- Exit pkg mode (backspace)

- using Quarto

- changes should show up automatically now


