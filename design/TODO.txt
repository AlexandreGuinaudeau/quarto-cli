
TODO: concurrent renders (w/ multiple dev servers) can cause problems with moving 
output files to different output dirs
  - solution to this may be to have the dev server have it's own complete copy 
    of the input dir ()


TODO: render progress for R quarto_serve()
TODO: open in browser with no index.html for R quarto_serve()

TODO: review split("\n and consider replacing with split(/\r?\n/)

git complaint about git ignore when rendering outside of git dir

Books
=========================================================================

- we need section cross refs to NOT require section numbering. links to sections need to be global
  HTML books you need to use crossrefs
- [Another option is that we resolve .md#foobar to just be #foobar  @sec:asdfasdf]

- For HTML output, we want to execute pandoc for each file, however some things are effectively "global":
    - cross references
        - persist the index across all pandoc renders (resolveRefs in a separate pass at the end)
        - paste together all of of the markdown and run the filters on it, then run pandoc without the filters on each file
    - bibliography 
        - per page option?
        - global: 
            - collect up every key that is used anywhere in the book
            - tell pandoc to create a page using those keys
            - hide the bibliography in the individual chapters
            - fixup up the citation links to point to the bibliography

- Should seriously consider whether HTML should also be pasted together. If we do the global render followed by split, 
  then we need to save out the dependencies and htmlPreserve and apply it per file

- Incremental render uses the freezer

- Running all markdown files as one pandoc render (pdf, epub, asciidoc, whatever)
    - we need to render one format at a time
    - we need to accumulate a set of executeResults (it would be nice if only one place computed the filesDir)
    - we need to feed all of those executeResults back to pandoc together 
         - concatenate the dependencies and resolve them in one step
         - concatenate the markdown (fixup relative references -- the md file needs a marker e.g. a comment to indicate the offset)
           (done in a lua filter)
         - there needs to be a source of front-matter for that file (derived from _quarto.yml)
         - (if there is front-matter in chapters e.g. for web output, we need to strip it out of the markdown)
    - then we run the preserve step with an array of preserves
    - visual editor needs to use the full path to chapters for the id-prefix for footnotes


IDE/Docs unlock users actually using this and engaging with it


- webshot equivalent for printed output

- Glossaries (https://jupyterbook.org/content/content-blocks.html#glossaries)
- Indexes (equivalent of \makeindex)
{{ pagebreak }}
{{ makeindex }}
[span]{index="foo"}


- Concept of non-HTML themes (e.g. LaTeX template, docx template)


- projects: shell command to run before/after render or per-file render

- localization?


HTML Format (all these require grid, all need to deal with floating toc)
- Sidebar content (https://jupyterbook.org/content/layout.html#sidebars-within-content)
- Margin content (once we are using CSS grid) https://jupyterbook.org/content/layout.html#margin-content
- Full width content (https://jupyterbook.org/content/layout.html#full-width-code-cells)
- Figure captions in the right margin
- fig.classes (knitr mapping, jupyter)

Renders have side effects (knit_meta) that need to be preserved for books.
The side effects might require an id of some kind (for managing duplicates):
   R: 
     - html dependencies
     - preserves
     - patches (e.g. slides for htmlwidgets)
     - intermediates/intermediates-dir




Logging
=========================================================================
// TODO: Errors and warnings go to a log
// Pandoc: --log (writes in machine readable form to log file)
// quarto
// --log foo.txt
// --log-level "debug" : "info"
// --log-format: "json"

// TODO: Should we clean log between runs or just keep appending
// TODO: Be sure stack traces show up in logs for debug builds.
// TODO: Json support
// TODO: write log preamble with environment, version and so on
// TODO: If error, should we also emit environment information
Logging to respect quiet flag 
Use global functions for logging (not our overrides (perhaps except for logging an error)

Tinytex install / uninstall / update broken?
Tinytex install update uninstall should require name
Tinytex install should optionally accept a version (?)



Future
=========================================================================

TODO: can we get the progress bar for render to work in the rstudio console?

TODO: add cleverref and do it by default

TODO: produce 'tinytex' standalone binary (map command line options, etc.)

TODO: launch buttons for interactivity (https://jupyterbook.org/interactive/launchbuttons.html#launch-buttons-for-interactivity)
      - run on binder and/or rstudio cloud

TODO: section ref without numbers
TODO: redirection and 404

TODO: some sort of out-of-line execution

TODO: easy way to interpolate variables for Jupyter

TODO: stats on render (how executed, runtime) --print-stats

TODO: format text output with ansi color codes (filter)
      https://github.com/r-lib/crayon/issues/24

TODO: prime thematic with theme info

TODO: consider using grid for column layout (margin figures)

Search: https://stork-search.net/
TODO: embedding pdfs in website via pdf.js
(note: add hypotheis support for pdf.js at the same time)

TODO: do template patching at configure time or just use pandoc version keyed cache (25ms)

TODO: tell shiny what version of bootstrap we are using

TODO: consider local mathjax case (or katex by default w/ local?)

TODO: clean:
 quarto clean output 
 quarto clean cache 
 quarto clean state
 quarto clean frozen
 
 quarto clean output cache state frozen
 quarto clean all (output,cache,state, frozen)
  - global purge?


- Epigraph (blockquote w/ author)


// HTML format:
     - panels/cards
     - auto-growing iframes
     - code menu (show all, hide all, download code)
     - lightbox
     - run on binder and/or rstudio cloud
     - progressive image loading data-src


//  Websites:
//  - edit on github
//  - google analytics (or coolster alternative). cookie consent
//  - twitter card
//  - paginator


TODO: generalized warning system (look for 'WARNING:')

Common markdown format: (e.g. qmd)

TODO: common yaml option reading (all docs use yaml)
use Rmd-style chunks for Jupyter (Jmd). YAML encoding.
(need to add support for this to Jupytext)
Use e.g. fig-width vs. fig.width?  figwidth
Jmd

```{r mylabel}
echo: true
tags: ["foo", "bar"]


```


```{python mylabel}
echo: true
tags: ["foo", "bar"]


```

Look into Teal: https://news.ycombinator.com/item?id=26247813

Could say that while there is *always* a lockfile, package installations
are always global (b/c they popuplate the global cache). the only local
thing you need is the deps.ts / import_map.json, etc.

extensions:
  fancytweet: https://quarto.land/fancytweet@3.4.2
  

TODO: multi-lingual sites
        - top-level content directories:  en/, zh/, per-language config (menus)



{{ fancytweet qwerqwer }}


quarto install fancytweet

quarto update fancytweet

for standalone document render, we will promot for installation of extensions
as necessary, and add the extensions: key in YAML at the bottom of the document

- install/update commands put the latest version in the global cache
- new documents use the latest version in the cache
- if you run install/update within a project then it updates the lockfile

Extensions sources:
  - global cache
  - project lockfile
  - 'extensions' inside a yaml key

_quarto/
  .quarto
  .gitignore
     .quarto/
     extensions/
   metadata.yml
   
   package-lock.json
   node_modules/

   extensions.yml
   extensions/
      corporate-special-sauce/


quarto bundle foo.Rmd

repositories:
   sauce: https://corporate-sauce.net


quarto install sauce/foo



_quarto
  .gitignore
     .quarto
     extensions/

  .quarto/ 

  metadata.yml

  extensions.yml
  extensions/
  


Projects:



FUTURE
4) Lock file / Extensions




A 'format' is a director or zip file which is:
  - Located in the _quarto directory
  - Format YAML (must declare base)
  - Arbitrary other files that can be referenced (relatively) by the format YAML


Port a dozen or rticles formats
  - Authors metadata standard 

# standalone document formats



metadata:
   - Inline YAML in code chunks
       - https://gist.github.com/jjallaire/a315f08ba5007678f3f8cbcb093cafb4
       - PR for jupytext to support the same for md:markdown
       - PR for knitr so that knitr::purl ignores the front matter
       - RStudio also needs to ignore the front matter
  

quarto publish:
  - RSC
  - Netlify
  - WordPress
  - Confluence

html-slides:

library(shiny)
library(bs4)


{{ pagebreak }}
{{ include <path> }}
{{ <reference metadata>  }}
{{ rstudio.version }}
{{ metadata.date | formatDate }}  ?
{{= print("x") }}
{{< figure projections.xlsx#chunk-label caption="asfdasdf" label="myplot" >}}
{{< table projections.ipynb#fy-2019 label="projections" label="">}}
{{< text notebook.Rmd##chunk-label >}}
{{< tweet https://twitter.com/foo/status/34453323455 >}}
{{< video https://youtube.com/foo/status/34453323455 >}}



Future
-----------------------------------------

Take a look at prosemirror-typerighter: https://github.com/guardian/prosemirror-typerighter

Take a look at Pluto (Julia)

- WordPress (https://developer.wordpress.com/docs/api/)

- RStudio IDE Visual Editor for quarto
    - crossref system
    - project hooks (crossref indexing, build, etc.)
    - publishing hooks for RSC
    - jupyter front-end


- Visual Studio Code 
    - visual editor extension
    - quarto publishing workflow (preview, etc.)


<< write tests >>

https://github.com/microsoft/vscode-jupyter
https://devblogs.microsoft.com/python/introducing-the-jupyter-extension-for-vs-code/


Cleanup
--------------------------------------------

Extracate the cache dir logic from rmarkdown::render and call that


discover index.Rmd or ui.Rmd for quarto run. can't rely on
rmarkdown::run b/c we need to figure out which Rmd to render




Future
---------------------------------------------

- Evaluate esbuild

- Consider yaml for chunk options
    * knitr
    * jupytext pr


Julia Dev workflow

- Make sure that Revise.jl is loaded at startup https://timholy.github.io/Revise.jl/stable/

- Run Julia in Quarto dir

- Switch to pkg mode "]" and execute "dev ."

- Exit pkg mode (backspace)

- using Quarto

- changes should show up automatically now



Future - Charles
---------------------------------------------

Windows:
- Continue to monitor Cliffy + Deno versions for Windows support.
  Unpinned Cliffy was causing an error when running bundled version (e.g. installed version) on Windows
  Deno 1.8.1+ currently stack overflows when bundling on windows
